[
  {
    "id": "html-and-css",
    "title": "HTML&CSS",
    "subTitle": "レイアウトを作れるようになろう",
    "description": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。HTMLとCSSを学べば、これまであなたの頭の中にあった考えを、形にして表現する手段を手に入れることができるのです。",
    "thumbnail": "../images/skills/html-and-css/thumbnail.png",
    "overview": "HTMLとCSSはWebページを作るために使われる言語です。<br><br>インターネット上に公開されているWebページは、Webサーバー上にHTMLやCSSが書かれたファイルを置くことで、全世界の人に公開することができます。<br><br>HTMLはWebページに表示する文字や画像などの内容とそれらの構造を指定する役割があり、さまざまな<span data-type='term'>タグ</span>を使用して記述します。<br><br>CSSは色やレイアウトなど見た目を装飾する役割があり、HTMLで記述した要素に対して<span data-type='term'>プロパティ</span>で見た目を指定します。",
    "image": "../images/skills/html-and-css/illustration.svg",
    "purpose": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。あなたがWebページを作成したいと考えているなら、HTMLやCSSの知識は必要不可欠です。<br><br>CSSのプロパティを使いこなすことができれば、さまざまな画面サイズでの表示に対応した、思い通りの見た目のWebページを作ることができるようになります。<br><br>HTMLとCSSでWebページを作成できれば、これまであなたの頭の中にあった考えや誰にも見せたことのなかった作品を世界に公開することができるようになります。HTMLとCSSを一通り使えるようになったら、ポートフォリオサイトなどを作ってあなたが共有したい情報や、あなたの作った作品を世界に発信してみましょう。",
    "standard": {
      "basic": [
        "HTMLとCSSの役割を説明できる",
        "ボックスモデルでレイアウトを組むことができる",
        "HTMLのタグの属性やCSSのプロパティを調べて使うことができる",
        "レスポンシブなページを作ることができる"
      ],
      "practical": [
        "CSSが適用される優先順位を説明できる",
        "ブラウザの開発者ツールを使ってデバッグができる",
        "Webアクセシビリティに対応したページを作れる"
      ]
    },
    "overall": "まずはHTMLの基本的なタグを使ってシンプルなWebページの構造を作成したあと、CSSを使ってどの様に見た目が変わるかを確認してみましょう。ブラウザの<a href='/scenes/web-basics/skills/developer-tools' target='_blank' rel='noopener noreferrer'>開発者ツール</a>を使えば、表示レイアウトの確認・修正を簡単に行えます。<br/><br/>レイアウトを組むときは、<span data-type='term'>ボックスモデル</span>（縦並びや横並び）について理解しておくと、スムーズにWebページを作ることができます。CSSのプロパティはスタイルを適用するHTMLタグの種類によって結果が変わるものもあるので、その点も意識して学んでいくと良いでしょう。<br/><br/>慣れてきたら<span data-type='search'>HTML タグ</span><span data-type='search'>HTML 属性</span><span data-type='search'>CSS プロパティ</span>などで検索し、新しいタグやプロパティをどんどん使ってみましょう！",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "easy title1",
            "child": ["easy child1", "easy child2"]
          },
          {
            "title": "easy title2",
            "child": ["easy child3", "easy child4"]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "middle title1",
            "child": ["middle child1", "middle child2"]
          },
          {
            "title": "middle title2",
            "child": ["middle child3", "middle child4"]
          }
        ]
      }
    },
    "sceneId": "web-basics"
  },
  {
    "id": "object-oriented-programming",
    "title": "オブジェクト指向",
    "subTitle": "コードを整理し、機能の追加や変更をしやすくしよう",
    "description": "オブジェクト指向は、Webアプリケーションを作成する為の基礎となる考え方やプログラミング技術です。オブジェクト指向でアプリケーションを作成することにより、見通しがよく、メンテナンス性に優れたプログラミング技術を身に付けましょう。",
    "thumbnail": "../images/skills/object-oriented-programming/thumbnail.png",
    "overview": "オブジェクト指向とは、オブジェクトと言う”モノ”単位でシステムを作成する考え方です。オブジェクト指向により、見通しの良くメンテナンス性に優れたシステムを作ることができます。<br><br>オブジェクトの働きは、そのひな形としての<span data-type='term'>クラス</span>に<span data-type='term'>属性</span>や<span data-type='term'>振る舞い</span>を記述します。<br><br>オブジェクト指向で作らえたシステムは、クラスの定義に従い複数のオブジェクトが必要なときに生成され、他のオブジェクトと相互に協調し合いながら効率的に動作するのが特徴です。<br><br>「乗り物」クラスを例に、「具体的な乗り物」オブジェクトを作る流れを図で確認してみましょう。乗り物クラスには共通する属性や振る舞いを定義します。これにより似た振る舞いをもつさまざまな乗り物を1つのクラスから作ることができます。<br><br>このように複数のオブジェクトは一つのクラスから生成することができます。オブジェクト指向の考え方に沿って開発することで、役割に応じた部分を集めてプログラム全体を構成することで、それぞれの部分の独立性が保たれ機能追加や修正などが容易になります。",
    "image": "../images/skills/object-oriented-programming/illustration.svg",
    "purpose": "オブジェクト指向を学ぶことで、作りたい機能をどのようにプログラミングすると良いかをイメージできるようになるでしょう。<br><br>オブジェクト単位で整理されていないプログラムの場合、それぞれの役割をもったプログラムがお互いに依存し合ったり、引数の多い関数や似たようなコードが量産されたりするので、<span data-type='term'>拡張性</span>や<span data-type='term'>再利用性</span>がなくなってしまいます。<br><br>オブジェクト指向は、多くのプログラミング言語で採用されている基本的な考え方です。オブジェクト指向でプログラムを書くことで同じ処理をクラス単位でまとめることができるため、プログラムの再利用性が高まります。<br><br>オブジェクトの振る舞いに変更が必要な場合、それがある単一のクラスの内部に閉じたものであれば、他のクラスで作られたオブジェクトに影響を与えずに修正することができます。このようにメンテナンス性が高まるのもオブジェクト指向の大きなメリットの一つです。<br><br>オブジェクト指向を学んで、機能の追加・変更がしやすいプログラムを書けるようになりましょう。",
    "standard": {
      "basic": [
        "オブジェクト指向の考え方について説明できる",
        "なぜ拡張性や再利用性が必要か説明できる",
        "「カプセル化」の意味とメリットについて説明できる",
        "単純なクラスを作ってオブジェクト生成できる",
        "「継承、集約」について説明できる"
      ],
      "practical": [
        "「ポリモーフィズム」について説明できる",
        "オブジェクト指向が誕生した経緯や歴史について説明できる"
      ]
    },
    "overall": "オブジェクト指向の概念は分かりづらく、プログラミングとの関係について最初はイメージし難いかもしれません。<br><br>初めて学ぶときはできるだけ専門用語が少く、図解や具体例を使って解説している参考書やWebサイトで学んでみると良いでしょう。最初に<a href='https://www.google.com/search?ei=YvFiX4T9F8avoATZjqz4Dg&q=%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91+%E8%A8%98%E4%BA%8B&oq=%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91+%E8%A8%98%E4%BA%8B&gs_lcp=CgZwc3ktYWIQAzIFCAAQzQIyBQgAEM0CUMYlWM8oYKYvaABwAHgAgAFZiAH7AZIBATOYAQCgAQGqAQdnd3Mtd2l6wAEB&sclient=psy-ab&ved=0ahUKEwiEtu79t-_rAhXGF4gKHVkHC-8Q4dUDCA0&uact=5' target='_blank' rel='noopener noreferrer'>オブジェクト指向について解説された記事</a>やブログなどを読んでみるのもおすすめです。まずはクラスとカプセル化について理解すれば十分です。<br><br>ほとんどのプログラミング言語はオブジェクト指向でプログラムを書くことができるので、使用している言語でオブジェクト指向の練習をしてみましょう。<br><br>はじめはどの単位でクラスを定義すれば良いか、クラスの中にどんな変数や関数を定義すれば良いかわからないかもしれませんが、クラスの設計に関する参考書などを読みながら学んでいきましょう。",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "easy title1",
            "child": ["easy child1", "easy child2"]
          },
          {
            "title": "easy title2",
            "child": ["easy child3", "easy child4"]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "middle title1",
            "child": ["middle child1", "middle child2"]
          },
          {
            "title": "middle title2",
            "child": ["middle child3", "middle child4"]
          }
        ]
      }
    },
    "sceneId": "web-application-development"
  },
  {
    "id": "refactoring",
    "title": "リファクタリング",
    "subTitle": "開発を進めやすいコードに改良しよう",
    "description": "継続的に機能追加を行うためには、開発を進めていく中で複雑になった設計やコードを随時改善していく必要があります。リファクタリングをして、コードを読みやすく、修正しやすく、バグも発見しやすい状態を維持しましょう。",
    "thumbnail": "../images/skills/refactoring/thumbnail.png",
    "overview": "リファクタリングとは、プログラムの機能を保ちながら、理解や修正がし易いプログラムコードに改良することです。<br><br>リファクタリングは、重複したコードを整理したり変数や関数の命名を分かりやすくする事でプログラミングの作りを改善します。<br><br>リファクタリングを実施する場合は、本来の機能を壊してしまわない様に、自動テストなどを準備して都度確認しながら特定の範囲から徐々に広げて実施して行くと良いでしょう。<br><br>リファクタリングを行うタイミングは、専用に作業期間を設ける場合もありますが、通常の開発フロー中の機能追加やバグ修正の最中で行う場合など様々です。いつ行うにしても、現状を把握するための調査や分析を行い、どこまでリファクタリングを行うか目標を定める必要があるでしょう。<br><br>リファクタリングの目的や方法と実施範囲を確認し、チーム内で相談しながら進めましょう。",
    "image": "../images/skills/refactoring/illustration.svg",
    "purpose": "見通しの良いプログラムを書く技術は、特にチーム開発においては重要なスキルです。<br><br>初期のプロダクトの開発や仕様変更の激しい開発現場では、とりあえず動くものを作る事が優先されプログラムの読み易さなどは後回しにされることがあります。<br><br>リファクタリングを行わずにこれを繰り返すと、コードの品質が徐々に下がってきます。この様なコードには機能の重複などが放置されているため理解が難しく、既存のコードに影響を与えずに機能を追加する事が難しくなります。<br><br>リファクタリングを定期的に行う事で、プログラムを読みやすく、修正しやすく、バグを発見しやすくなるため、開発コストの削減や長期的な開発速度の向上につながります。<br><br>改善したいコードがあっても、リリースされているコードに手を付けるのが怖く、リファクタリングできない開発現場がよくあります。リファクタリング手法についてきちんと学び、恐れずにプログラムの改善に取り組めるようになりましょう。",
    "standard": {
      "basic": [
        "リファクタリングの目的を説明できる",
        "リファクタリングの一環としてチームでコーディング規約を決められる",
        "ネストしたコードを改善できる",
        "変数名をわかりやすい名前に変更できる",
        "冗長なコードをインライン化することができる",
        "重複したコードを共通化できる"
      ],
      "practical": ["プログラムの設計レベルでのリファクタリングを実践できる。"]
    },
    "overall": "正しくリファクタリングを行うために、<a href='https://www.google.com/search?q=%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%A8%E3%81%AF&oq=%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%A8&aqs=chrome.1.69i57j0l7.4223j0j7&sourceid=chrome&ie=UTF-8' target='_blank' rel='noopener noreferrer'>リファクタリングの効果</a>や手法などを書籍で学んでから取り掛かるのが良いでしょう。<br><br>「コードの量を減らせば良い」「共通化すれば良い」などの表面的なリファクタリングだけでは長期的にメンテナンスのしやすいコードとはならない可能性もあります。<br><br>はじめにコーディング規約に従って、分かりづらい変数名や関数名の修正を行い、次に不要なネストや複雑なコードの解消に取り組みましょう。また実際のシステムには基本的な作りが煩雑で、プログラム設計についても改善が求められる場合があります。さまざまなレベルで求めれるリファクタリングに対応できるように学んでいきましょう。",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "easy title1",
            "child": ["easy child1", "easy child2"]
          },
          {
            "title": "easy title2",
            "child": ["easy child3", "easy child4"]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "middle title1",
            "child": ["middle child1", "middle child2"]
          },
          {
            "title": "middle title2",
            "child": ["middle child3", "middle child4"]
          }
        ]
      }
    },
    "sceneId": "team-development"
  },
  {
    "id": "web-security",
    "title": "Webセキュリティ",
    "subTitle": "安全なサービスを届けよう",
    "description": "脆弱性のあるWebアプリケーションをインターネット上で公開すると、攻撃の対象となりユーザー情報の流出などの恐れがあります。安心してユーザーに使ってもらい、自信をもってプロダクトを公開するためにWebアプリケーションのセキュリティについて学んでおきましょう。",
    "thumbnail": "../images/skills/web-security/thumbnail.png",
    "overview": "Webアプリケーションはインターネットを通して世界中の人に届けることができますが、セキュリティ対策を行わずにサービスをリリースすると、データの漏洩などのサービスの継続性に関わる問題を招く恐れがあります。このような問題を招く可能性のあるアプリケーションの構造的な欠陥を<span data-type='term'>脆弱性</span>や<span data-type='term'>セキュリティバグ</span>と呼びます。<br><br>Webアプリケーションに対する攻撃には<span data-type='term'>SQLインジェクション</span>や<span data-type='term'>ディレクトリ・トラバーサル</span>などさまざまな手法があります。Webアプリケーションの開発において、脆弱性の潜む部分を理解し安全性に配慮して開発することでアプリケーションへの攻撃を防ぐことができます。<br><br>また、Webアプリケーションだけでなくサーバーやネットワークなどに関わる脆弱性についての対応も重要です。例えばサーバーにおいてはOS等のアップデートや、ログインアカウントの適切な運用などを行いサーバーへの不正アクセスを防ぎます。また、ネットワークにおける対策は、通信データの暗号化や<span data-type='term'>ファイアーウォール</span>の導入などが挙げられます。<br><br>Webセキュリティ対策をすることで、Webアプリケーションを公開するリスクを最小限に抑えることができます。",
    "image": "../images/skills/web-security/illustration.svg",
    "purpose": "アプリケーションをユーザーが安心して使い続けられるようにする事は、開発者にとって重要な責務です。<br><br>もしセキュリティ対策をせずWebアプリケーションを公開してしまうと、個人情報漏洩によりユーザーに被害が及ぶリスクがあります。<br><br>ユーザーが安心して使えるWebアプリケーションを公開することは、ユーザーからの信頼を得ることに繋がります。<br><br>長く安全に利用されるWebアプリケーションを作るために、セキュリティ対策について学びましょう。",
    "standard": {
      "basic": [
        "システムの脆弱性によりどの様なリスクがあるか説明できる",
        "SSL/TLSを採用する理由について説明できる",
        "CSRFやXSS、インジェクション攻撃やDoSなどの代表的な攻撃について説明できる",
        "セッション管理の不備とは何かについて説明できる",
        "管理者権限が外部から悪用されないような対策ができる"
      ],
      "practical": [
        "不要なポートが開放されている事によるリスクを説明できる",
        "ファイアーウォールの役割について説明できる",
        "安全な認証や認可について説明できる",
        "WAFについて説明できる",
        "セキュリティに留意してOSやミドルウェアを定期的にアップデートしている"
      ]
    },
    "overall": "脆弱性を減らす対策を行うためには、一般的にWebアプリケーションのどの部分にリスクがあるかについて知る必要があります。<br><br><a href='https://www.ipa.go.jp/security/vuln/websecurity.html' target='_blank' rel='noopener noreferrer'>IPA</a>の発行しているセキュリティ実装チェックリストで攻撃対象となりうる実装部分とその攻撃方法について把握しておくと良いでしょう。セキュリティに関する書籍にはよく使われる攻撃手法やツールとその対策方法が紹介されているので併せて調べてみましょう。<br><br>例えばWebアプリケーションではよく見かけるログイン機能も対策を行わないと個人情報を盗むための入り口となります。これらのリスクとリスクが発生しうるポイントを理解した上で脆弱性の少ないWebアプリケーションの実装方法について考えてみましょう。",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "easy title1",
            "child": ["easy child1", "easy child2"]
          },
          {
            "title": "easy title2",
            "child": ["easy child3", "easy child4"]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "middle title1",
            "child": ["middle child1", "middle child2"]
          },
          {
            "title": "middle title2",
            "child": ["middle child3", "middle child4"]
          }
        ]
      }
    },
    "sceneId": "releasing-your-application"
  },
  {
    "id": "data-analysis-platform",
    "title": "データ分析基盤",
    "subTitle": "プロダクトの状況を正確に把握しよう",
    "description": "どんな改善が必要か判断するためにはプロダクトの状況を正確に把握する必要があります。ユーザーの利用状況やシステムの稼働状況を収集し分析できるようになりましょう。",
    "thumbnail": "../images/skills/data-analysis-platform/thumbnail.png",
    "overview": "Webアプリケーションをリリースしたら、ユーザーのサービス利用状況やシステムの稼働状況を把握するための情報収集が大切です。<br><br>Webアプリケーションが稼働すると様々なデータが発生します。例えばサーバーリソースの使用率やアプリケーションの実行ログ、Webページを訪れたユーザーの動きに関する情報などです。これらのデータはログファイルやデータベースに蓄積されます。<br><br>データは単体ではそれぞれ独立した情報の集まりですが、目的に応じて必要なデータを抽出・可視化・分析することでシステムにおける問題の早期発見やユーザー体験の向上に役立てることができます。<br><br>例えばデータからリソース使用率が高いサーバーが判明した場合、ユーザー数の増加率と合わせて近い将来必要となる処理能力を試算することでリソース不足が発生する時期を予想することができます。またユーザーの滞在時間や訪問回数が極端に少ないページが存在する場合、そのページに問題がある可能性があります。<br><br>このようにデータを収集し分析することで、開発者はシステムに発生している様々な問題を知ることができます。",
    "image": "../images/skills/data-analysis-platform/illustration.svg",
    "purpose": "アプリケーションの抱える問題やその兆候を把握することで、次に何を改善すべきかが明確になります。<br><br>ユーザーの利用状況を把握できなければ、サービスを利用する中でユーザーが感じる不便さに気付けず、何を改善しどのような新機能を追加するべきかのヒントも得られません。最悪ユーザーがサービスの利用をやめてしまうことも考えられます。もし開発者がユーザー体験を悪化させている問題点を発見し解決できるようになれば、ユーザーにより良いサービスを届けられます。<br><br>また、障害の兆候を開発者が検知できなければシステム障害が発生してしまい、復旧までサービスの提供を止めることになりますが、データから障害の兆候を読み取ることができれば障害を未然に防げます。<br><br>システムの現在の状況を把握するためにデータの収集や分析を行い、障害に強くユーザーが使いやすいアプリケーションをユーザーに届けましょう。",
    "standard": {
      "basic": [
        "データ分析の対象となるデータの種類について説明できる",
        "データの可視化を行うことのメリットを説明できる",
        "データ分析基盤を作る際の要素「収集」「変換」「保存」「分析」「表示」「運用」について説明できる",
        "代表的なデータ分析手法ついて説明できる"
      ],
      "practical": [
        "アクセス解析ツールを使ってWebページの利用状況を分析できる",
        "KibanaやRe:dashなどのデータ可視化・分析ツールを使うことができる"
      ]
    },
    "overall": "データ分析を行う前に、なぜデータを収集し分析を行うのかについて考えてみましょう。目的をはっきりさせることで収集すべきデータの種類やデータの用途が明確となり、データ分析の結果を活用できるようになります。<br><br>データ分析基盤を作ればデータの収集や抽出、表示を自動で行えます。クラウドサービスを利用している場合、モニタリングツールやデータ収集や整形を自動で行うツールなどが用意されており、簡単な設定で使い始めることができます。<a href='https://www.google.com/search?q=AWS+%E3%83%AD%E3%82%B0%E7%AE%A1%E7%90%86&oq=AWS+%E3%83%AD%E3%82%B0%E7%AE%A1%E7%90%86&aqs=chrome..69i57j0l2j69i64j69i60.5516j0j7&sourceid=chrome&ie=UTF-8' target='_blank' rel='noopener noreferrer'>AWS ログ管理</a>で調べて活用法やプラクティスについて学んでみましょう。<br><br>またデータ分析のためのミドルウェアを導入すると、収集するデータや表示方法についてより細かい設定を行うことができます。googleAnalyticsなどのアクセス解析ツールは多くのWebサイトで利用されており、Webページにおけるユーザーの行動に関する詳細な情報が得られます。<br><br>データ分析基盤から得られたデータを元に、システムの稼働情報やユーザー行動に関する指標を見てみましょう。データや指標から気づいたことを書き出すと、新しい発見があるかもしれません。",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "easy title1",
            "child": ["easy child1", "easy child2"]
          },
          {
            "title": "easy title2",
            "child": ["easy child3", "easy child4"]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "middle title1",
            "child": ["middle child1", "middle child2"]
          },
          {
            "title": "middle title2",
            "child": ["middle child3", "middle child4"]
          }
        ]
      }
    },
    "sceneId": "continuous-delivery"
  }
]
