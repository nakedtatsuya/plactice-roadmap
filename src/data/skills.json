[
  {
    "id": "html-and-css",
    "title": "HTML&CSS",
    "subTitle": "レイアウトを作れるようになろう",
    "description": "ホームページやECサイトなど、全てのWebページでHTML&CSSは使われています。HTML&CSSを学べば、これまであなたの頭の中にあった考えを、形にして表現する手段を手に入れることができるのです。",
    "thumbnail": "../images/skills/html-and-css/thumbnail.png",
    "overview": "HTMLとCSSはWebページを作るために使われる言語です。<br><br>インターネット上に公開されているWebページは、Webサーバー上にHTMLやCSSが書かれたファイルを置くことで、全世界の人に公開することができます。<br><br>HTMLはWebページに表示する文字や画像などの内容とそれらの構造を指定する役割があり、さまざまな\"タグ\"を使用して記述します。<br><br>CSSは色やレイアウトなど見た目を装飾する役割があり、HTMLで記述した要素に対して\"プロパティ\"で見た目を指定します。",
    "image": "../images/skills/html-and-css/illustration.svg",
    "purpose": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。あなたがWebページを作成したいと考えているなら、HTMLやCSSの知識は必要不可欠です。<br><br>CSSのプロパティを使いこなすことができれば、さまざまな画面サイズでの表示に対応した、思い通りの見た目のWebページを作ることができるようになります。<br><br>HTMLとCSSでWebページを作成できれば、これまであなたの頭の中にあった考えや誰にも見せたことのなかった作品を世界に公開することができるようになります。HTMLとCSSを一通り使えるようになったら、ポートフォリオサイトなどを作ってあなたが共有したい情報や、あなたの作った作品を世界に発信してみましょう。",
    "standard": {
      "basic": [
        "HTMLとCSSの役割を説明できる",
        "ボックスモデルでレイアウトを組むことができる",
        "HTMLのタグの属性やCSSのプロパティを調べて使うことができる",
        "レスポンシブなページを作ることができる",
        "ブラウザの開発者ツールを使ってデバッグができる"
      ],
      "practical": [
        "CSSが適用される優先順位を説明できる",
        "Webアクセシビリティに対応したページを作れる",
        "ブラウザの開発者ツールを使ってデバッグができる"
      ]
    },
    "overall": "まずはHTMLの基本的なタグを使ってシンプルなWebページの構造を作成したあと、CSSを使ってどの様に見た目が変わるかを確認してみましょう。ブラウザの<a href='/scenes/web-basics/skills/developer-tools' target='_blank' rel='noopener noreferrer'>開発者ツール</a>を使えば、表示レイアウトの確認・修正を簡単に行えます。<br/><br/>レイアウトを組むときは、\"ボックスモデル\"（縦並びや横並び）について理解しておくと、スムーズにWebページを作ることができます。CSSのプロパティはスタイルを適用するHTMLタグの種類によって結果が変わるものもあるので、その点も意識して学んでいくと良いでしょう。<br/><br/>慣れてきたら<span data-type='search'>HTML タグ</span><span data-type='search'>HTML 属性</span><span data-type='search'>CSS プロパティ</span>などで検索し、新しいタグやプロパティをどんどん使ってみましょう！",
    "sceneId": "web-basics"
  },
  {
    "id": "editors",
    "title": "エディタ",
    "subTitle": "快適にコーディングするために開発環境を整えよう",
    "description": "Webページ開発をはじめるためにエディタを用意しましょう。エディタを使うことで、入力補完や文法のチェックを行ってくれるため、快適にプログラミングができます。お気に入りのエディタを見つけて、楽しくプログラミングできる環境を整えましょう。",
    "thumbnail": "../images/skills/editors/thumbnail.png",
    "overview": "エディタ（テキストエディタ）はプログラミングのコードを書くときに使うツールです。<br>エディタは記述しているコードの構文を検知して色を付けたり（シンタックスハイライト）、これから入力しようとしている構文を予測して候補を表示（入力補完）してくれます。これらの機能により、開発効率を上げることができます。<br><br>エディタにはプログラムのコードをより効率的に書くための便利なプラグインも用意されています。例えば不揃いなコードに自動で改行を入れてくれたり、関数をクリックするとその関数の定義部分に飛べるなど、繰り返し行う面倒な作業をサポートしてくれます。<br><br>また、エディタの種類には統合開発環境（IDE）と呼ばれるものもあり、コードのコンパイルやデバッグ、プログラムのテストを行えます。",
    "image": "../images/skills/editors/illustration.svg",
    "purpose": "エディタを利用することでコーディングを快適に行うことができ開発効率を上げることができます。<br><br>プログラムのコーディングはメモ帳などでも行えますが、メモ帳はプログラミングで利用することを前提としたツールではないため効率を上げるための機能などは備わっていません。<br><br>プログラミング用のエディターを使えば、シンタックスハイライトでコードの可読性をあげたり予測変換機能によってコーディングのスピードも向上します。その他にもさまざまなプラグインを導入することで必要な機能を追加できます。<br><br>どのエディターを使うか迷ったら、その他の拡張機能やIDE機能についても調べて判断しましょう。<br><br>エディタを利用して、コーディングを快適に行いましょう。",
    "standard": {
      "basic": [
        "エディタをインストールして使うことができる",
        "ファイルの作成、保存などのショートカットキーを使える",
        "エディタのカラーテーマを変更できる",
        "エディタのフォントを変更できる",
        "インデント幅をコード規約に合わせて設定できる"
      ],
      "practical": [
        "エディタのプラグインを導入できる",
        "エディタのデバッグ機能を使える",
        "VimやEmacsを用いてファイルの作成、編集、保存ができる"
      ]
    },
    "overall": "多くのエディタは無料で使うことができます。「エディタ プログラミング」などで調べてみて、気になったエディタをインストールしてみるとよいでしょう。操作方法に迷うこともありますが、ファイルの作成やフォルダの移動、メニューバーの操作を試したり、使い方に関する情報を調べたりして操作に慣れていきましょう。「保存」や「検索」などよく行う操作の「ショートカットキー」を覚えると、コーディングのスピードが上がります。エディターのカラーテーマやフォントを好みのものに変更することでモチベーションもアップします。<br><br>一通り慣れてきたらプラグインを導入し、使いやすいエディタにカスタマイズしていきましょう！",
    "sceneId": "web-basics"
  },
  {
    "id": "internet",
    "title": "インターネット",
    "subTitle": "Webの仕組みを知ろう",
    "description": "すべてのWebページはインターネットの仕組みの上に成り立っているので、Webページの公開にはインターネットの基本的な知識が必要です。作成したWebページを世界に公開する準備をしましょう。",
    "thumbnail": "../images/skills/internet/thumbnail.png",
    "overview": "私たちが利用しているWebページは、インターネットの仕組みの上に成り立っています。コンピューターをインターネットにつなげることで、世界中のサーバーやコンピューターとつながりデータをやりとりできるようになります。ブラウザでWebページをみたり、離れた相手にメールを送れるのもインターネットのおかげです。<br><br>インターネットはデータを要求する”クライアント”とそれに応答する”サーバー”とのやりとりで成り立っています。クライアントからの要求を”リクエスト”、サーバーからの応答を”レスポンス”と呼びます。ブラウザはサーバーにWebページを要求するクライアントです。<br><br>クライアントとサーバーのやり取りは「HTTPプロトコル」というルールに則っており、リクエストやレスポンスの中に含まれる「HTTPメッセージ」と呼ばれるメッセージを通して行われます。<br><br>リクエストのメッセージには、インターネット上の場所を示す「URL」や実行してほしいアクションを示す「HTTPリクエストメソッド」などを含めてサーバーに送ります。HTTPリクエストメソッドには情報の取得を要求するGETや情報の登録をするPOSTなどがあります。<br><br>レスポンスのメッセージには、リクエストが成功したか失敗したかを示す「ステータスコード」やリクエストに成功している場合にはHTMLファイルなどのデータを含めてクライアントに返します。<br><br>最終的にクライアントがレスポンスのメッセージを受け取ることでWebページが表示されているのです。",
    "image": "../images/skills/internet/illustration.svg",
    "purpose": "Webページを作れるようになるには、インターネットとその上でのWebの仕組みを理解する必要があります。<br><br>Webページの公開にはサーバーの準備やドメインの取得、HTMLファイルなどの配置が必要です。またこれらの役割や働きを理解するにはインターネットの基本的な知識が必要となります。まずは基礎として、HTTP通信、IPアドレスやドメイン名などの役割と動きについて学びましょう。<br><br>ユーザーがWebページにアクセスするとき、必ずインターネットを経由します。<br><br>インターネットについて学んでWebの仕組みを理解し、Webページを公開できるようになりましょう。",
    "standard": {
      "basic": [
        "クライアントとサーバーの違いについて説明できる",
        "IPアドレスの役割について説明できる",
        "ドメイン名とDNSサーバーについて説明できる",
        "HTTPプロトコルについて説明できる"
      ],
      "practical": [
        "HTTPリクエストのメッセージヘッダーとメッセージボディについて説明できる",
        "HTTPとTCP/IPの役割の違いについて説明できる",
        "ルーターとパケットの中継動作について説明できる"
      ]
    },
    "overall": "インターネットでは、TCP/IPとその上位プロトコルのHTTPでデータをやりとりします。<br><br>プロトコルやIPアドレスとURLの関係、ネットワークなどに関して、図解が載った入門書籍などで学ぶと良いでしょう。",
    "sceneId": "web-basics"
  },
  {
    "id": "javascript",
    "title": "JavaScript",
    "subTitle": "Webページに動きをつけてみよう",
    "description": "HTML&CSSだけでは少し退屈なWebページに感じたかもしれません。WebページにJavaScriptを取り入れることで、クリックやスクロールなどのユーザーの操作に応じた動的な表現が可能になります。このような仕掛けを用意して、楽しさや利便性を備えたWebページを作れるようになりましょう。",
    "thumbnail": "../images/skills/javascript/thumbnail.png",
    "overview": "JavaScriptは世界でもっとも使われているプログラミング言語の1つであり、近代的なWebページを作成するためには欠かせません。<br><br>JavaScriptを使うことで、クリックでHTML要素の色や形を変えたりアニメーションを表示するなど、Webページにさまざまな動きをつけることができます。JavaScriptはHTML/CSSと共に、Webページのブラウザでの表示や動作についての記述に使われます。<br><br>ユーザーの操作によって動的に変化するWebページが主流となってきたことから、現在JavaScriptは多くのWebページで利用されています。",
    "image": "../images/skills/javascript/illustration.svg",
    "purpose": "JavaScriptを使ってWebページ上に動的な表現を取り入れることで、ユーザーに操作した感覚を与えたり、ローディング中の待ち時間を退屈にさせないことが可能になります。このような仕掛けにより、Webページを利用するユーザーに「楽しく・心地よい」体験を提供できます。<br><br>また、JavaScriptで作られたフロントエンド用のライブラリやフレームワークも登場しており、代表的なものにReact、Vue、Angularなどがあります。<br><br>このように、楽しさや利便性を備えたWebページを作るうえではJavaScriptは欠かせない言語となっています。<br><br>Webフロントエンド開発で高機能なWebページを作りたい場合は、JavaScriptを学ぶとよいでしょう。",
    "standard": {
      "basic": [
        "JavaScriptで使用するデータ型について説明できる",
        "演算子や条件分岐、ループ文を実装できる",
        "引数や戻り値を利用して関数を実装できる",
        "JavaScriptのオブジェクトについて説明できる",
        "DOMについての説明や要素の追加、変更、削除などのDOM操作ができる",
        "イベントハンドラを実装できる"
      ],
      "practical": [
        "PromiseやAsync/Awaitを用いて非同期処理を実装できる",
        "動画やアニメーションなどのマルチメディアコンテンツを表示できる"
      ]
    },
    "overall": "まずは、基本的な文法を押さえましょう。<br>基本構文やデータ型の他に、JavaScriptにおけるオブジェクトの理解も重要です。<br><br>次に、Webページに動きをつけるために必要な「DOM操作」やユーザーの操作を察知する「イベント」について調べてみましょう。<br><br>また、JavaScriptは文法も随時更新されており変化が速い分野です。<br><br>全体像を理解するためには、JavaScriptの歴史に触れてみるのもいいかもしれません。",
    "sceneId": "web-basics"
  },
  {
    "id": "developer-tools",
    "title": "開発者ツール",
    "subTitle": "Webページ開発のデバッグをしよう",
    "description": "開発を行っているとレイアウト崩れやJavaScriptが思うように動かない状況に直面することもあるでしょう。そんなときは開発者ツールを使うことで原因を調査することができます。自分で原因を見つけて解決できれば、あなたはどんなWebページも作ることができます。",
    "thumbnail": "../images/skills/developer-tools/thumbnail.png",
    "overview": "開発者ツールは、Webページ開発のデバッグに使えるブラウザが提供している機能です。<br><br>開発者ツールを使えば、HTMLソースコードがWebページ上のどの部分に表示されていて、HTML要素にどのようなCSSプロパティが適用されているかを一覧で確認することができます。また、JavaScriptの実行状況も確認することが可能です。<br>またその他にもサーバーとの通信状況や通信にかかる時間、Cookie（クッキー）などのストレージの状態も確認できるため、Webページの作成とデバッグに活用できます。",
    "image": "../images/skills/developer-tools/illustration.svg",
    "purpose": "Webページを作っていると、レイアウト崩れやJavaScriptが思うように動かないなどの不具合が発生することがあります。しかし、レイアウト崩れやエラーの原因となるコードが特定できなければ修正もできません。<br><br>開発者ツールを使用すればコーディング中にWebページの見え方やJavaScriptのエラーも確認できるため、タブレットやモバイルでのレイアウト確認やJavaScriptのデバッグなど、Webページ開発中に発生するエラーや不具合を即時に発見し修正できます。<br>開発者ツールの使い方を学んで、自分で原因を見つけて解決できるようになりましょう。",
    "standard": {
      "basic": [
        "開発者ツール上でHTML要素の編集ができる",
        "HTML要素に適用されるCSSの確認・編集ができる",
        "画面幅を変更してレスポンシブデザインの確認ができる",
        "HTMLにどのファイルが読み込まれているのか確認できる"
      ],
      "practical": [
        "開発者ツール上でJavaScriptの実行状況を確認できる",
        "Cookieなどのストレージを確認できる",
        "ページが表示されるまでのネットワーク状況を確認できる"
      ]
    },
    "overall": "まずは既存のWebページで開発者ツールを使ってみましょう。<br><br>開発者ツールはWebページの表示確認だけでなく、ツール上で直接HTMLやCSSを変更することもできるので、ぜひ試してみてください。<br><br>開発者ツールはブラウザが提供している機能のため、利用しているブラウザによって違いがあります。どのブラウザを使うか決まっていない場合は、幅広く使われている「Google Chrome」ブラウザの開発者ツールをおすすめします。<br><br>最初は直感的にわかるHTMLやCSSのデバッグを経験し、慣れてきたらJavaScriptをステップ実行したりコンソールで実行状況を確認するなど使える幅を広げていくのがいいでしょう。<br><br>開発者ツールは多機能なため全ての機能を理解するのは大変ですが、焦らずに実践で少しずつ取り入れながら学んでいきましょう！",
    "sceneId": "web-basics"
  },
  {
    "id": "server-side-programming",
    "title": "サーバーサイドプログラミング",
    "subTitle": "サーバーで動くプログラムを作ろう",
    "description": "世界でよく使われているWebアプリケーションの多くはフロントエンドとサーバーサイドのプログラムが連携して動いています。Webアプリケーション作成のために、サーバーサイドのプログラミング言語について学びましょう。",
    "thumbnail": "../images/skills/server-side-programming/thumbnail.png",
    "overview": "サーバーサイドのプログラミング言語とは、クライアント（ブラウザ）からの要求によりサーバーで動作するプログラムを実装するための言語の総称です。Ruby、Python、Java、PHPなどのスタンダードなものから、RustやGo言語などの比較的新しいものまでサーバーサイドの言語には色んな種類があります。<br><br>サーバーサイドの言語は、大きくJavaやGoなどのコンパイラを用いるコンパイラ言語とRubyやPythonなどのインタプリタを用いるスクリプト言語に分けることができます。<br>コンパイラ言語は処理速度の速さやコンパイラのチェックによってバグを防げる利点があり、スクリプト言語はコンパイラを用いる開発よりも手軽に実行して結果が見えるので開発するスピードが速くなるなどの利点があります。<br><br>どのサーバーサイドの言語を使用しても、Webアプリケーションの開発においてクライアントからの要求に応じて処理を行い、処理結果を返す流れには違いはありません。基本的に制約はありませんが、得意とする処理やフレームワークには特徴があるので、自分が作成したいアプリケーションの種類と自分のスキルに応じて選択すると良いでしょう。",
    "image": "../images/skills/server-side-programming/illustration.svg",
    "purpose": "動画サービスやECサイトなどの世界で良く使われているWebアプリケーションは、いずれかのサーバーサイドのプログラミング言語を用いて作られています。<br><br>HTML、CSS、JavaScriptを使ってウェブページを作るだけでは、いつ誰がアクセスしても表示が変わらない静的なWebページを作ることしかできませんでした。サーバーサイドのプログラミング言語を学ぶことで、ユーザーのリクエストに応じた動的なWebページを作れるようになります。<br><br>本格的なWebアプリケーションの作成のために、サーバーサイド言語を学びましょう。",
    "standard": {
      "basic": [
        "サーバーサイドのプログラミング言語が動作する環境を構築しコンソール出力などを実行できる",
        "データ型について説明できる",
        "演算子や条件分岐、ループ文を実装できる",
        "引数や戻り値を利用して関数を実装できる",
        "外部ライブラリを利用できる"
      ],
      "practical": [
        "コンパイラ言語とスクリプト言語の違いを説明できる",
        "エラー処理が実装できる"
      ]
    },
    "overall": "サーバーサイドのプログラミング言語は種類が多いですが、基本的にどの言語を選択してもWebアプリケーション開発をすることができます。<br><br>まずは気になった言語を１つ選んで学習の目安の達成を目指しましょう。<br><br>いくつか言語を学んでみると、それぞれのメリットとデメリットを体感できます。また、変数や演算子、関数などの基本的な考え方など、全言語に共通する部分も見えてくるでしょう。<br><br>「サーバーサイドのプログラミング言語で何ができるのか」を確認し、作りたい機能を目標に設定することで継続して学んでゆくモチベーションとなるしょう。",
    "sceneId": "web-application-development"
  },
  {
    "id": "object-oriented-programming",
    "title": "オブジェクト指向",
    "subTitle": "コードを整理し、機能の追加や変更をしやすくしよう",
    "description": "オブジェクト指向は、Webアプリケーションを作成する為の基礎となる考え方やプログラミング技術です。オブジェクト指向でアプリケーションを作成することにより、見通しがよく、メンテナンス性に優れたプログラミング技術を身に付けましょう。",
    "thumbnail": "../images/skills/object-oriented-programming/thumbnail.png",
    "overview": "オブジェクト指向とは、オブジェクトと言う”モノ”単位でシステムを作成する考え方です。オブジェクト指向により、見通しの良くメンテナンス性に優れたシステムを作ることができます。<br><br>オブジェクトの働きは、そのひな形としての「クラス」に属性や振る舞いを記述します。<br><br>オブジェクト指向で作らえたシステムは、クラスの定義に従い複数のオブジェクトが必要なときに生成され、他のオブジェクトと相互に協調し合いながら効率的に動作するのが特徴です。<br><br>「乗り物」クラスを例に、「具体的な乗り物」オブジェクトを作る流れを図で確認してみましょう。乗り物クラスには共通する属性や振る舞いを定義します。これにより似た振る舞いをもつさまざまな乗り物を1つのクラスから作ることができます。<br><br>このように複数のオブジェクトは一つのクラスから生成することができます。オブジェクト指向の考え方に沿って開発することで、役割に応じた部分を集めてプログラム全体を構成することで、それぞれの部分の独立性が保たれ機能追加や修正などが容易になります。",
    "image": "../images/skills/object-oriented-programming/illustration.svg",
    "purpose": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。あなたがWebアプリケーションを開発したいと考えているなら、HTML&CSSの知識は必要不可欠です。<br/><br/>HTMLのタグに慣れてきたら、CSSについて学んでみましょう。CSSのプロパティを使いこなすことができれば、様々な画面サイズでの表示に対応した、思い通りの見た目のWebページを作ることができるようになります。<br/><br/>HTML&CSSを一通り使えるようになったら、ポートフォリオサイトなどを作ってあなたが発信したいことや共有したい情報を載せたり、あなたの作った作品を世界に発信してみましょう。<br/><br/>HTML&CSSを学べば、これまであなたの頭の中にあった考えや、誰にも見せたことのなかった作品を、誰もが見える形で表現する手段を手に入れることができるのです。",
    "standard": {
      "basic": [
        "オブジェクト指向の考え方について説明できる",
        "なぜ拡張性や再利用性が必要か説明できる",
        "「カプセル化」の意味とメリットについて説明できる",
        "単純なクラスを作ってオブジェクト生成できる",
        "「継承、集約」について説明できる"
      ],
      "practical": [
        "「ポリモーフィズム」について説明できる",
        "オブジェクト指向が誕生した経緯や歴史について説明できる"
      ]
    },
    "overall": "オブジェクト指向の概念は分かりづらく、プログラミングとの関係について最初はイメージし難いかもしれません。<br><br>初めて学ぶときはできるだけ専門用語が少く、図解や具体例を使って解説している参考書やWebサイトで学んでみると良いでしょう。まずはクラスとカプセル化について理解すれば十分です。<br><br>ほとんどのプログラミング言語はオブジェクト指向でプログラムを書くことができるので、使用している言語でオブジェクト指向の練習をしてみましょう。<br><br>はじめはどの単位でクラスを定義すれば良いか、クラスの中にどんな変数や関数を定義すれば良いかわからないかもしれませんが、クラスの設計に関する参考書などを読みながら学んでいきましょう。",
    "sceneId": "web-application-development"
  },
  {
    "id": "terminal-operations",
    "title": "ターミナル操作",
    "subTitle": "コンピュータの操作を効率的にできるようになろう",
    "description": "アプリケーション開発では、パッケージのインストールやファイル操作など、ターミナルを使ってコマンドを実行する場面がたくさんあります。開発や環境構築に必要なターミナル操作を学びましょう。",
    "thumbnail": "../images/skills/terminal-operations/thumbnail.png",
    "overview": "ウィンドウ上のアイコンをクリックするなど、ユーザーがコンピュータの操作を視覚的に行う方法のことを\"GUI（グラフィカル・ユーザー・インターフェース）\"といいます。それに対して、ユーザーがテキストをベースとしたコマンド操作によりコンピューターを操作することを\"CUI（キャラクター・ユーザー・インターフェース）\"といいます。<br><br>ターミナルとは、入力されたコマンドを通してコンピューターとやりとりをするCUIツールです。<br><br>ターミナルで使用するコマンドは、シェルという種類のプログラムで解釈・実行されます。<br><br>ターミナルでの操作は、OSによってシェルが違うため使えるコマンドに違いがあります。開発でよく使われるのはLinux系のコマンドです。Macでは標準で、またWindowsでも設定を変更する事で使えるようになります。",
    "image": "../images/skills/terminal-operations/illustration.svg",
    "purpose": "ターミナルを利用することで効率的にコンピューターを操作することができます。<br><br>Webアプリケーション開発では、ライブラリのインストールやデータベースの操作などを行うことがありますが、これらの作業は多くがターミナル上でのCUI操作が基本です。<br><br>マウスなどを用いたGUI操作だけでもほとんどの操作を行うことができますが、CUIではショートカットキーや入力補完を使えるため操作をより効率的に行うことができます。<br><br>また、アプリケーションを公開するためのサーバーにはLinux系のOSが幅広く利用されており、OSやアプリケーションで行う環境設定や、確認作業などのほぼ全ての操作をターミナルで行うことになるため、Linuxコマンドについても学習が必要です。<br><br>ターミナル操作について学んで、効率よく作業できるようになりましょう。",
    "standard": {
      "basic": [
        "GUIとCUIの違いについて説明できる",
        "ターミナル、シェル、コマンドについて説明できる",
        "相対パスや絶対パスについて説明できる",
        "cat,cd,ls,pwd,touch,mkdir,rm,mv,cpなどの基本的なコマンドを使える",
        "コマンドのオプションを調べて使える"
      ],
      "practical": [
        "curl コマンドを用いてHTTPリクエストを送れる",
        "ユーザー切り替え、プロセス管理やファイル属性の変更などのコマンドを使える",
        "リダイレクトやパイプなどを用いて複数のコマンドを同時に使える",
        "grepコマンドなどで正規表現を使える",
        "シェルスクリプトを作成できる"
      ]
    },
    "overall": "まずは、コマンドとそのコマンドで付けられるオプションについて調べながら、はじめはファイル操作やパスの確認などを試してみるとよいでしょう。<br><br>コンピューター上で動作しているプログラムの確認を行ったり、ファイルのアクセス権や所有権などのファイル属性の操作を行うコマンドについても調べて実践してみましょう。<br><br>基本的なコマンド操作に関してはどのOSでも学ぶことができますが、可能であれば実際のLinux環境を準備してターミナルでの操作をおすすめします。",
    "sceneId": "web-application-development"
  },
  {
    "id": "databases",
    "title": "データベース",
    "subTitle": "データベースを扱ったWebアプリケーションの機能を作ろう",
    "description": "データベースを使えばユーザーや商品情報など、様々な蓄積データを扱ったWebアプリケーションを作ることができます。本格的なサービスを作るために、データベースについて学んでみてください。",
    "thumbnail": "../images/skills/databases/thumbnail.png",
    "overview": "HTML&CSSはWebページを作るために使われる言語です。<br/><br/>インターネット上に公開されているホームページや物販ページ（ECサイト）は、Webサーバー上にHTML&CSSで作成したファイルを置くことで、全世界の皆に公開することが出来ます。<br/><br/>HTMLは文字や画像など表示する対象とその構造を指定する役割があり、表示対象の特性に応じて様々な<span data-type='term'>タグ</span>を使用してWebページに表示する構造を記述します。CSSは色やレイアウトなど見た目を装飾する役割を担っており、HTMLで記述した\"タグ\"要素に対して\"プロパティ\"で見た目を指定します。",
    "image": "../images/skills/databases/illustration.svg",
    "purpose": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。あなたがWebアプリケーションを開発したいと考えているなら、HTML&CSSの知識は必要不可欠です。<br/><br/>HTMLのタグに慣れてきたら、CSSについて学んでみましょう。CSSのプロパティを使いこなすことができれば、様々な画面サイズでの表示に対応した、思い通りの見た目のWebページを作ることができるようになります。<br/><br/>HTML&CSSを一通り使えるようになったら、ポートフォリオサイトなどを作ってあなたが発信したいことや共有したい情報を載せたり、あなたの作った作品を世界に発信してみましょう。<br/><br/>HTML&CSSを学べば、これまであなたの頭の中にあった考えや、誰にも見せたことのなかった作品を、誰もが見える形で表現する手段を手に入れることができるのです。",
    "standard": {
      "basic": [
        "データベースの役割が説明できる",
        "データベースとDBMSについて説明できる",
        "データベースの構造や仕組みについて説明できる",
        "自分のPCにデータベースを構築できる",
        "Webアプリケーションからデータベースに接続できる",
        "SQLでテーブル作成、データの追加、取得、更新、削除などの基本操作ができる",
        "インデックスを作成してテーブルの検索効率を上げることができる"
      ],
      "practical": [
        "集計関数やサブクエリについて説明できる",
        "テーブル設計の正規化について説明できる",
        "O/Rマッパーについて説明できる",
        "トランザクションについて説明できる",
        "SQLのチューニングの方法を説明できる"
      ]
    },
    "overall": "データベースについて最初に学ぶなら、現在でも広く使われているリレーショナル型データベースがおすすめです。<br><br>リレーショナル型データベースの操作にはSQLの知識が必要です、テーブルの作成やデータの表示、更新などの基本操作からまずは学んでみましょう。SQLについて理解したら、Webアプリケーションとデータベースを連携させてデータの取得や更新ができるか試してみてください。<br><br>MySQLやPostgreSQLなどのデータベースは誰でも無料でインストールできます。<br><br>データベースのインストールから構築の手順はProgateでも公開しているので、ぜひ参考にしてください。",
    "sceneId": "web-application-development"
  },
  {
    "id": "web-application-frameworks",
    "title": "Webアプリケーションフレームワーク",
    "subTitle": "フレームワークを使用して効率よく開発しよう",
    "description": "実際のWebアプリケーション開発ではフレームワークを使うのが一般的です。フレームワークの仕組みを理解して、Webアプリケーションを形にしてみましょう！",
    "thumbnail": "../images/skills/web-application-frameworks/thumbnail.png",
    "overview": "フレームワークとは、効率的にアプリケーション開発を行うための枠組みです。Webアプリケーションフレームワークはサーバーサイド言語ごとにいくつかの種類があり、例えばRubyのフレームワークなら「Ruby on Rails」「Sinatra」などがあります。<br><br>現在のWebアプリケーションフレームワークの多くは「MVCモデル」に従って作られています。<br><br>MVCモデルとは、アプリケーションを「Model」「View」「Controller」といわれる各機能ごとに分類して作成するプログラミングモデルです。Modelにはアプリケーションで扱うデータや「ビジネスロジック」と呼ばれる処理を、Viewにはフロントエンドの表示の為の処理を、Controllerにはユーザーからの命令などを分析してModelやViewの処理を橋渡しをする処理をそれぞれ記載します。MVCモデルのWebアプリケーションフレームワークは、MVCモデルの概念に従ってアプリケーションの全体の処理の流れを制御し、開発者にテンプレートや機能を提供します。<br><br>開発者はフレームワークのルールや用意されたテンプレートを使用することで、アプリケーション開発をスムーズに進めることができます。",
    "image": "../images/skills/web-application-frameworks/illustration.svg",
    "purpose": "フレームワークを取り入れることで手軽にWebアプリケーションを形にすることができるようになります。<br><br>世の中のWebアプリケーションの多くはフレームワークを使って作られています。本格的なWeb開発をする場合、フレームワークの知識は必須でしょう。<br><br>フレームワークを使えばテンプレートに沿ってコーディングを行うことができます。またフォルダ構成などについてもフレームワークが用意したものが使えるため、迷うことなく正しく分割してプログラムが書けるようになります。<br><br>フレームワークを利用して開発を進めて、Webアプリケーションの基本的な動作や仕組みについて学びましょう。",
    "standard": {
      "basic": [
        "Webアプリケーションフレームワークを使うことのメリットを説明できる",
        "データモデル、ビジネスロジック、ユーザーインターフェイスはそれぞれ、MVCフレームワークのどこに書かれるか説明できる",
        "フレームワークを使ったリクエスト処理について説明できる",
        "フレームワークを使ったセッション管理について説明できる",
        "フレームワーク上でデータベースを使ったアプリケーションを作れる",
        "軽量フレームワークを使って簡単なWebアプリケーションを作成できる"
      ],
      "practical": [
        "フルスタックのフレームワークを使ってWebアプリケーションを作成できる",
        "軽量フレームワークの全体の仕組みを説明することができる"
      ]
    },
    "overall": "Webアプリケーションフレームワークは、大きく分類して高機能なフレームワークと軽量なフレームワークがあります。<br><br>高機能なフレームワークはフルスタックとも呼ばれ、Ruby on RailsやLaravel、Djangoなどがあります。機能が充実していて本格的な大規模サイトの構築に使えますが、その分学習コストが高めです。また、軽量なフレームワークはシンプルな基本機能のみを提供しており、Sinatra、Flask、Slimなどがあります。機能が少ない分学習コストが少なく小規模なサイトの構築を素早く行うことができます。<br><br>どちらもメリットはありますが、学習においては軽量なフレームワークから使ってみるといいかもしれません。<br><br>ほとんどのフレームワークにはドキュメントやチュートリアルが用意されています。利用するフレームワークを決めたら、チュートリアルに従ってWebアプリケーション開発をしてみましょう。",
    "sceneId": "web-application-development"
  },
  {
    "id": "web-api",
    "title": "Web API",
    "subTitle": "公開されたAPIの機能を取り入れ、作れる幅を広げよう",
    "description": "Web APIの仕組みを使えば、公開されている機能やデータをアプリケーションで利用することができます。Web APIを積極的に活用してさまざまな機能を取り入れてみましょう。",
    "thumbnail": "../images/skills/web-api/thumbnail.png",
    "overview": "APIとはApplication Programming Interfaceの略で、アプリケーションの個々の機能を分離して使用するための取り決めのことです。<br><br>Web APIは、HTTPプロトコルを利用してインターネット経由で呼び出せるAPIです。公開されたWeb APIを通して、機能やデータを他のシステムから利用することができます。<br><br>利用する際は、その機能とリクエストやレスポンスの形式が分かれば、API内部の詳しい処理形式を知る必要がありません。<br><br>HTTPプロトコルを利用するため、Web APIへのアクセスにはエンドポイントと呼ばれるURLによって指定されることになります。<br><br>機能やリクエスト・レスポンスの形式はWeb API提供者が用意しているドキュメントを参考にします。データのレスポンス形式はHTMLではなくプログラムが操作しやすいJSON形式などで返ってくるのが一般的です。<br><br>近年多くのWeb APIが公開されており、それらを使ったWebアプリケーションがたくさん作られています。",
    "image": "../images/skills/web-api/illustration.svg",
    "purpose": "既に公開されたWeb APIサービスがあれば、それを利用することでアプリケーションのオリジナル機能開発に注力できます。<br><br>これまでは、ログイン機能やメール送信機能などアプリケーションのさまざまな機能を独自に用意する必要がありましたが、Web APIを利用することでこれらの機能を簡単に自分のWebアプリケーションに取り入れることができるようになりました。<br><br>他にも現在では、Web APIを利用してモダンなユーザーインタフェースなどを実現しているWebサイトが多くあります。たとえば、地図表示部分では非同期にWeb APIを呼び出すAjaxと言われる方式を使うことで、スムーズな操作を可能にしています。<br><br>公開されているAPIを積極的に活用してさまざまなWebアプリケーションを効率的に開発しましょう。",
    "standard": {
      "basic": [
        "Web APIの仕組みとメリットを説明できる",
        "JSONを扱うことができる",
        "Ajaxについて説明できる",
        "公開されているWeb APIを利用して機能開発ができる"
      ],
      "practical": [
        "自分でWeb APIを開発できる",
        "CORSについて説明できる",
        "Web APIを幅広く使ってもらうために公開できる"
      ]
    },
    "overall": "Web APIはHTTPプロトコルを前提に作られているので、インターネットの知識を押さえておくと学習がスムーズになります。<br><br>使ってみたいWeb APIがあれば、まずはWeb API提供者が用意しているドキュメントを確認してみると良いかもしれません。<br><br>仕様について理解したら、Web APIを呼び出す為のシンプルなプログラムを作ってみましょう。<br><br>有名なWebサービスでは、自社の機能やデータをWeb APIで公開している場合があります。気になるサービスを調べて、Web APIを呼び出すプログラムを作ってみましょう。",
    "sceneId": "web-application-development"
  },
  {
    "id": "development-flow",
    "title": "開発フロー",
    "subTitle": "実際の開発現場をイメージできるようになろう",
    "description": "チーム開発では、開発手順を共有して協力して作業を進める必要があります。複数名による本格的なアプリケーションを開発できるように、チーム開発の基礎となる開発フローについて学びましょう。",
    "thumbnail": "../images/skills/development-flow/thumbnail.png",
    "overview": "開発フローとはWebアプリケーション開発の作業をどのような流れで進めるかというものです。開発フローの主なものには設計、実装、テストの大きな作業フェーズがあります。<br><br>設計フェーズではこれから作るWebアプリケーションを実現するための方法をまとめ、開発フェーズで実際にアプリケーションを作成し、完成したアプリケーションの動きをテストフェーズで確認します。<br><br>開発フローにはさまざまな手法や考え方があり、代表的な手法としては、ウォータフォール型開発とアジャイル型開発があります。どちらも設計・実装・テストを行う点では同じですが、ウォーターフォール型はアプリケーション単位で設計からテストを順番に進め、アジャイル型は機能単位で設計からテストを繰り返しながら進めるのが特徴です。<br><br>チーム開発では作業者が複数人いるため、開発フローの中で発生するタスクやスケジュールを管理して役割を分担する必要があります。また、作業者ごとに品質に違いがでないように、レビューフローやコーディング規約などを決め、プロジェクトの効率化と品質の向上に取り組みます。",
    "image": "../images/skills/development-flow/illustration.svg",
    "purpose": "開発フローについて学ぶことで、チーム開発を効率的に進められるようになります。<br><br>もし開発フローを知らずにチームで開発を進めれば、作業の段取りなどが合わずに協力して作業することが難しくなるでしょう。また、各メンバーのタスクやその中で発生した問題などが共有できなければフォローすることも難しくなります。<br><br>開発に着手する前に開発フローとスケジュールについてメンバー間で共有することで、メンバー全員で認識を合わせながら作業を進められるようになります。<br><br>開発フローやチーム開発における管理の方法とルール決めについて学んで、チーム開発にチャレンジするための準備をしましょう。",
    "standard": {
      "basic": [
        "設計・実装・テストの各フローの役割について説明できる",
        "コーディング規約を決めることができる",
        "コードレビューの必要性について説明できる",
        "代表的な開発手法について説明できる",
        "タスク管理や進捗管理ができる"
      ],
      "practical": [
        "チームでの開発フローを決めることができる",
        "簡単な開発スケジュールを作成できる"
      ]
    },
    "overall": "開発フローは個人開発からでも学ぶことができます。チーム開発をイメージしながら開発フローを決めて、それに沿ってWebアプリケーション開発にチャレンジしてみましょう。様々な開発手法がありますが、細かい進め方を覚えるのではなく、手法の目的やなぜ開発フローが必要なのかを意識しながら書籍やインターネットで学んでみましょう。<br><br>また、タスク管理や課題管理、スケジュール管理ツールについても無料で使えるものがたくさんあるので、調べて実際に使ってみるといいでしょう。アプリケーションの機能ごとに完了期限を決めて取り組んだり、コーディングルールを決めて開発を行い、チーム開発で必要なスキルに触れてみましょう。",
    "sceneId": "team-development"
  },
  {
    "id": "design-specification",
    "title": "仕様と設計",
    "subTitle": "どんなものをどうやって作るのかを考えよう",
    "description": "どんなアプリケーションをどのように作るかが明確になっていないと、チームで開発を進めるときに迷ってしまいます。アプリケーション開発を始めるまえに、仕様と設計を決めて開発の目標と具体的な実現方法を定めて開発を進めましょう。",
    "thumbnail": "../images/skills/design-specification/thumbnail.png",
    "overview": "アプリケーション開発の現場では、開発を始める前に仕様と設計を決めます。<br><br>仕様とはアプリケーションで解決したい課題や実現したいことを洗い出してまとめたものです。設計とは仕様を実現するための具体的な方法として、「画面レイアウト」「機能一覧」「データベースの構成」などをまとめたものです。<br><br>例えば、あるサークル内での写真を共有するWebアプリケーションの開発について、仕様と設計を考えてみましょう。<br><br>その場合の第一に考えられる仕様は、「サークル会員が写真を投稿・閲覧できること」です。また、設計は「投稿画面や一覧画面のレイアウト」「写真投稿や一覧取得機能」「写真テーブルの構成」などです。<br><br>アプリケーションの作成作業に入る前に、仕様と設計を決めることで手戻りを少なく進めることができます。開発の途中で一度決めた仕様や設計を変更すると、作業を巻き戻らなければならず時間も作業も余計にかかるため、仕様と設計の作業は重要です。",
    "image": "../images/skills/design-specification/illustration.svg",
    "purpose": "仕様を決めて設計をした上でアプリケーション開発に着手することで、開発作業の初期段階からどんなアプリケーションをユーザーに届けたいか明確にイメージできるでしょう。チームで開発している場合は特にメンバー間で作るものの完成形を共有することで、迷わずに作業を進めることができます。<br>仕様が定まっていない状態で開発を進めると、思い描いたユーザー意向や目的に合わないアプリケーションであったり、仕様を決めたが設計せずに開発を進めると手戻りが大変多くなる恐れがあります。特にチームで開発する場合、メンバー全員がしっかり認識を合わせないと担当者の異なる機能や画面の繋がりが悪かったり、そもそも目的のアプリケーションが完成しないことにもなり兼ねません。<br><br>チームで作るものを明確にしスムーズに開発するために、仕様として決めるべきことや、何を設計すれば良いのかについて学んでみましょう。",
    "standard": {
      "basic": [
        "仕様と設計の目的を説明できる",
        "機能要件と非機能要件について説明できる",
        "画面遷移やワイヤーフレームの設計ができる",
        "クラス図、シーケンス図、アクティビティ図について説明できる",
        "データベース設計のER図を作成できる",
        "仕様書や設計書を読んで開発ができる"
      ],
      "practical": [
        "SOLIDの原則について説明できる",
        "プロトタイピングについて説明できる",
        "デザインスプリントについて説明できる"
      ]
    },
    "overall": "作りたいアプリケーションがある場合は、必要な機能を洗い出して仕様を考えてみましょう。<br><br>最初は画面がいくつ必要か書き出してみるだけでも作りたいもののイメージが明確になります。アプリケーションを利用するユーザーをイメージして、画面構成を考えてみましょう。<br><br>設計はアプリケーションを開発するための方法を具体的に決めていく作業です。どんな言語やフレームワークを使って開発するのか、クラスやデータベースのテーブル構成などについて考えてみると良いでしょう。<br><br>開発現場で使われている仕様や設計手法は書籍でまとまっているものも多くあるので、気になったら調べてみましょう。",
    "sceneId": "team-development"
  },
  {
    "id": "git",
    "title": "Git",
    "subTitle": "バージョン管理システムを使ってチームでコードを共有しよう",
    "description": "仕様と設計で作りたいものを明確にしたら実際にチームで開発を始めます。チーム開発で必要なコードを共有する為のツールGitについて学んでみましょう。",
    "thumbnail": "../images/skills/git/thumbnail.png",
    "overview": "Gitはプログラムコードなどの変更履歴を管理するバージョン管理システムです。バージョン管理システムには他にもSubversionなどがありますが、ここでは現在もっとも一般的なGitについて説明します。<br><br>Gitでコード管理をすることで、問題が発生した時にコードを誰が最後に修正したかや、問題点が発生したのはどのタイミングかを確認することができるようになります。その結果、過去の変更履歴を元にファイルやプロジェクトを問題が発生する前の状態に戻したり正しく修正できます。<br><br>Gitにおけるコード管理はリモートリポジトリと呼ばれるクラウド上のコードと、自分のPC上のローカルリポジトリの間で行われます。開発者はリモートリポジトリをメンバーで共有して、個々の開発者はローカルリポジトリで変更作業を行います。<br><br>Gitは、複数名の開発者が同時にコードの作成や修正を行える「ブランチ」という機能を有しています。開発者は自分のローカルリポジトリに「ブランチ」機能を使い、作業単位にコード編集を行う為の環境を作成する事ができます。また個々の開発者の編集したコードは、それぞれ「マージ」機能によりリモートリポジトリ上のマスターとなるコードに集約することができます。<br><br>尚、その時「コンフリクト」と呼ばれる編集したコードの行が重なる問題が発生する場合がありますが、Gitの機能を使って「コンフリクト」に正しく対応することが可能になっています。",
    "image": "../images/skills/git/illustration.svg",
    "purpose": "開発現場ではコードのバージョン管理をするためにGitは必須のスキルです。<br><br>複数の人間がプログラムファイルを同時に編集すると、最新のファイルがどれか分からなくなるかもしれません。しかしGitを使うことで同時編集を可能にします。<br><br>またGitを使えば、新しいメンバーが開発チームに加わったとき、変更履歴から過去のコードの経緯を確認できるためスムーズに作業をはじめられます。また、メンバー同士で互いの作業状況を把握できるため他のメンバーのフォローが容易になります。<br><br>GitHubなどのバージョン管理サービスを利用すればコードのレビューなども簡単に行うことができるようになります。<br><br>チーム開発をスムーズに進めるために必須のスキルであるGitについて学んでみましょう。",
    "standard": {
      "basic": [
        "Gitリポジトリを作成することができる",
        "プル、コミット、プッシュなどの基本的なGit操作ができる",
        "リモートリポジトリとローカルリポジトリについて説明できる",
        "リモートリポジトリに、個人アクセストークンを使って安全に接続できる",
        "特定のファイルのコミット履歴を調べることができる"
      ],
      "practical": [
        "コンフリクトを解決できる",
        "誤った操作や変更を、元に戻すことができる",
        "GitHub上で、プルリクエストの作成やレビューができる"
      ]
    },
    "overall": "Gitは実際に使ってみるとイメージを掴めるので、まずはGitの環境構築することをおすすめします。環境構築手順は<a href='https://prog-8.com/docs/git-env' target='_blank' rel='noopener noreferrer'>Progateでも公開</a>していますので、確認しながら進めてみましょう。<br><br>環境構築ができたらリモートリポジトリからコードをプルしたり、ローカルリポジトリで編集しコードをリモートリポジトリにプッシュしてみましょう。<br><br>リモートリポジトリとローカルリポジトリについてイメージがつかめるようになったら、ブランチの作成やプルリクエストなどにチャレンジしてみましょう。<br><br>GitHubには多くの有名プロジェクトもあります。公開されているリポジトリをみてコーディングの参考にしてみましょう。",
    "sceneId": "team-development"
  },
  {
    "id": "testing",
    "title": "テスト",
    "subTitle": "不具合の少ない高品質なコードにしよう",
    "description": "アプリケーションの安定稼働には、不具合の少ない高品質なプログラムコードが不可欠です。コードを作成したら、つどその部分のテストを実施して行きましょう。また、コードを修正した場合にも必ずテストを実施する習慣を身に付けて、チームで品質の高いアプリケーションを開発できるようになりましょう。",
    "thumbnail": "../images/skills/testing/thumbnail.png",
    "overview": "テストとは「期待する動き」と「実際の動き」を比較してアプリケーションが想定どおり動くことを確認するプロセスです。個々のテストは、テストケースを作成して動作結果を判定します。<br><br>テストは開発フェーズに依ってテストの範囲や目的が異なります。通常は大きく分けて3つの段階（単体テスト、結合テスト、システムテスト）で行います。単体テストはメソッド単位、結合テストは機能単位、システムテストはユーザの利用を想定したアプリケーション全体で動作を確認します。<br><br>特に単体テストはアプリケーションを最小単位でテストするため、全体のテストの土台になります。単体テストのタイミングでバグを発見して修正することがアプリケーションの品質に大きな影響を与えます。また、テストは一度行うだけでなく、コードの変更に合わせて継続して繰り返し行うことが重要です。<br><br>テストの実施は、具体的なテスト内容を示す「テストケース」を定めてそれに沿って行います。テストの実施方法には、手動で行う「手動テスト」と自動化ツールなどにテストケースを設定し行う「自動テスト」の２つの方法があります。<br><br>近年アプリケーションの規模が大きく変更も頻繁に発生するので、各フェーズのテストには自動化ツールやフレームワークが活用されています。",
    "image": "../images/skills/testing/illustration.svg",
    "purpose": "それぞれの開発者が、単体テストのレベルからテストを実施していくことで安心して自分たちのアプリケーション開発を進めることができます。<br><br>チーム開発では作業者によってコードの品質が異なったり、それぞれのコードが影響してバグが生まれることがあります。また、開発を続ける中でコードの変更によって以前まで動いていたコードに不具合が発生する場合もあります。<br><br>テストを実施せずに開発を進めれば不具合を見落としてしまう可能性があり、不具合の原因を見つけることも困難です。このような状況では既存のコードに変更を加えることも難しく、開発のスピードが落ちてしまいます。<br><br>テストを継続的に実施して、アプリケーションが正しく動作していることを常に確認できるようになりましょう。<br><br>また適切なテストケースの作成方法について学ぶことで、開発作業の段階でどのような点に注意すれば不具合を少なくできるか明確にすることができます。<br><br>アプリケーションの開発現場では機能追加や変更のたびにテストを行います。自動テストについて是非学んでおきましょう。",
    "standard": {
      "basic": [
        "単体テスト、結合テスト、システムテストの違いを説明できる",
        "非機能要件のテストについて説明できる",
        "網羅性や境界値などを考慮したテストケースを作成できる",
        "モックデータを用いたテストができる",
        "エラー処理のテストができる"
      ],
      "practical": [
        "テスト計画を作成できる",
        "テスト結果から品質分析ができる",
        "テスト駆動開発について説明できる"
      ]
    },
    "overall": "開発中にプログラムコードを書いたら、そのプログラムの動作確認をするためにテストを実施する習慣を身に付けましょう。<br><br>テスト方法は書籍などを参考に、テストケースを洗い出すところから始めてみるのがおすすめです。<br><br>また、実際にテストを始めるために、プログラミング言語やアプリケーションフレームワーク毎に用意されているテストツールについて調べてみましょう。",
    "sceneId": "team-development"
  },
  {
    "id": "refactoring",
    "title": "リファクタリング",
    "subTitle": "開発を進めやすいコードに改良しよう",
    "description": "継続的に機能追加を行うためには、開発を進めていく中で複雑になった設計やコードを随時改善していく必要があります。リファクタリングをして、コードを読みやすく、修正しやすく、バグも発見しやすい状態を維持しましょう。",
    "thumbnail": "../images/skills/refactoring/thumbnail.png",
    "overview": "リファクタリングとは、プログラムの機能を保ちながら、理解や修正がし易いプログラムコードに改良することです。<br><br>リファクタリングは、重複したコードを整理したり変数や関数の命名を分かりやすくする事でプログラミングの作りを改善します。<br><br>リファクタリングを実施する場合は、本来の機能を壊してしまわない様に、自動テストなどを準備して都度確認しながら特定の範囲から徐々に広げて実施して行くと良いでしょう。<br><br>リファクタリングを行うタイミングは、専用に作業期間を設ける場合もありますが、通常の開発フロー中の機能追加やバグ修正の最中で行う場合など様々です。いつ行うにしても、現状を把握するための調査や分析を行い、どこまでリファクタリングを行うか目標を定める必要があるでしょう。<br><br>リファクタリングの目的や方法と実施範囲を確認し、チーム内で相談しながら進めましょう。",
    "image": "../images/skills/refactoring/illustration.svg",
    "purpose": "見通しの良いプログラムを書く技術は、特にチーム開発においては重要なスキルです。<br><br>初期のプロダクトの開発や仕様変更の激しい開発現場では、とりあえず動くものを作る事が優先されプログラムの読み易さなどは後回しにされることがあります。<br><br>リファクタリングを行わずにこれを繰り返すと、コードの品質が徐々に下がってきます。この様なコードには機能の重複などが放置されているため理解が難しく、既存のコードに影響を与えずに機能を追加する事が難しくなります。<br><br>リファクタリングを定期的に行う事で、プログラムを読みやすく、修正しやすく、バグを発見しやすくなるため、開発コストの削減や長期的な開発速度の向上につながります。<br><br>改善したいコードがあっても、リリースされているコードに手を付けるのが怖く、リファクタリングできない開発現場がよくあります。リファクタリング手法についてきちんと学び、恐れずにプログラムの改善に取り組めるようになりましょう。",
    "standard": {
      "basic": [
        "リファクタリングの目的を説明できる",
        "リファクタリングの一環としてチームでコーディング規約を決められる",
        "ネストしたコードを改善できる",
        "変数名をわかりやすい名前に変更できる",
        "冗長なコードをインライン化することができる",
        "重複したコードを共通化できる"
      ],
      "practical": ["プログラムの設計レベルでのリファクタリングを実践できる。"]
    },
    "overall": "正しくリファクタリングを行うために、リファクタリングの効果や手法などを書籍で学んでから取り掛かるのが良いでしょう。<br><br>「コードの量を減らせば良い」「共通化すれば良い」などの表面的なリファクタリングだけでは長期的にメンテナンスのしやすいコードとはならない可能性もあります。<br><br>はじめにコーディング規約に従って、分かりづらい変数名や関数名の修正を行い、次に不要なネストや複雑なコードの解消に取り組みましょう。また実際のシステムには基本的な作りが煩雑で、プログラム設計についても改善が求められる場合があります。さまざまなレベルで求めれるリファクタリングに対応できるように学んでいきましょう。",
    "sceneId": "team-development"
  },
  {
    "id": "server-configuration",
    "title": "サーバー構成",
    "subTitle": "アプリケーションの公開に向けてサーバーの準備をしよう",
    "description": "ユーザーに使ってもらう本格的なプロダクトを公開するには、サーバーにアプリケーションを配置してアクセスできるようにするだけでなく、サーバーのスペックや台数などの構成を決める必要があります。プロダクトの公開に向けて、サーバーを準備できるようになりましょう。",
    "thumbnail": "../images/skills/server-configuration/thumbnail.png",
    "overview": "サーバーとはユーザーからの要求に対して、Webページを返したりさまざまな機能を提供するネットワークでつながったコンピューターのことです。<br><br>サーバーを用意するには役割に応じたサーバーソフトウェアをインストールします。<br>サーバーソフトウェアにはWebサーバーのApacheやNginx、アプリケーションサーバーのPumaやTomcat、データベースサーバーのMySQLやPostgreSQLなどがあります。<br><br>ひとつのサーバーに複数のサーバーソフトウェアを全て導入することもできますが、障害が発生しても影響範囲を限定できるなどの理由により1台のサーバーに専用のサーバーソフトウェアを導入する場合が基本です。<br><br>Webサーバー、アプリケーションサーバー、データベースサーバーでアプリケーションを提供する構成を「Web3層構成」と呼びます。<br><br>ユーザーがWebアプリケーションにアクセスしたとき、サーバーではどのような処理が行われているか見てみましょう。<br><br>例えば、トップページなどの静的ページを表示するには、Webサーバー上に用意された固定のHTMLファイルをユーザーへ返します。一方ログイン後のユーザーごとに表示内容が異なるページは、Webサーバーを経由してアプリケーションサーバーがデータベースサーバーからデータを取得して計算を行い、その結果をユーザーへ返します。<br><br>このように3つのサーバーが連携してWebアプリケーションが動きます。",
    "image": "../images/skills/server-configuration/illustration.svg",
    "purpose": "Webアプリケーションの公開のために必要となるサーバーの種類やスペック、調達方法を決められるようになりましょう。<br><br>WebアプリケーションはWeb3層構成の上で運用する形が一般的ですが、システムの規模や目的によっては運用管理サーバーやDNSサーバー、バックアップ専用サーバーなども組み合わせて構成する必要があります。どういった役割を持つサーバーが必要かは、全体の仕様に基づく機能設計後に決定します。<br><br>各サーバーのスペックや台数を決めるためには、想定されるユーザー数や必要となる処理能力をある程度試算する必要があります。基本的なスペックの基準となるメモリやCPU、ストレージについても押さえておきましょう。<br><br>それぞれのサーバーの種類とその役割を良く理解し、アプリケーションの公開に向けて必要なサーバー構成を実現できるようになりましょう。",
    "standard": {
      "basic": [
        "Web、アプリケーション、データベースの各サーバーの役割を説明できる",
        "サーバー構成で考えるべき観点は何かを説明できる",
        "サーバーのプロセスとメモリ状態について調べることができる"
      ],
      "practical": [
        "Web3層構成の各サーバーソフトウェアをインストール・設定することができる"
      ]
    },
    "overall": "インターネット上でサーバー構成の概要や図を公開しているサイトなどを参考に、構築するサービスを実現する為に必要なサーバー構成を検討してみましょう。<br><br>例えば、使用予定のサーバーソフトウェアをキーワードに「Nginx Puma MySQL」や「Apache Tomcat PostgreSQL」などで検索して具体的なサーバー構成について調べてみると良いでしょう。",
    "sceneId": "releasing-your-application"
  },
  {
    "id": "networking",
    "title": "ネットワーク",
    "subTitle": "サービス公開に必要な通信の仕組みを知ろう",
    "description": "役割に応じて複数のサーバーを用意したあとは、サーバー同士を連携させ実際にユーザーからアクセスできるように設定する必要があります。HTTPやDNSの知識だけでなくどういう仕組みでサーバーが通信しているのかを学んで、ユーザーの利用に耐えられる環境を用意しましょう！",
    "thumbnail": "../images/skills/networking/thumbnail.png",
    "overview": "ネットワークとは、コンピュータなどの機器が相互に接続しデータ通信が行える状態にあるものをいいます。インターネットもネットワークの一形態で、プロトコルと言われる多重構造の通信技術を基本としています。<br><br>インターネット上の通信は、TCP/IPプロトコルを基にやりとりされます。IPアドレスには、インターネット上で住所の役割を果たす「グローバルIPアドレス」と内部での通信用の「ローカルIPアドレス」があります。<br><br>インターネット上のWebアプリケーションは、少なくとも一つのグローバルIPアドレスを持っており、システム内部ではサーバーにそれぞれ「ローカルIPアドレス」が割り当てられ相互に通信を行います。<br><br>Webアプリケーションを構成するネットワークは、ユーザーからアクセスできるインターネットに開かれた部分と、内部に閉じた部分「LAN（ローカルエリアネットワーク ）」に分けて管理することが重要です。そうするすることで、不要な外部からのアクセス経路を遮断できセキュリティリスクを減らすことができるからです。<br><br>Webサーバーはインターネットへ繋げてユーザからのアクセスを可能にし、アプリケーションサーバーやデータベースサーバーはユーザーから直接アクセスできないサーバー同士の通信に限定するなど「ネットワークポート」の設定が必要となります。",
    "image": "../images/skills/networking/illustration.svg",
    "purpose": "Webアプリケーションをユーザーが使えるようにするために、データのやり取りを行うクライアントやサーバー間で通信が行えるようなネットワークの設定が必要です。<br><br>例えばグローバルIPアドレスとローカルIPアドレスの仕組みやNAT変換、プロトコルとポート番号の関係性、ルーティングの仕組みなどを理解することでサーバーなどの機器に対して適切なネットワークの設定を行うことができます。<br><br>プロトコルなどデータ通信の仕組みをはじめとするネットワークに関する知識があれば自信をもってネットワークの設定ができるでしょう。<br><br>本格的なサービスを公開するために、ネットワークについて学びましょう。",
    "standard": {
      "basic": [
        "OSI参照モデルとTCP/IP4層モデルについて説明できる",
        "LAN・WAN・インターネットについて説明できる",
        "数値を表す2進数と16進数について説明できる",
        "IPアドレスのクラスやサブネットマスクについて説明できる",
        "グローバル・プライベートIPアドレスの違いについて説明できる",
        "ネットワーク変換（NAT）について説明できる",
        "UTF-8などの文字コードについて説明できる",
        "HTTP、SSH、FTP、SMTP、POP3など主要なインターネットプロトコルについて説明できる",
        "hostname、ping、ipconfigなどのネットワーク系コマンドが使える",
        "Webアプリケーションの公開に必要なネットワーク図を作成できる"
      ],
      "practical": [
        "インターネット公開に必要なルーティング（通信経路制御）について説明できる",
        "ポートの開放とセキュリティリスクについて説明できる",
        "DMZの役割について説明できる",
        "ルーター、スイッチ、ロードバランサなどのネットワーク機器の役割を説明できる"
      ]
    },
    "overall": "ネットワーク全体の機能を階層的に表現したものに、TCP/IPの階層モデルがあります。TCP/IPの階層モデルついて学ぶことで、ネットワークの各階層の役割について把握することができます。まずは書籍で学んでみると良いでしょう。<br><br>またサーバーにログインして、ターミナル上のネットワークのコマンドでIPアドレスや通信状態を確認してみるとネットワークのイメージが掴めるかもしれません。<br><br>典型的なWebアプケーションにおけるネットワーク構成図を調べて、サーバーやネットワーク機器のIPアドレスの繋がりを確認して、Webアプリケーションを公開するのに必要なネットワーク構成を学びましょう。",
    "sceneId": "releasing-your-application"
  },
  {
    "id": "cloud-services",
    "title": "クラウドサービス",
    "subTitle": "クラウド環境にプロダクトを公開しよう",
    "description": "サーバーなどを含めたプロダクトの公開に必要な環境はクラウドサービスを利用することで、安価で簡単に用意することができます。クラウドサービスを利用してプロダクトを公開しましょう！",
    "thumbnail": "../images/skills/cloud-services/thumbnail.png",
    "overview": "クラウドサービスとはネットワークを経由してサーバーやソフトウェアなどを利用できるサービスの総称です。その中でも自分たちの開発したWebアプリケーションを公開する為のサービスとしては、Amazonが提供しているAWSやMicrosoftのAzure、GoogleのGCPなどがあります。<br><br>クラウドサービスを利用すればサーバーの購入や設置、ネットワークの接続などのインフラ構築にかかる作業が不要になるためWebアプリケーションの公開にかかる時間を短縮できます。<br>またサービスリリース後も、CPUやメモリが不足した際のリソース追加もすぐに行え、サーバーなどの機器が故障した際の修理や買い替えも不要となります。<br><br>クラウドサービスでのサーバーやネットワークの設定は、AWSなどのクラウドサービス事業者が提供している管理画面を使って行います。これらのクラウドサービスは公開に必要なサーバーだけでなく、ストレージやデータベースなどのさまざまなサービスを提供しています。<br><br>クラウドサービス上での管理画面での設定には、サーバーやネットワークの基本的な知識があるのが前提となります。",
    "image": "../images/skills/cloud-services/illustration.svg",
    "purpose": "クラウドサービスが普及する以前、本格的なサービスを提供するためにはサーバーやネットワーク機器を購入する必要がありましたが、初期費用以外にもメンテナンスなどの維持費用がかかる点が課題でした。<br><br>サービス提供側としてはこれらの諸費用を抑えつつ、ユーザー数の増加など状況に合わせて素早くサーバーリソースを拡張できるのが理想です。クラウドサービスを使えば自分でサーバーを用意する必要がなく最小構成のサーバーでサービスを始められるため費用を抑えられます。またユーザー数が増えてサーバーリソースの拡張が必要となった時にはすぐに対応できます。<br><br>近年では、クラウドサービスを使ってプロダクトを公開することが主流となっていす。<br><br>クラウドサービスを使って、ユーザーの利用に耐えられる環境で本格的なWebアプリケーションを公開しましょう。",
    "standard": {
      "basic": [
        "開発環境と本番環境の役割と必要な条件を説明できる",
        "ホスティングサービスとクラウドサービスの違いについて説明できる",
        "クラウドサービスにおけるアカウント設定やサービス選択など初期設定ができる",
        "画像などの静的コンテンツ保存用のストレージの設定・利用できる",
        "Webアプリケーションを導入するサーバーの設定・利用ができる",
        "データベースサーバーの設定・利用ができる"
      ],
      "practical": [
        "クラウドサービス上でサーバー間またはインターネットの接続などのネットワーク設定を行える",
        "セキュリティを考慮したサーバーやネットワークの構成ができる",
        "クライアントからのリクエスト数に応じて、スケールアップするサーバー構成を設定できる",
        "運用上で必要なアラートやログの設定ができる",
        "仮想化技術について説明できる"
      ]
    },
    "overall": "クラウドサービスを提供している会社の公式サイトでは、サービスを利用するためのアカウント作成からサーバーを利用する手順を公開しています。「AWS」「Azure」「GCP」などのクラウドサービスを調べてみると良いでしょう。<br><br>使いたいサービスが決まったら、公式ドキュメントからサーバーの構築や設定手順を学んでみましょう。<br><br>また、クラウドサービスは無料で使える範囲を超えると従量課金となるため注意しましょう。",
    "sceneId": "releasing-your-application"
  },
  {
    "id": "web-security",
    "title": "Webセキュリティ",
    "subTitle": "安全なサービスを届けよう",
    "description": "脆弱性のあるWebアプリケーションをインターネット上で公開すると、攻撃の対象となりユーザー情報の流出などの恐れがあります。安心してユーザーに使ってもらい、自信をもってプロダクトを公開するためにWebアプリケーションのセキュリティについて学んでおきましょう。",
    "thumbnail": "../images/skills/web-security/thumbnail.png",
    "overview": "Webアプリケーションはインターネットを通して世界中の人に届けることができますが、セキュリティ対策を行わずにサービスをリリースすると、データの漏洩などのサービスの継続性に関わる問題を招く恐れがあります。このような問題を招く可能性のあるアプリケーションの構造的な欠陥を「脆弱性」や「セキュリティバグ」と呼びます。<br><br>Webアプリケーションに対する攻撃には「SQLインジェクション」や「ディレクトリ・トラバーサル」などさまざまな手法があります。Webアプリケーションの開発において、脆弱性の潜む部分を理解し安全性に配慮して開発することでアプリケーションへの攻撃を防ぐことができます。<br><br>また、Webアプリケーションだけでなくサーバーやネットワークなどに関わる脆弱性についての対応も重要です。例えばサーバーにおいてはOS等のアップデートや、ログインアカウントの適切な運用などを行いサーバーへの不正アクセスを防ぎます。また、ネットワークにおける対策は、通信データの暗号化やファイアーウォールの導入などが挙げられます。<br><br>Webセキュリティ対策をすることで、Webアプリケーションを公開するリスクを最小限に抑えることができます。",
    "image": "../images/skills/web-security/illustration.svg",
    "purpose": "アプリケーションをユーザーが安心して使い続けられるようにする事は、開発者にとって重要な責務です。<br><br>もしセキュリティ対策をせずWebアプリケーションを公開してしまうと、個人情報漏洩によりユーザーに被害が及ぶリスクがあります。<br><br>ユーザーが安心して使えるWebアプリケーションを公開することは、ユーザーからの信頼を得ることに繋がります。<br><br>長く安全に利用されるWebアプリケーションを作るために、セキュリティ対策について学びましょう。",
    "standard": {
      "basic": [
        "システムの脆弱性によりどの様なリスクがあるか説明できる",
        "SSL/TLSを採用する理由について説明できる",
        "CSRFやXSS、インジェクション攻撃やDoSなどの代表的な攻撃について説明できる",
        "セッション管理の不備とは何かについて説明できる",
        "管理者権限が外部から悪用されないような対策ができる"
      ],
      "practical": [
        "不要なポートが開放されている事によるリスクを説明できる",
        "ファイアーウォールの役割について説明できる",
        "安全な認証や認可について説明できる",
        "WAFについて説明できる",
        "セキュリティに留意してOSやミドルウェアを定期的にアップデートしている"
      ]
    },
    "overall": "脆弱性を減らす対策を行うためには、一般的にWebアプリケーションのどの部分にリスクがあるかについて知る必要があります。<br><br>IPAの発行しているセキュリティ実装チェックリストで攻撃対象となりうる実装部分とその攻撃方法について把握しておくと良いでしょう。セキュリティに関する書籍にはよく使われる攻撃手法やツールとその対策方法が紹介されているので併せて調べてみましょう。<br><br>例えばWebアプリケーションではよく見かけるログイン機能も対策を行わないと個人情報を盗むための入り口となります。これらのリスクとリスクが発生しうるポイントを理解した上で脆弱性の少ないWebアプリケーションの実装方法について考えてみましょう。",
    "sceneId": "releasing-your-application"
  },
  {
    "id": "ci-cd",
    "title": "CI/CD",
    "subTitle": "ユーザーに最新のものを安定して届けよう",
    "description": "追加したい新しい機能や改善したい問題があったときに、素早く開発してプロダクトに取り込むことができれば継続的にプロダクトを届けることができます。CI/CDの仕組みを取り入れて、テストやビルド、デプロイなどの別々で行なっていた作業を自動化し継続的に行うことで開発の質とスピードを向上させましょう！",
    "thumbnail": "../images/skills/ci-cd/thumbnail.png",
    "overview": "CI/CDとはContinuous Integration（継続的インテグレーション）とContinuous Delivery（継続的デリバリー）の略称で、ソフトウェアの変更を常にテストして自動で本番環境にリリースできる環境で行う開発手法のことです。<br><br>サービス運用中に機能追加や修正を加える場合、小さなコード変更でも毎回テストからデプロイまで実行できるため、機能追加やバグ修正などを品質を保ちながら素早く進めることができます。<br><br>CI/CDを実現するには、専用のツールとGitHubなどのバージョン管理ツールとを連携させることで環境を準備する事ができます。専用ツールはJenkinsやCircleCIなどが代表的です。CI/CDツールは、コードの変更を自動で検知し、開発者がコードを変更するとテストからデプロイまでの作業をツールが自動で行います。また、ビルドやテストが失敗するとアラートが出る事で、開発者は容易に修復するに取り掛かる事ができます。<br><br>CI/CDに採用される開発手法はアジャイルであり、CI/CDはアジャイルの一種とも言えます。",
    "image": "../images/skills/ci-cd/illustration.svg",
    "purpose": "CI/CDを取り入れる事で、開発者の生産性向上やアプリケーションの品質向上が期待できます。<br><br>CI/CDツールを使わなければ、コードの変更部分を一度にマージしてテストを行っていたためリリース後に不具合が発見されることも珍しくありませんでした。<br><br>CI/CDツールを使えばプログラムの変更のたびに自動でテスト・ビルド・デプロイが実行されるため、バグの特定やリリース後の障害発生確率を減らすことができます。<br><br>ユーザーからの改善要求に対して素早く対応しメンテナンスの時間を短くするため、CI/CDを学びましょう。",
    "standard": {
      "basic": [
        "CI/CDの必要性について説明できる",
        "CI/CDツールについて説明できる",
        "代表的なCI/CDツールを導入して試してみる事ができる",
        "レスポンシブなページを作ることができる",
        "ブラウザの開発者ツールを使ってデバッグができる"
      ],
      "practical": ["CI/CDツールを使ってビルド/テスト/デプロイを実践できる"]
    },
    "overall": "Webアプリケーション開発の現場では、いち早く安定して高品質なプロダクトを継続して届ける為にCI/CDの重要度が増してきています。「なぜ継続的にプロダクトを届ける必要があるのか」から学んでみるとCI/CDの考え方の背景が理解できるでしょう。<br><br>CI/CDを取り入れた開発をはじめるために、まずは代表的なCI/CDツールの「CircleCI」を使ってみるとよいでしょう。<br><br>Githubなどのリポジトリがあれば、簡単に連携して始めることができるので、ツールを提供しているサービスを調べて使ってみましょう。CI/CDツールで自動化するにはGitHubなどでソースコードを管理する必要があります。また、自動でテストを実行するためには、テストコードを書くことも必要です。",
    "sceneId": "continuous-delivery"
  },
  {
    "id": "data-analysis-platform",
    "title": "データ分析基盤",
    "subTitle": "プロダクトの状況を正確に把握しよう",
    "description": "どんな改善が必要か判断するためにはプロダクトの状況を正確に把握する必要があります。ユーザーの利用状況やシステムの稼働状況を収集し分析できるようになりましょう。",
    "thumbnail": "../images/skills/html-and-css/thumbnail.png",
    "overview": "HTML&CSSはWebページを作るために使われる言語です。<br/><br/>インターネット上に公開されているホームページや物販ページ（ECサイト）は、Webサーバー上にHTML&CSSで作成したファイルを置くことで、全世界の皆に公開することが出来ます。<br/><br/>HTMLは文字や画像など表示する対象とその構造を指定する役割があり、表示対象の特性に応じて様々な<span data-type='term'>タグ</span>を使用してWebページに表示する構造を記述します。CSSは色やレイアウトなど見た目を装飾する役割を担っており、HTMLで記述した\"タグ\"要素に対して\"プロパティ\"で見た目を指定します。",
    "image": "../images/skills/html-and-css/illustration.svg",
    "purpose": "システムの抱える問題やその兆候を掴むことで、いつでも快適に使えるサービスをユーザーに届けられるでしょう。<br><br>ユーザー体験について開発者が関心を持たなければサービスを利用する中でユーザーが感じる不便さに気付けず、何を改善しどのような新機能を追加するべきかのヒントも得られません。最悪ユーザーがサービスの利用をやめてしまうことも考えられます。もし開発者がユーザー体験を悪化させている問題点を発見し解決できるようになれば、ユーザーにより良いサービスを届けられます。サービスの問題点を把握するためには、アクセス解析ツールから得られるデータやユーザーの課金率などのデータを分析してユーザーの動きを把握することからはじめましょう。<br><br>また障害の兆候を素早く発見できれば、システムの停止時間を減らしていつでも使えるサービスをユーザーに提供できます。そのためにはログファイルやリソース使用率などのデータを収集して日頃から分析し、障害の前兆を掴めるように準備しておくことが重要です。<br><br>システムの現在の状況を把握し、障害に強くユーザーが使いやすいシステムにするための対策を行う事でより良いユーザー体験を提供できるようになりましょう。",
    "standard": {
      "basic": [
        "サーバーやネットワーク機器が問題なく稼働していることを確認する方法を説明できる",
        "ログファイルに出力されるエラーメッセージを検知する方法を説明できる",
        "サーバーのリソース使用率の情報を収集して分析できる",
        "システムエラーを自動検知し、開発者が通知を受け取る方法について説明できる"
      ],
      "practical": ["アクセス解析ツールを使ってWebページの利用状況を分析できる"]
    },
    "overall": "まずはHTMLの基本的なタグを使ってシンプルなWebページの構造を作成したあと、CSSを使ってどの様に見た目が変わるかを確認してみましょう。ブラウザの開発者ツールを使えば、表示レイアウトの確認・修正を簡単に行えます。<br/><br/>レイアウトを組むときは、\"ボックスモデル\"（縦並びや横並び）について理解しておくと、スムーズにWebページを作ることができます。CSSのプロパティはスタイルを適用するHTMLタグの種類によって結果が変わるものもあるので、その点も意識して学んでいくと良いでしょう。<br/><br/>慣れてきたら<span data-type='search'>HTML タグ</span><span data-type='search'>HTML 属性</span><span data-type='search'>CSS プロパティ</span>などで検索し、新しいタグやプロパティをどんどん使ってみましょう！",
    "sceneId": "continuous-delivery"
  },
  {
    "id": "performance",
    "title": "パフォーマンス",
    "subTitle": "ユーザー体験を向上させよう",
    "description": "プロダクトを改善するポイントはエラーやバグだけではありません。パフォーマンスに問題があると、Webページの読み込みや動作に時間がかかりユーザー体験の悪化につながってしまいます。パフォーマンスを改善してプロダクトを快適に使ってもらえるようにしましょう。",
    "thumbnail": "../images/skills/performance/thumbnail.png",
    "overview": "パフォーマンスとは、提供するWebアプリケーションが限られたシステムリソースを使って効率よく機能しているか、その結果ユーザがいつも快適に利用できているかを示すものです。<br><br>Webアプリケーションにおけるパフォーマンスの良し悪しは、ユーザーの様々な操作に対する応答速度で判断します。パフォーマンスに問題があると目的のページがなかなか表示されなかったり、ボタンを押しても反応が遅かったりユーザの体験は余り良いものとは言えません。それに対して、応答性能も良く表示速度も早いとユーザー体験は好ましいものとなるでしょう。<br><br>パフォーマンス低下の原因は、処理するデータ量の増加やそれに伴う空きメモリの不足、または効率の悪い計算処理など様々です。パフォーマンスを向上させるには、まず現在の状態を正しく知る為の計測が必要です。計測方法には、開発者ツールのネットワーク監視やその他パフォーマンス診断ツールなどを使う方法や、プログラム中に計測用コードを埋め込む方法もあります。<br><br>いくつかの測定の結果、ある特定のページ機能エリアの応答時間が予め定めた目標値より大きかった場合、プログラムのどこかで処理が遅くなっていることが考えられます。この様なパフォーマンス低下に関わる主な箇所や原因を「ボトルネック」といいます。パフォーマンスの改善を進めていくには、このボトルネックの調査と適切な対応が求められます。",
    "image": "../images/skills/performance/illustration.svg",
    "purpose": "自分たちの提供するWebアプリケーションの今現在のパフォーマンスを正しく把握して、必要に応じて改善していくことはユーザー体験の向上には不可欠です。<br><br>プロダクトの公開直後は問題は見当たらなくても、ユーザー数の増加や機能追加により徐々にパフォーマンスが低下してしまうことがあります。これらをいち早く見つけて改善するには、パフォーマンスの目標値を定めて問題がないか常に測定しておくことが必要です。<br><br>また見つかった問題によっては、その難易度や全体への影響度合いから、すぐには改善が難しい場合もあります。しかし、問題が積み重なるとボトルネックの特定が難しくなる恐れもあります。すぐに改善できないとしても問題発見後の調査は随時行うことが望まれます。<br><br>パフォーマンスを知るための測定方法と指標そして主な改善の方法を学び、ユーザーの快適な操作環境を提供できるようにしましょう。",
    "standard": {
      "basic": [
        "パフォーマンス計測にはどんな指標（計測すべき値）があるか説明できる",
        "クライアントサイドのパフォーマンス計測ができる",
        "サーバーサイドのパフォーマンス計測ができる",
        "データベースのパフォーマンスの計測ができる",
        "主な数理モデルのアルゴリズムの計算量について説明できる"
      ],
      "practical": [
        "クライアントサイドで静的ファイルの読み込みチューニングができる",
        "Webサーバーのコンフィグファイル（設定ファイル）で、同時アクセス数のチューニングができる",
        "アプリケーションサーバーのコンフィグファイルで、DBコネクションプール数のチューニングができる",
        "データベースのテーブルやSQLなどのチューニングができる",
        "各サーバーのプロセスやメモリ状態を確認し、不要プロセスの削除などができる"
      ]
    },
    "overall": "パフォーマンス改善は、計測・問題の発見・原因の特定・修正と確認の流れで行います。まずはパフォーマンス改善の為の手順を良く理解しておきましょう。<br><br>パフォーマンスの計測では、まずは開発者ツールを使って各ページ毎のユーザーの操作に伴う応答速度に問題がないか計測してみましょう。各操作毎のクライアントとWebサーバーでの処理に要した時間を確認することができます。<br><br>あるページ機能に遅延が発生していた場合、プログラムのどの部分に問題があるのかボトルネック特定のためには、フロントエンドやサーバーサイドの計算処理と場合によってはデータベースの検索速度などについても把握することが大切です。処理の流れを把握して各々の計算速度の計測方法と、ボトルネックの改善方法について調べてみると良いでしょう。",
    "sceneId": "continuous-delivery"
  },
  {
    "id": "scalability",
    "title": "スケーラビリティ",
    "subTitle": "ユーザー数が増えても動き続ける仕組みを作ろう",
    "description": "サーバーの故障やユーザー数増加により負荷があがると、性能が下がったりサービスが提供できなくなるなどの問題が発生する事があります。安定してプロダクトを届けるために、アプリケーションやデータベース、ハードウェアなどを拡張できる状態にしましょう。",
    "thumbnail": "../images/skills/scalability/thumbnail.png",
    "overview": "スケーラビリティとは、利用者の増加に伴う処理負荷やデータの増大に適応できる能力のことです。スケーラビリティの高いシステムとは拡張性を考慮して作られたシステムのことです。<br><br>大量なデータの負荷に対応するためには、処理能力を高める必要があります。処理能力を高める代表的な手法として「スケールアップ」と「スケールアウト」という手法があります。<br><br>スケールアップとは、アプリケーションの処理のなかで効率化できる部分を見直してサーバーのリソースを増強することです。<br><br>またスケールアウトは、現在のサーバー数では高負荷となっている処理を、サーバーの台数を増やすことで処理を分散させシステム全体の処理能力を向上させる手法です。<br><br>スケールアウトの手法により、例えばに一つのWebサーバーが複数になる場合、Webからのリクエストを分散させるためにロードバランサの導入などが必要になります。また、データベースサーバーの台数を複数にした場合は、データの同期の仕組みも必要です。<br><br>スケールアウトとスケールアップのどちらを行うかは、必要となる高負荷処理の種類やその他の経済的な理由も考慮して決めます。例えば、利用者が多い時間帯だけサーバー台数を増やしたりサーバー障害が発生した際にサービスを止めることなく提供し続けたいなどの目的がある場合はスケールアウトが優れています。<br><br>一方で、スケールアップはサーバ構成やネットワークを変更しなくて良いなどシステム全体への影響が少ない利点があります。",
    "image": "../images/skills/scalability/illustration.svg",
    "purpose": "スケーラビリティを考慮したシステムを設計できるようになれば、大規模なサービスを作れるようになるでしょう。<br><br>システムを利用するユーザーが急激に増えた場合、システムの処理能力をあげることが急務となります。この時、あらかじめスケーラビリティを考慮していないと、サーバーが落ちてしまいサービスを提供できなくなってしまいます。<br><br>スケーラビリティを考慮してシステムを設計することでサーバー台数やリソースを増やすことで処理能力をあげられ、サービスの成長に伴って発生するパフォーマンス問題への対処を素早く行えます。<br><br>スケーラビリティについて学ぶことでシステムの構成変更に柔軟に対応できるシステムを作ることができるため、大規模なシステムも自信をもって運用できます。",
    "standard": {
      "basic": [
        "スケーラビリティがなぜ必要かについて説明できる",
        "スケールインについて説明できる",
        "ロードバランサーの仕組みについて説明できる",
        "スケールアップを行う必要がある具体的な事例を1つ上げられる",
        "スケールアウトを行う必要がある具体的な事例を1つ上げられる"
      ],
      "practical": [
        "クラウドサービスを使って、スケーラビリティを考慮したシステム構成を設計できる"
      ]
    },
    "overall": "まずはシステムの中でデータがどのように処理されるのか、どのサーバーの負荷が高くなっているのか、どうすれば負荷が解消されて全体の処理速度が上がるのかを押さえるとよいでしょう。<br><br>例えばスケールアップやスケールアウトではなく、アルゴリズムの見直しやデータベースのチューニングを行うことで処理能力不足が解消できるならそれも選択肢の一つです。<br><br>また、処理能力をあげるための方法について、コストと効果を比較しながら検討できるようになりましょう。オーバースペックは開発者とユーザー双方にとってメリットとなりません。<br><br>もしクラウドサービスを利用してシステムを構築していたら、負荷の高くなったら追加のサーバーを自動で起動させ、負荷が下がると停止する設定を簡単に行えます。スケーラビリティの考え方を押さえたら、クラウドでのスケーラビリティの設定について学んでみましょう。",
    "sceneId": "continuous-delivery"
  },
  {
    "id": "fault-tolerance",
    "title": "耐障害性",
    "subTitle": "プロダクトの問題に対応できるようになろう",
    "description": "ユーザーが増加しサーバー台数も増えるとシステムの問題が起きる確率も高まります。問題が起きても落ち着いて対応できるようになりましょう。",
    "thumbnail": "../images/skills/html-and-css/thumbnail.png",
    "overview": "サービスを止めることなく提供し続けるためには、機器の故障やアプリケーションなどの不具合によりシステム全体が停止するような重大な障害の発生頻度を下げることが必要です。このようなシステムを耐障害性の高いシステムと呼びます。<br><br>可用性の高いシステムを作ることで、ユーザーはより長い時間サービスを利用できます。<br><br>障害の発生を減らす取り組みとしては、アプリケーションのバグ修正やサーバー再起動など障害の発生を未然に防ぐための予防保守や、古くなった機器の入れ替えやリソースの追加を行うことで障害の前兆を検知して早めに対策を行う予知保守などがあります。これらの対策を行うことはシステム障害の発生確率を下げることにつながりますが、サービスが使えなくなるような障害の発生確率をゼロにすることはできません。<br><br>そこでサーバーを複数台用意してシステムを冗長構成とする方法があります。冗長化されたサーバーは処理能力の向上だけでなく、一部のサーバーが使えなくなっても他のサーバーで処理を代行することができるため、システム障害によるサービス停止を回避することができます。<br><br>これらの対策を行うことでシステムは障害に強くなり、結果としてサービスを安定して提供することができるようになります。",
    "image": "../images/skills/html-and-css/illustration.svg",
    "purpose": "障害が発生してもサービスを提供し続けられるシステムを作れるようになれば、障害に起因するサービス停止の確率を下げられます。<br><br>例えばアプリケーションで想定外のエラーや予期せぬ機器故障によるシステムダウンなど、稼働中のシステムでは様々な問題が発生しますが、予防保守や予知保守を定期的に行うことで障害の発生頻度を減らすことは可能です。<br><br>またサービスの停止が致命的となるシステムでは、サービスを止めないための対策を行います。もしあるサーバーが故障してもサービスを提供し続けられるサーバー構成となっていれば、ユーザーは障害の影響を受けることなくサービスを使い続けられます。このように日頃から障害の発生に備えることは安定したサービスを提供する上で欠かせません。<br><br>障害に強いシステムを構築して、いつでも使えるサービスをユーザーに届けられるようになりましょう。",
    "standard": {
      "basic": [
        "システムに変更を行う際の事前準備や事後作業について説明できる",
        "アプリケーションエラーが発生した時の復旧対応について説明できる",
        "サーバーやネットワークで障害が発生した時の復旧対応について説明できる",
        "データベース障害が発生した時の復旧対応について説明できる"
      ],
      "practical": [
        "システムの冗長化について説明できる",
        "障害発生に備えて事前に準備できることを説明できる",
        "バックアップやデータベースの再編成などの定例作業をバッチ化できる",
        "作成したバッチをスケジュール登録し自動で実行できる",
        "オンライン状態のデータベースをバックアップする方法と、バックアップデータからリストアする方法について説明できる",
        "データベースに障害が発生してもシステムを止めない方法について説明できる"
      ]
    },
    "overall": "耐障害性を高める目的はサービスを停止させることなくユーザーに提供し続ける事です。<br><br>システム不具合の前兆はシステムの稼働情報から読み取れます。例えばエラーメッセージやリソース使用率などの情報からどのような障害の前兆を検知することができるのかについて調べてみましょう。また、バックアップの取得やデータベースの再編成作業など障害の発生に備えて行う定例作業について、それぞれの作業の目的や実施することで得られるメリットについて知っておくと良いでしょう。<br><br>システムの冗長化については、具体的なサーバー構成や障害が発生した場合の切替作業などを大規模システムの構成例などから学ぶとイメージしやすいでしょう。",
    "sceneId": "continuous-delivery"
  }
]
