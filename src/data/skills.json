[
  {
    "id": "html-and-css",
    "title": "HTML&CSS",
    "subTitle": "レイアウトを作れるようになろう",
    "description": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。HTMLとCSSを学べば、これまであなたの頭の中にあった考えを、形にして表現する手段を手に入れることができるのです。",
    "thumbnail": "../images/skills/html-and-css/thumbnail.png",
    "overview": "HTMLとCSSはWebページを作るために使われる言語です。<br><br>インターネット上に公開されているWebページは、Webサーバー上にHTMLやCSSが書かれたファイルを置くことで、全世界の人に公開することができます。<br><br>HTMLはWebページに表示する文字や画像などの内容とそれらの構造を指定する役割があり、さまざまな<span data-type='term'>タグ</span>を使用して記述します。<br><br>CSSは色やレイアウトなど見た目を装飾する役割があり、HTMLで記述した要素に対して<span data-type='term'>プロパティ</span>で見た目を指定します。",
    "image": "../images/skills/html-and-css/illustration.svg",
    "purpose": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。あなたがWebページを作成したいと考えているなら、HTMLやCSSの知識は必要不可欠です。<br><br>CSSのプロパティを使いこなすことができれば、さまざまな画面サイズでの表示に対応した、思い通りの見た目のWebページを作ることができるようになります。<br><br>HTMLとCSSでWebページを作成できれば、これまであなたの頭の中にあった考えや誰にも見せたことのなかった作品を世界に公開することができるようになります。HTMLとCSSを一通り使えるようになったら、ポートフォリオサイトなどを作ってあなたが共有したい情報や、あなたの作った作品を世界に発信してみましょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "Webページを作成するのに必要な最低限の知識は多くはありません。まずは、HTMLの基本的なタグを使ってシンプルなWebページの構造を作成したあと、CSSを使ってどのように見た目が変わるかを学んでいきましょう。",
        "tasks": [
          {
            "title": "HTML&CSSの基本を理解しよう",
            "child": [
              "HTMLに触れてみよう",
              "CSSに触れてみよう",
              "ボックスモデルを学ぼう",
              "ヘッダーやメニューなどページ要素のレイアウトを作ってみよう"
            ]
          },
          {
            "title": "レスポンシブデザインを理解しよう",
            "child": [
              "メディアクエリを使ってみよう",
              "タブレット向けのレイアウトを作ってみよう",
              "スマートフォン向けのレイアウトを作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ジュニアレベルではより利用者を意識したスキルが必要です。アクセシビリティの基本を押さえて、実践的なWebページを作れるようになりましょう！",
        "tasks": [
          {
            "title": "自分のWebページを作ってみよう",
            "child": [
              "複数ページの構成を考えてみよう",
              "複数ページをレイアウトしてみよう",
              "faviconを設定してみよう",
              "OGPを設定してみよう",
              "GitHub PagesでWebページを公開してみよう"
            ]
          },
          {
            "title": "アクセシビリティの基本を理解しよう",
            "child": [
              "アクセシビリティの概要を知ろう",
              "HTMLとアクセシビリティについて知ろう",
              "HTML要素や属性のセマンティクスについて知ろう",
              "CSSとアクセシビリティについて知ろう",
              "アクセシビリティを考慮した基本的なデザインを知ろう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "editors",
    "title": "エディタ",
    "subTitle": "快適にコーディングするために開発環境を整えよう",
    "description": "Webページ開発をはじめるためにエディタを用意しましょう。エディタを使うことで、入力補完や文法のチェックを行ってくれるため、快適にプログラミングができます。お気に入りのエディタを見つけて、楽しくプログラミングできる環境を整えましょう。",
    "thumbnail": "../images/skills/editors/thumbnail.png",
    "overview": "エディタ（テキストエディタ）はプログラミングのコードを書くときに使うツールです。<br>エディタは記述しているコードの構文を検知して色を付けたり(シンタックスハイライト)、これから入力しようとしている構文を予測して候補を表示（入力補完）してくれます。これらの機能により、開発効率を上げることができます。<br><br>エディタにはプログラムのコードをより効率的に書くための便利なプラグインも用意されています。例えば不揃いなコードに自動で改行を入れてくれたり、関数をクリックするとその関数の定義部分に飛べるなど、繰り返し行う面倒な作業をサポートしてくれます。<br><br>また、エディタの種類には<span data-type='term'>統合開発環境（IDE）</span>と呼ばれるものもあり、コードのコンパイルやデバッグ、プログラムのテストを行えます。",
    "image": "../images/skills/editors/illustration.svg",
    "purpose": "エディタを利用することでコーディングを快適に行うことができ開発効率を上げることができます。<br><br>プログラムのコーディングはメモ帳などでも行えますが、メモ帳はプログラミングで利用することを前提としたツールではないため効率を上げるための機能などは備わっていません。<br><br>プログラミング用のエディターを使えば、シンタックスハイライトでコードの可読性をあげたり予測変換機能によってコーディングのスピードも向上します。その他にもさまざまなプラグインを導入することで必要な機能を追加できます。<br><br>どのエディターを使うか迷ったら、その他の拡張機能やIDE機能についても調べて判断しましょう。<br><br>エディタを利用して、コーディングを快適に行いましょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "エディタをインストールしてローカル環境で開発できるようになりましょう。まずは基本的なセットアップをしましょう！",
        "tasks": [
          {
            "title": "エディタをセットアップしよう",
            "child": [
              "Visual Studio Codeをインストールしよう",
              "コードを自動保存できるよう設定にしよう",
              "コードを自動整形できるようにしよう",
              "ファイルパスを補完できるようにしよう"
            ]
          },
          {
            "title": "基本的な機能を覚えよう",
            "child": [
              "ショートカットキーで操作してみよう",
              "検索機能を使ってみよう",
              "置換機能を使ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "VSCodeではコードを書くだけでなく、デバッグ機能もサポートしています。エディタのデバッグ機能の基本を押さえて開発効率をあげましょう！",
        "tasks": [
          {
            "title": "エディタのデバッグ機能を使ってみよう",
            "child": [
              "VSCode 拡張機能：Debugger for Chromeをインストールしよう",
              "ブレークポイントを設定しよう",
              "ステップ実行してみよう",
              "FizzBuzzゲームプログラムのデバッグをしてみよう"
            ]
          },
          {
            "title": "vimの基本を理解しよう",
            "child": ["基本的な操作をしてみよう"]
          }
        ]
      }
    }
  },
  {
    "id": "internet",
    "title": "インターネット",
    "subTitle": "Webの仕組みを知ろう",
    "description": "すべてのWebページはインターネットの仕組みの上に成り立っているので、Webページの公開にはインターネットの基本的な知識が必要です。作成したWebページを世界に公開する準備をしましょう。",
    "thumbnail": "../images/skills/internet/thumbnail.png",
    "overview": "私たちが利用しているWebページは、インターネットの仕組みの上に成り立っています。コンピューターをインターネットにつなげることで、世界中のサーバーやコンピューターとつながりデータをやりとりできるようになります。ブラウザでWebページをみたり、離れた相手にメールを送れるのもインターネットのおかげです。<br><br>インターネットはデータを要求する<span data-type='term'>クライアント</span>とそれに応答する<span data-type='term'>サーバー</span>とのやりとりで成り立っています。クライアントからの要求を<span data-type='term'>リクエスト</span>、サーバーからの応答を<span data-type='term'>レスポンス</span>と呼びます。<br><br> <span data-type='term'>ブラウザ</span>では、タイトルバーに<span data-type='term'>URL</span>を入力することでWebページが表示されます。これはまずインターネットを介してクライアントとなるブラウザからURLに対応したサーバーへ、Webページ取得のためのリクエストが送られます。その後リクエストを受信したサーバーが所定のHTMLファイルなどのデータをクライアントに返すことで、ブラウザ上にWebページが表示される仕組みになっています。<br><br>このようなクライアントとサーバーのやり取りは<span data-type='term'>HTTP（Hypertext Transfer Protocol）</span>という予め定められた通信のルールに則って行われます。このルールのことを通信プロトコルと呼び、HTTP以外にも用途によってさまざまなプロトコルが用意されています。",
    "image": "../images/skills/internet/illustration.svg",
    "purpose": "Webページを作れるようになるには、インターネットとその上でのWebの仕組みを理解する必要があります。<br><br>Webページの公開にはサーバーの準備やドメインの取得、HTMLファイルなどの配置が必要です。またこれらの役割や働きを理解するにはインターネットの基本的な知識が必要となります。まずは基礎として、HTTP通信、IPアドレスやドメイン名などの役割と動きについて学びましょう。<br><br>ユーザーがWebページにアクセスするとき、必ずインターネットを経由します。<br><br>インターネットについて学んでWebの仕組みを理解し、Webページを公開できるようになりましょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "まずはインターネットをイメージするためにクライアントやサーバー、URLのような用語を押さえましょう！",
        "tasks": [
          {
            "title": "インターネットの基本を理解しよう",
            "child": [
              "クライアントとサーバーについて学ぼう",
              "URLの役割について学ぼう",
              "リクエストとレスポンスの流れを掴もう",
              "IPアドレスについて学ぼう",
              "URLとIPアドレスの関係とDNSを理解しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "HTTPはWeb開発のベースとなる知識です。HTTPの基本を押さえてプログラミングスキルの土台を作りましょう！",
        "tasks": [
          {
            "title": "HTTPの基本について理解しよう",
            "child": [
              "プロトコルとは何かを知ろう",
              "HTTPメッセージについて学ぼう",
              "ステートレスについて学ぼう",
              "Cookieについて学ぼう"
            ]
          },
          {
            "title": "インターネット上のホスティングサーバーにWebページを公開しよう",
            "child": [
              "GitHub Pagesに公開してみよう",
              "カスタムドメインを取得してみよう",
              "404ページを設定してみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "javascript",
    "title": "JavaScript",
    "subTitle": "Webページに動きをつけてみよう",
    "description": "HTML&CSSだけでは少し退屈なWebページに感じたかもしれません。WebページにJavaScriptを取り入れることで、クリックやスクロールなどのユーザーの操作に応じた動的な表現が可能になります。このような仕掛けを用意して、楽しさや利便性を備えたWebページを作れるようになりましょう。",
    "thumbnail": "../images/skills/javascript/thumbnail.png",
    "overview": "JavaScriptは世界でもっとも使われているプログラミング言語の1つであり、近代的なWebページを作成するためには欠かせません。<br><br>JavaScriptを使うことで、クリックでHTML要素の色や形を変えたりアニメーションを表示するなど、Webページにさまざまな動きをつけることができます。JavaScriptはHTML/CSSと共に、Webページのブラウザでの表示や動作についての記述に使われます。<br><br>ユーザーの操作によって動的に変化するWebページが主流となってきたことから、現在JavaScriptは多くのWebページで利用されています。",
    "image": "../images/skills/javascript/illustration.svg",
    "purpose": "JavaScriptを使ってWebページ上に動的な表現を取り入れることで、ユーザーに操作した感覚を与えたり、ローディング中の待ち時間を退屈にさせないことが可能になります。このような仕掛けにより、Webページを利用するユーザーに「楽しく・心地よい」体験を提供できます。<br><br>また、JavaScriptで作られたフロントエンド用のライブラリやフレームワークも登場しており、代表的なものにReact、Vue、Angularなどがあります。<br><br>このように、楽しさや利便性を備えたWebページを作るうえではJavaScriptは欠かせない言語となっています。<br><br>Webフロントエンド開発で高機能なWebページを作りたい場合は、JavaScriptを学ぶとよいでしょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "プログラミングの",
        "tasks": [
          {
            "title": "ブラウザでJavaScriptを使って動きのあるWebページを作ります。まずは、基本的な文法から始めましょう！",
            "child": [
              "基本的な構文を覚えよう",
              "FizzBuzzプログラムを作ってみよう"
            ]
          },
          {
            "title": "DOMの基本について理解しよう",
            "child": [
              "WebページでJavaScriptを実行してみよう",
              "JavaScriptでHTMLを操作してみよう",
              "JavaScriptでCSSを操作してみよう",
              "イベント処理を作ってみよう"
            ]
          },
          {
            "title": "動きのあるWebページを作ってみよう",
            "child": [
              "モーダルを作ってみよう",
              "アコーディオンを作ってみよう",
              "スライドを作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "非同期処理はJavaScriptの難しいポイントの一つです。実行順序を丁寧に押さえて非同期処理を使いこなせれば、作れる幅がぐっと広がります！",
        "tasks": [
          {
            "title": "非同期処理を理解しよう",
            "child": [
              "非同期処理に触れてみよう",
              "コールバック関数を使おう",
              "Promiseを使ってみよう",
              "Async/Awaitを使ってみよう"
            ]
          },
          {
            "title": "Ajax利用してみよう",
            "child": [
              "FetchでWeb APIを呼び出してみよう",
              "Ajaxで取得したデータをWebページに表示しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "developer-tools",
    "title": "開発者ツール",
    "subTitle": "Webページ開発のデバッグをしよう",
    "description": "開発を行っているとレイアウト崩れやJavaScriptが思うように動かない状況に直面することもあるでしょう。そんなときは開発者ツールを使うことで原因を調査することができます。自分で原因を見つけて解決できれば、あなたはどんなWebページも作ることができます。",
    "thumbnail": "../images/skills/developer-tools/thumbnail.png",
    "overview": "開発者ツールは、Webページ開発の<span data-type='term'>デバッグ</span>に使えるブラウザが提供している機能です。<br><br>開発者ツールを使えば、HTMLソースコードがWebページ上のどの部分に表示されていて、HTML要素にどのようなCSSプロパティが適用されているかを一覧で確認することができます。また、JavaScriptの実行状況も確認することが可能です。<br>またその他にもサーバーとの通信状況や通信にかかる時間、Cookie（クッキー）などのストレージの状態も確認できるため、Webページの作成とデバッグに活用できます。",
    "image": "../images/skills/developer-tools/illustration.svg",
    "purpose": "Webページを作っていると、レイアウト崩れやJavaScriptが思うように動かないなどの不具合が発生することがあります。しかし、レイアウト崩れやエラーの原因となるコードが特定できなければ修正もできません。<br><br>開発者ツールを使用すればコーディング中にWebページの見え方やJavaScriptのエラーも確認できるため、タブレットやモバイルでのレイアウト確認やJavaScriptのデバッグなど、Webページ開発中に発生するエラーや不具合を即時に発見し修正できます。<br>開発者ツールの使い方を学んで、自分で原因を見つけて解決できるようになりましょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "まずはもっとも利用するHTMLとCSSの確認方法をマスターしましょう！",
        "tasks": [
          {
            "title": "開発者ツールに触れてみよう",
            "child": [
              "Google Chromeをインストールしよう",
              "WebページのHTMLを確認してみよう",
              "WebページのCSSを確認してみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "実践での開発ではレイアウト以外にもさまざまなデバッグをします。色んな機能を使ってみましょう！",
        "tasks": [
          {
            "title": "開発者ツールの基本的な機能について理解しよう",
            "child": [
              "レスポンシブのレイアウトを確認してみよう",
              "HTMLに読み込まれているファイルを確認してみよう",
              "JavaScriptの実行状況を確認してみよう",
              "ストレージを確認してみよう",
              "キャッシュを無効にしてみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "server-side-programming",
    "title": "サーバーサイドプログラミング",
    "subTitle": "サーバーで動くプログラムを作ろう",
    "description": "世界でよく使われているWebアプリケーションの多くはフロントエンドとサーバーサイドのプログラムが連携して動いています。Webアプリケーション作成のために、サーバーサイドのプログラミング言語について学びましょう。",
    "thumbnail": "../images/skills/server-side-programming/thumbnail.png",
    "overview": "サーバーサイドのプログラミング言語とは、クライアント（ブラウザ）からの要求によりサーバーで動作するプログラムを実装するための言語の総称です。Ruby、Python、Java、PHPなどのスタンダードなものから、RustやGo言語などの比較的新しいものまでサーバーサイドの言語には色んな種類があります。<br><br>サーバーサイドの言語は、大きくJavaやGoなどのコンパイラを用いる<span data-type='term'>コンパイラ言語</span>とRubyやPythonなどのインタプリタを用いる<span data-type='term'>スクリプト言語</span>に分けることができます。<br>コンパイラ言語は処理速度の速さやコンパイラのチェックによってバグを防げる利点があり、スクリプト言語はコンパイラを用いる開発よりも手軽に実行して結果が見えるので開発するスピードが速くなるなどの利点があります。<br><br>どのサーバーサイドの言語を使用しても、Webアプリケーションの開発においてクライアントからの要求に応じて処理を行い、処理結果を返す流れには違いはありません。基本的に制約はありませんが、得意とする処理やフレームワークには特徴があるので、自分が作成したいアプリケーションの種類と自分のスキルに応じて選択すると良いでしょう。",
    "image": "../images/skills/server-side-programming/illustration.svg",
    "purpose": "動画サービスやECサイトなどの世界で良く使われているWebアプリケーションは、いずれかのサーバーサイドのプログラミング言語を用いて作られています。<br><br>HTML、CSS、JavaScriptを使ってウェブページを作るだけでは、いつ誰がアクセスしても表示が変わらない静的なWebページを作ることしかできませんでした。サーバーサイドのプログラミング言語を学ぶことで、ユーザーのリクエストに応じた動的なWebページを作れるようになります。<br><br>本格的なWebアプリケーションの作成のために、サーバーサイド言語を学びましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "サーバーサイドのプログラミング言語は種類が多いですが、基本的にどの言語を選択してもWebアプリケーション開発をすることができます。まずは、Rubyでサーバーサイドのプログラミングに触れてみましょう！",
        "tasks": [
          {
            "title": "Rubyを動かしてみよう",
            "child": [
              "変数を使ってみよう",
              "条件分岐をしてみよう",
              "繰り返し処理を作ってみよう",
              "FizzBuzzプログラムを作ってみよう"
            ]
          },
          {
            "title": "Rubyの基本を理解しよう",
            "child": [
              "配列を使ってみよう",
              "ハッシュを使ってみよう",
              "nilを扱ってみよう",
              "メソッドを使ってみよう",
              "エラー処理を加えてみよう",
              "エイト・クイーン問題を解いてみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "実践では自分でゼロから作るだけでなく、さまざまなライブラリを組み合わせて便利な機能を作ります。代表的なライブラリを使ってみましょう！",
        "tasks": [
          {
            "title": "Rubyを使えるようになろう",
            "child": [
              "rbenvでRubyをインストールしよう",
              "Rubyの標準ライブラリを使ってみよう",
              "IOクラスを使って標準入出力をしてみよう",
              "Fileクラスを使ってファイルを操作してみよう",
              "Regexpクラスを使って正規表現を扱ってみよう",
              "rubygemsの基本を理解しよう",
              "rubocopを使ってLintを設定しよう",
              "i18nを使ってロケール（多言語化）に対応しよう",
              "Bundlerについて理解しよう",
              "ラインエディタ（EDLIN）を作ってみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "object-oriented-programming",
    "title": "オブジェクト指向",
    "subTitle": "コードを整理し、機能の追加や変更をしやすくしよう",
    "description": "オブジェクト指向は、Webアプリケーションを作成する為の基礎となる考え方やプログラミング技術です。オブジェクト指向でアプリケーションを作成することにより、見通しがよく、メンテナンス性に優れたプログラミング技術を身に付けましょう。",
    "thumbnail": "../images/skills/object-oriented-programming/thumbnail.png",
    "overview": "オブジェクト指向とは、オブジェクトと言う”モノ”単位でシステムを作成する考え方です。オブジェクト指向により、見通しの良くメンテナンス性に優れたシステムを作ることができます。<br><br>オブジェクトの働きは、そのひな形としての<span data-type='term'>クラス</span>に<span data-type='term'>属性</span>や<span data-type='term'>振る舞い</span>を記述します。<br><br>オブジェクト指向で作らえたシステムは、クラスの定義に従い複数のオブジェクトが必要なときに生成され、他のオブジェクトと相互に協調し合いながら効率的に動作するのが特徴です。<br><br>「乗り物」クラスを例に、「具体的な乗り物」オブジェクトを作る流れを図で確認してみましょう。乗り物クラスには共通する属性や振る舞いを定義します。これにより似た振る舞いをもつさまざまな乗り物を1つのクラスから作ることができます。<br><br>このように複数のオブジェクトは一つのクラスから生成することができます。オブジェクト指向の考え方に沿って開発することで、役割に応じた部分を集めてプログラム全体を構成することで、それぞれの部分の独立性が保たれ機能追加や修正などが容易になります。",
    "image": "../images/skills/object-oriented-programming/illustration.svg",
    "purpose": "オブジェクト指向を学ぶことで、作りたい機能をどのようにプログラミングすると良いかをイメージできるようになるでしょう。<br><br>オブジェクト単位で整理されていないプログラムの場合、それぞれの役割をもったプログラムがお互いに依存し合ったり、引数の多い関数や似たようなコードが量産されたりするので、<span data-type='term'>拡張性</span>や<span data-type='term'>再利用性</span>がなくなってしまいます。<br><br>オブジェクト指向は、多くのプログラミング言語で採用されている基本的な考え方です。オブジェクト指向でプログラムを書くことで同じ処理をクラス単位でまとめることができるため、プログラムの再利用性が高まります。<br><br>オブジェクトの振る舞いに変更が必要な場合、それがある単一のクラスの内部に閉じたものであれば、他のクラスで作られたオブジェクトに影響を与えずに修正することができます。このようにメンテナンス性が高まるのもオブジェクト指向の大きなメリットの一つです。<br><br>オブジェクト指向を学んで、機能の追加・変更がしやすいプログラムを書けるようになりましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "初学者にとってオブジェクト指向はイメージが難しいです。まずはオブジェクト指向を体験してイメージを掴みましょう！",
        "tasks": [
          {
            "title": "Rubyでオブジェクト指向に触れてみよう",
            "child": [
              "クラスを作ってみよう",
              "インスタンスと初期化について学ぼう",
              "インスタンス変数を作ってみよう",
              "インスタンスメソッドを作ってみよう",
              "継承を使ってみよう",
              "料理注文システムを作ろう"
            ]
          }
        ]
      },
      "middle": {
        "description": "コードを書くだけではオブジェクト指向の必要性を理解￥できない部分もあるかもしれません。ここでは体系的にオブジェクト指向を学びましょう！",
        "tasks": [
          {
            "title": "オブジェクト指向の基本を理解しよう",
            "child": [
              "カプセル化について学ぼう",
              "ポリモーフィズムについて学ぼう",
              "集約と移譲について学ぼう",
              "クラス設計とUMLについて学ぼう",
              "ブラックジャックゲームを作ってみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "terminal-operations",
    "title": "ターミナル操作",
    "subTitle": "コンピュータの操作を効率的にできるようになろう",
    "description": "アプリケーション開発では、パッケージのインストールやファイル操作など、ターミナルを使ってコマンドを実行する場面がたくさんあります。開発や環境構築に必要なターミナル操作を学びましょう。",
    "thumbnail": "../images/skills/terminal-operations/thumbnail.png",
    "overview": "ウィンドウ上のアイコンをクリックするなど、ユーザーがコンピュータの操作を視覚的に行う方法のことを<span data-type='term'>GUI（グラフィカル・ユーザー・インターフェース）</span>といいます。それに対して、ユーザーがテキストをベースとしたコマンド操作によりコンピューターを操作することを<span data-type='term'>CUI（キャラクター・ユーザー・インターフェース）</span>といいます。<br><br>ターミナルとは、入力されたコマンドを通してコンピューターとやりとりをするCUIツールです。<br><br>ターミナルで使用するコマンドは、<span data-type='term'>シェル</span>という種類のプログラムで解釈・実行されます。<br><br>ターミナルでの操作は、OSによってシェルが違うため使えるコマンドに違いがあります。開発でよく使われるのは<span data-type='term'>Linux系</span>のコマンドです。Macでは標準で、またWindowsでも設定を変更する事で使えるようになります。",
    "image": "../images/skills/terminal-operations/illustration.svg",
    "purpose": "ターミナルを利用することで効率的にコンピューターを操作することができます。<br><br>Webアプリケーション開発では、ライブラリのインストールやデータベースの操作などを行うことがありますが、これらの作業は多くがターミナル上でのCUI操作が基本です。<br><br>マウスなどを用いたGUI操作だけでもほとんどの操作を行うことができますが、CUIではショートカットキーや入力補完を使えるため操作をより効率的に行うことができます。<br><br>また、アプリケーションを公開するためのサーバーにはLinux系のOSが幅広く利用されており、OSやアプリケーションで行う環境設定や、確認作業などのほぼ全ての操作をターミナルで行うことになるため、Linuxコマンドについても学習が必要です。<br><br>ターミナル操作について学んで、効率よく作業できるようになりましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "ターミナルは初学者に取っては敷居が高い印象がありますが、何度か使えば便利なことを実感できます。まずはターミナルに触れてみましょう！",
        "tasks": [
          {
            "title": "ターミナル操作の基礎について学んでみよう",
            "child": [
              "ターミナルに触れてみよう",
              "ファイル構造を理解しよう",
              "ファイル・ディレクトリを操作しよう",
              "リダイレクトとパイプについて学ぼう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ターミナルを使いこなすにはLinux OSの基本の理解が必要です。イメージが湧きづらい分野ではありますが、実際に自分で構築し動かすことで理解が進みます。記事や書籍を参考に進めてみましょう。",
        "tasks": [
          {
            "title": "Linux OSについて学んでみよう",
            "child": [
              "Linux OSとディストリビューションについて理解しよう",
              "CentOSをインストールしてみよう",
              "ユーザーアカウントを作成してみよう",
              "権限とsudoについて学ぼう",
              "RPMのパッケージ管理について学ぼう",
              "ファイルシステム（マウント）について学ぼう"
            ]
          },
          {
            "title": "ターミナルを実践で使えるようになろう",
            "child": [
              "プロセスとジョブについて学ぼう",
              "メモリ状態のチェックについて学ぼう",
              "SSHでリモートサーバーに接続しよう",
              "シェルスクリプトを作成してスケジュール起動させてみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "databases",
    "title": "データベース",
    "subTitle": "データベースを扱ったWebアプリケーションの機能を作ろう",
    "description": "データベースを使えばユーザーや商品情報など、様々な蓄積データを扱ったWebアプリケーションを作ることができます。本格的なサービスを作るために、データベースについて学んでみてください。",
    "thumbnail": "../images/skills/databases/thumbnail.png",
    "overview": "データベースとは、アプリケーションで扱うべきデータをプログラムコードから分離して集中管理する仕組みです。アプリケーションは、データベースを使うことで正しく安全にデータの追加・更新などができます。<br><br>データベースにはその構成の違いにより、<span data-type='term'>リレーショナルデータベース（RDB）</span>やNoSQLと呼ばれる非リレーショナルデータベースなどの種類があります。その中で現在でも広く使われるものはリレーショナルデータベースです。リレーショナルデータベースは、データを<span data-type='term'>テーブル</span>の集合体で管理します。テーブルはデータの種類ごとに複数の<span data-type='term'>カラム</span>を持っており、主キーや外部キーなどの各種の制約を設定してから使用します。データベースをどの様なテーブル構成としてどの様な制約を掛けるかは、システム全体の性能に影響を及ぼすため非常に重要なものです。<br><br>データベースを使うことで、複数のユーザーがシステムを同時利用する場合でもデータ登録時に起こる衝突によるデータ消失や重複の防止によりデータの整合性を保つことができます。またデータの暗号化によるセキュリティ向上やバックアップ機能によりデータ保全などがも可能です。<br><br>アプリケーションを作成する上でデータベースを扱うには、プログラム内に操作するコードを記述する必要があります。例えばリレーショナルデータベースでは、<span data-type='term'>SQL</span>と呼ばれる専用の言語をプログラムコードに含めることでデータの作成や取得、更新、削除などの操作を行うことができます。<br><br>データベースの仕組みやプログラムからの操作方法を知って、データを安全に効率よく扱えるようになりましょう。",
    "image": "../images/skills/databases/illustration.svg",
    "purpose": "データベースについて学ぶことで、Webアプリケーションで扱うデータを正しく管理できる様になります。<br><br>Webアプリケーションで扱うデータには、会員登録時のユーザーデータやECサイトの商品データなど様々です。<br><br>これらのデータを扱うWebアプリケーションをユーザーに快適に利用してもらうためには、データが正しく保存されることは勿論のこと、大量のデータから目的のデータを素早く取り出す必要があります。データベースを使うことで、関連しあうデータを一括で保存しデータの完全性を担保したり、効率的に検索して表示することが出来ます。<br><br>近年のWebアプリケーションフレームワーク上の開発では、直接SQLを使わずに<span data-type='term'>O/Rマッパー</span>により実装することも可能です。ただし、このマッパー内部ではSQLが動作しているので効率的なデータアクセスを実現するためにSQLの学習も必要となるでしょう。<br><br>本格的なサービスを作るために、データベースについて学びましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "SQLでデータ取得をしてみよう",
            "child": [
              "データベースの種類と役割について理解しよう",
              "SELECTを使ってデータを取得しよう",
              "WHEREを使って特定のデータを取得しよう",
              "データの並べ替えをしてみよう",
              "集計関数を使ってみよう",
              "データをグループ化してみよう",
              "サブクエリを使ってみよう",
              "JOINで複数テーブルを結合しよう",
              "ファッションサイトのデータベースの分析をしてみよう"
            ]
          },
          {
            "title": "SQLでデータ変更をしてみよう",
            "child": [
              "INSERTでデータを追加してみよう",
              "UPDATEでデータを更新してみよう",
              "DELETEでデータを削除してみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "リレーションデータベースの設計の基本を理解しよう",
            "child": [
              "主キーについて学ぼう",
              "リレーションの種類について学ぼう",
              "正規化の基本について学ぼう",
              "図書館システムのデータベース設計に挑戦してみよう"
            ]
          },
          {
            "title": "MySQLの基本を理解しよう",
            "child": [
              "MySQLをインストールしよう",
              "データベースとテーブルを管理してみよう",
              "MySQLのデータ型について学ぼう",
              "制約を使ってデータの整合性を保とう",
              "MySQLのインポートとエクスポートをしてみよう",
              "COMMITとROLLBACKを使用してトランザクションを管理しよう",
              "バックアップとリストアを試してみよう",
              "インデックスを使用してデータ取得をすばやく行おう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "web-application-frameworks",
    "title": "Webアプリケーションフレームワーク",
    "subTitle": "フレームワークを使用して効率よく開発しよう",
    "description": "実際のWebアプリケーション開発ではフレームワークを使うのが一般的です。フレームワークの仕組みを理解して、Webアプリケーションを形にしてみましょう！",
    "thumbnail": "../images/skills/web-application-frameworks/thumbnail.png",
    "overview": "フレームワークとは、効率的にアプリケーション開発を行うための枠組みです。Webアプリケーションフレームワークはサーバーサイド言語ごとにいくつかの種類があり、例えばRubyのフレームワークなら<span data-type='search'>Ruby on Rails</span><span data-type='search'>Sinatra</span>などがあります。<br><br>現在のWebアプリケーションフレームワークの多くは<span data-type='term'>MVCモデル</span>に従って作られています。<br><br>MVCモデルとは、アプリケーションを<span data-type='term'>Model</span><span data-type='term'>View</span><span data-type='term'>Controller</span>といわれる各機能ごとに分類して作成するプログラミングモデルです。Modelにはアプリケーションで扱うデータや<span data-type='term'>ビジネスロジック</span>と呼ばれる処理を、Viewにはフロントエンドの表示の為の処理を、Controllerにはユーザーからの命令などを分析してModelやViewの処理を橋渡しをする処理をそれぞれ記載します。MVCモデルのWebアプリケーションフレームワークは、MVCモデルの概念に従ってアプリケーションの全体の処理の流れを制御し、開発者にテンプレートや機能を提供します。<br><br>開発者はフレームワークのルールや用意されたテンプレートを使用することで、アプリケーション開発をスムーズに進めることができます。",
    "image": "../images/skills/web-application-frameworks/illustration.svg",
    "purpose": "フレームワークを取り入れることで手軽にWebアプリケーションを形にすることができるようになります。<br><br>世の中のWebアプリケーションの多くはフレームワークを使って作られています。本格的なWeb開発をする場合、フレームワークの知識は必須でしょう。<br><br>フレームワークを使えばテンプレートに沿ってコーディングを行うことができます。またフォルダ構成などについてもフレームワークが用意したものが使えるため、迷うことなく正しく分割してプログラムが書けるようになります。<br><br>フレームワークを利用して開発を進めて、Webアプリケーションの基本的な動作や仕組みについて学びましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "Ruby on Railsを使ってみよう",
            "child": [
              "Webページを表示してみよう",
              "ビューについて理解しよう",
              "コントローラーについて理解しよう",
              "ルーティングについて理解しよう",
              "データベースを利用しよう",
              "モデルについて理解しよう"
            ]
          },
          {
            "title": "SNSアプリを作ってみよう",
            "child": [
              "画像アップロード機能を作ってみよう",
              "ログイン機能を作ってみよう",
              "いいね機能を作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "図書館管理アプリを作ってみよう",
            "child": [
              "Railsをインストールしよう",
              "MySQLと接続してみよう",
              "本の貸出機能を作ってみよう",
              "deviceを使ってログイン機能を作ってみよう",
              "omniauthを使ってGitHubログイン機能を作ってみよう",
              "Active Storageを使ってS3に画像をアップロードしよう",
              "herokuに図書館管理アプリをデプロイしてみよう"
            ]
          },
          {
            "title": "Webアプリケーションの基本を理解しよう",
            "child": [
              "MVCについて理解しよう",
              "セッション管理と認証・認可の基本を知ろう",
              "ORMとActive Recordの基本を学ぼう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "web-api",
    "title": "Web API",
    "subTitle": "公開されたAPIの機能を取り入れ、作れる幅を広げよう",
    "description": "Web APIの仕組みを使えば、公開されている機能やデータをアプリケーションで利用することができます。Web APIを積極的に活用してさまざまな機能を取り入れてみましょう。",
    "thumbnail": "../images/skills/web-api/thumbnail.png",
    "overview": "APIとはApplication Programming Interfaceの略で、アプリケーションの個々の機能を分離して使用するための取り決めのことです。<br><br>Web APIは、HTTPプロトコルを利用してインターネット経由で呼び出せるAPIです。公開されたWeb APIを通して、機能やデータを他のシステムから利用することができます。<br><br>利用する際は、その機能とリクエストやレスポンスの形式が分かれば、API内部の詳しい処理形式を知る必要がありません。<br><br>HTTPプロトコルを利用するため、Web APIへのアクセスには<span data-type='term'>エンドポイント</span>と呼ばれるURLによって指定されることになります。<br><br>機能やリクエスト・レスポンスの形式はWeb API提供者が用意しているドキュメントを参考にします。データのレスポンス形式はHTMLではなくプログラムが操作しやすい<span data-type='term'>JSON形式</span>などで返ってくるのが一般的です。<br><br>近年多くのWeb APIが公開されており、それらを使ったWebアプリケーションがたくさん作られています。",
    "image": "../images/skills/web-api/illustration.svg",
    "purpose": "既に公開されたWeb APIサービスがあれば、それを利用することでアプリケーションのオリジナル機能開発に注力できます。<br><br>これまでは、ログイン機能やメール送信機能などアプリケーションのさまざまな機能を独自に用意する必要がありましたが、Web APIを利用することでこれらの機能を簡単に自分のWebアプリケーションに取り入れることができるようになりました。<br><br>他にも現在では、Web APIを利用してモダンなユーザーインタフェースなどを実現しているWebサイトが多くあります。たとえば、地図表示部分では非同期にWeb APIを呼び出す<span data-type='term'>Ajax</span>と言われる方式を使うことで、スムーズな操作を可能にしています。<br><br>公開されているAPIを積極的に活用してさまざまなWebアプリケーションを効率的に開発しましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "Web APIを使ってみよう",
            "child": [
              "Web APIの仕組みを理解しよう",
              "Ajaxを使ってWeb APIにアクセスしてみよう",
              "JSONを扱えるようになろう",
              "Ajaxで取得したデータをWebページに表示しよう",
              "net/httpを使ってRubyからWeb APIにアクセスしてみよう",
              "Twitter APIを使って最新のツイートをWebアプリに表示してみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "図書館管理アプリをWeb API化してみよう",
            "child": [
              "RESTの考え方を知ろう",
              "書籍一覧のJSONを返すAPIを作ってみよう",
              "書籍追加のAPIを作ってみよう",
              "ログイン機能のAPIを作ってみよう",
              "本の貸出機能のAPIを作って貸出フォームから呼び出してみよう　"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "development-flow",
    "title": "開発フロー",
    "subTitle": "実際の開発現場をイメージできるようになろう",
    "description": "チーム開発では、開発手順を共有して協力して作業を進める必要があります。複数名による本格的なアプリケーションを開発できるように、チーム開発の基礎となる開発フローについて学びましょう。",
    "thumbnail": "../images/skills/development-flow/thumbnail.png",
    "overview": "開発フローとはWebアプリケーション開発の作業をどのような流れで進めるかというものです。開発フローの主なものには設計、実装、テストの大きな作業フェーズがあります。<br><br>設計フェーズではこれから作るWebアプリケーションを実現するための方法をまとめ、開発フェーズで実際にアプリケーションを作成し、完成したアプリケーションの動きをテストフェーズで確認します。<br><br>開発フローにはさまざまな手法や考え方があり、代表的な手法としては、<span data-type='term'>ウォータフォール型開発</span>と<span data-type='term'>アジャイル型開発</span>があります。どちらも設計・実装・テストを行う点では同じですが、ウォーターフォール型はアプリケーション単位で設計からテストを順番に進め、アジャイル型は機能単位で設計からテストを繰り返しながら進めるのが特徴です。<br><br>チーム開発では作業者が複数人いるため、開発フローの中で発生するタスクやスケジュールを管理して役割を分担する必要があります。また、作業者ごとに品質に違いがでないように、レビューフローやコーディング規約などを決め、プロジェクトの効率化と品質の向上に取り組みます。",
    "image": "../images/skills/development-flow/illustration.svg",
    "purpose": "開発フローについて学ぶことで、チーム開発を効率的に進められるようになります。<br><br>もし開発フローを知らずにチームで開発を進めれば、作業の段取りなどが合わずに協力して作業することが難しくなるでしょう。また、各メンバーのタスクやその中で発生した問題などが共有できなければフォローすることも難しくなります。<br><br>開発に着手する前に開発フローとスケジュールについてメンバー間で共有することで、メンバー全員で認識を合わせながら作業を進められるようになります。<br><br>開発フローやチーム開発における管理の方法とルール決めについて学んで、チーム開発にチャレンジするための準備をしましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "アジャイル開発の基本について理解しよう",
            "child": [
              "アジャイルの目的について知ろう",
              "スクラムの基本について理解しよう",
              "タスクボードで管理しよう",
              "バックログの優先度を決めよう",
              "ストーリーポイントで見積もろう",
              "スプリントを実行しよう",
              "レトロスペクティブで振り返ろう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "チーム開発に参加してみよう",
            "child": [
              "バックログから取り組むイシューを選択しよう",
              "イシューの見積もりをしよう",
              "イシューをタスクに分解しよう",
              "イシューに取り組もう",
              "プルリクエストを上げよう",
              "コードのレビューを修正しよう",
              "振り返りをしよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "design-specification",
    "title": "仕様と設計",
    "subTitle": "どんなものをどうやって作るのかを考えよう",
    "description": "どんなアプリケーションをどのように作るかが明確になっていないと、チームで開発を進めるときに迷ってしまいます。アプリケーション開発を始めるまえに、仕様と設計を決めて開発の目標と具体的な実現方法を定めて開発を進めましょう。",
    "thumbnail": "../images/skills/design-specification/thumbnail.png",
    "overview": "アプリケーション開発の現場では、開発を始める前に仕様と設計を決めます。<br><br>仕様とはアプリケーションで解決したい課題や実現したいことを洗い出してまとめたものです。設計とは仕様を実現するための具体的な方法として、「画面レイアウト」「機能一覧」「データベースの構成」などをまとめたものです。<br><br>例えば、あるサークル内での写真を共有するWebアプリケーションの開発について、仕様と設計を考えてみましょう。<br><br>その場合の第一に考えられる仕様は、「サークル会員が写真を投稿・閲覧できること」です。また、設計は「投稿画面や一覧画面のレイアウト」「写真投稿や一覧取得機能」「写真テーブルの構成」などです。<br><br>アプリケーションの作成作業に入る前に、仕様と設計を決めることで手戻りを少なく進めることができます。開発の途中で一度決めた仕様や設計を変更すると、作業を巻き戻らなければならず時間も作業も余計にかかるため、仕様と設計の作業は重要です。",
    "image": "../images/skills/design-specification/illustration.svg",
    "purpose": "仕様を決めて設計をした上でアプリケーション開発に着手することで、開発作業の初期段階からどんなアプリケーションをユーザーに届けたいか明確にイメージできるでしょう。<br><br>チームで開発している場合はメンバー間で作るものの完成形を共有することで、迷わずに作業を進めることができます。<br><br>仕様が定まっていない状態で開発を進めると、思い描いたユーザー意向や目的に合わないアプリケーションであったり、仕様を決めたが設計せずに開発を進めると手戻りが大変多くなる恐れがあります。<br><br>特にチームで開発する場合、メンバー全員がしっかり認識を合わせないと担当者の異なる機能や画面の繋がりが悪かったり、そもそも目的のアプリケーションが完成しないことにもなり兼ねません。<br><br>チームで作るものを明確にしスムーズに開発するために、仕様として決めるべきことや、何を設計すれば良いのかについて学んでみましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "Webページの仕様と設計を作ってみよう",
            "child": [
              "ポートフォリオサイトに必要な要素や機能を決めよう",
              "ページ構成を決めよう",
              "各ページのレイアウトを決めよう",
              "Figmaでワイヤーフレームを作ってみよう"
            ]
          },
          {
            "title": "easy title2",
            "child": ["easy child3", "easy child4"]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "ソフトウェア設計の基本を理解しよう",
            "child": [
              "設計の目的について学ぼう",
              "SOLID原則について学ぼう",
              "コンポーネントの原則について学ぼう",
              "アーキテクチャについて学ぼう",
              "写真共有アプリのクラス図を作ってみよう"
            ]
          },
          {
            "title": "データベース設計の基本を理解しよう",
            "child": [
              "論理設計と物理設計について学ぼう",
              "論理設計と正規化について学ぼう",
              "写真共有アプリのER図を作ってみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "git",
    "title": "Git",
    "subTitle": "バージョン管理システムを使ってチームでコードを共有しよう",
    "description": "仕様と設計で作りたいものを明確にしたら実際にチームで開発を始めます。チーム開発で必要なコードを共有する為のツールGitについて学んでみましょう。",
    "thumbnail": "../images/skills/git/thumbnail.png",
    "overview": "Gitはプログラムコードなどの変更履歴を管理する<span data-type='term'>バージョン管理システム</span>です。バージョン管理システムには他にもSubversionなどがありますが、ここでは現在もっとも一般的なGitについて説明します。<br><br>Gitでコード管理をすることで、問題が発生した時にコードを誰が最後に修正したかや、問題点が発生したのはどのタイミングかを確認することができるようになります。その結果、過去の変更履歴を元にファイルやプロジェクトを問題が発生する前の状態に戻したり正しく修正できます。<br><br>Gitにおけるコード管理は<span data-type='term'>リモートリポジトリ</span>と呼ばれるクラウド上のコードと、自分のPC上の<span data-type='term'>ローカルリポジトリ</span>の間で行われます。開発者はリモートリポジトリをメンバーで共有して、個々の開発者はローカルリポジトリで変更作業を行います。<br><br>Gitは、複数名の開発者が同時にコードの作成や修正を行える<span data-type='term'>ブランチ</span>という機能を有しています。開発者は自分のローカルリポジトリにブランチ機能を使い、作業単位にコード編集を行うための環境を作成することができます。また個々の開発者の編集したコードは、それぞれ<span data-type='term'>マージ</span>機能によりリモートリポジトリ上のマスターとなるコードに集約することができます。<br><br>尚、その時<span data-type='term'>コンフリクト</span>と呼ばれる編集したコードの行が重なる問題が発生する場合がありますが、Gitの機能を使ってコンフリクトに正しく対応することが可能になっています。",
    "image": "../images/skills/git/illustration.svg",
    "purpose": "開発現場ではコードのバージョン管理をするためにGitは必須のスキルです。<br><br>複数の人間がプログラムファイルを同時に編集すると、最新のファイルがどれか分からなくなるかもしれません。しかしGitを使うことで同時編集を可能にします。<br><br>またGitを使えば、新しいメンバーが開発チームに加わったとき、変更履歴から過去のコードの経緯を確認できるためスムーズに作業をはじめられます。また、メンバー同士で互いの作業状況を把握できるため他のメンバーのフォローが容易になります。<br><br>GitHubなどのバージョン管理サービスを利用すればコードのレビューなども簡単に行うことができるようになります。<br><br>チーム開発をスムーズに進めるために必須のスキルであるGitについて学んでみましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "Gitを使ってみよう",
            "child": ["ファイルを共有してみよう", "変更履歴を把握しよう"]
          },
          {
            "title": "GitHubを使ってみよう",
            "child": [
              "Gitのセットアップをしよう",
              "GitHubアカウントを作成しよう",
              "リモートリポジトリを作成しよう",
              "リモートリポジトリにプッシュしてみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "共同開発できるようになろう",
            "child": [
              "イシュー機能を使ってみよう",
              "ブランチを作成してみよう",
              "プルリクエストを送ってみよう"
            ]
          },
          {
            "title": "Gitのテクニックを身に着けよう",
            "child": [
              "コンフリクトに対応してみよう",
              "誤った変更や操作を取り消そう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "testing",
    "title": "テスト",
    "subTitle": "不具合の少ない高品質なコードにしよう",
    "description": "アプリケーションの安定稼働には、不具合の少ない高品質なプログラムコードが不可欠です。コードを作成したら、つどその部分のテストを実施して行きましょう。また、コードを修正した場合にも必ずテストを実施する習慣を身に付けて、チームで品質の高いアプリケーションを開発できるようになりましょう。",
    "thumbnail": "../images/skills/testing/thumbnail.png",
    "overview": "テストとは「期待する動き」と「実際の動き」を比較してアプリケーションが想定どおり動くことを確認するプロセスです。個々のテストは、<span data-type='term'>テストケース</span>を作成して動作結果を判定します。<br><br>テストは開発フェーズに依ってテストの範囲や目的が異なります。通常は大きく分けて3つの段階（<span data-type='term'>単体テスト</span>、<span data-type='term'>結合テスト</span>、<span data-type='term'>システムテスト</span>）で行います。単体テストはメソッド単位、結合テストは機能単位、システムテストはユーザの利用を想定したアプリケーション全体で動作を確認します。<br><br>特に単体テストはアプリケーションを最小単位でテストするため、全体のテストの土台になります。単体テストのタイミングでバグを発見して修正することがアプリケーションの品質に大きな影響を与えます。また、テストは一度行うだけでなく、コードの変更に合わせて継続して繰り返し行うことが重要です。<br><br>テストの実施は、具体的なテスト内容を示すテストケースを定めてそれに沿って行います。テストの実施方法には、手動で行う<span data-type='term'>手動テスト</span>と自動化ツールなどにテストケースを設定し行う<span data-type='term'>自動テスト</span>の２つの方法があります。<br><br>近年アプリケーションの規模が大きく変更も頻繁に発生するので、各フェーズのテストには自動化ツールやフレームワークが活用されています。",
    "image": "../images/skills/testing/illustration.svg",
    "purpose": "それぞれの開発者が、単体テストのレベルからテストを実施していくことで安心して自分たちのアプリケーション開発を進めることができます。<br><br>チーム開発では作業者によってコードの品質が異なったり、それぞれのコードが影響してバグが生まれることがあります。また、開発を続ける中でコードの変更によって以前まで動いていたコードに不具合が発生する場合もあります。<br><br>テストを実施せずに開発を進めれば不具合を見落としてしまう可能性があり、不具合の原因を見つけることも困難です。このような状況では既存のコードに変更を加えることも難しく、開発のスピードが落ちてしまいます。<br><br>テストを継続的に実施して、アプリケーションが正しく動作していることを常に確認できるようになりましょう。<br><br>また適切なテストケースの作成方法について学ぶことで、開発作業の段階でどのような点に注意すれば不具合を少なくできるか明確にすることができます。<br><br>アプリケーションの開発現場では機能追加や変更のたびにテストを行います。自動テストについて是非学んでおきましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "RSpecでユニットテストを作ってみよう",
            "child": [
              "describe / it / expect を使ってみよう",
              "複数のテストを作ってみよう",
              "describeでテストをグループ化してみよう",
              "contextで条件別にグループ化してみよう",
              "beforeで共通の前準備を作ってみよう",
              "失敗したテストを修正してみよう",
              "電卓プログラムのテストを書いてみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "TDDの基本を理解しよう",
            "child": [
              "仕様のTODOリストを作ってみよう",
              "テストコードを書いて失敗を確認しよう",
              "仮実装を追加してテストを成功にしよう",
              "リファクタリングを行って重複を除去しよう"
            ]
          },
          {
            "title": "RailsでRSpecを使ってみよう",
            "child": [
              "RSpecをセットアップしてみよう",
              "モデルスペックを作成してみよう",
              "テストデータを作成してみよう",
              "図書館管理アプリのテストを書いてみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "refactoring",
    "title": "リファクタリング",
    "subTitle": "開発を進めやすいコードに改良しよう",
    "description": "継続的に機能追加を行うためには、開発を進めていく中で複雑になった設計やコードを随時改善していく必要があります。リファクタリングをして、コードを読みやすく、修正しやすく、バグも発見しやすい状態を維持しましょう。",
    "thumbnail": "../images/skills/refactoring/thumbnail.png",
    "overview": "リファクタリングとは、プログラムの機能を保ちながら、理解や修正がし易いプログラムコードに改良することです。<br><br>リファクタリングは、重複したコードを整理したり変数や関数の命名を分かりやすくする事でプログラミングの作りを改善します。<br><br>リファクタリングを実施する場合は、本来の機能を壊してしまわない様に、自動テストなどを準備して都度確認しながら特定の範囲から徐々に広げて実施して行くと良いでしょう。<br><br>リファクタリングを行うタイミングは、専用に作業期間を設ける場合もありますが、通常の開発フロー中の機能追加やバグ修正の最中で行う場合など様々です。いつ行うにしても、現状を把握するための調査や分析を行い、どこまでリファクタリングを行うか目標を定める必要があるでしょう。<br><br>リファクタリングの目的や方法と実施範囲を確認し、チーム内で相談しながら進めましょう。",
    "image": "../images/skills/refactoring/illustration.svg",
    "purpose": "見通しの良いプログラムを書く技術は、特にチーム開発においては重要なスキルです。<br><br>初期のプロダクトの開発や仕様変更の激しい開発現場では、とりあえず動くものを作る事が優先されプログラムの読み易さなどは後回しにされることがあります。<br><br>リファクタリングを行わずにこれを繰り返すと、コードの品質が徐々に下がってきます。この様なコードには機能の重複などが放置されているため理解が難しく、既存のコードに影響を与えずに機能を追加する事が難しくなります。<br><br>リファクタリングを定期的に行う事で、プログラムを読みやすく、修正しやすく、バグを発見しやすくなるため、開発コストの削減や長期的な開発速度の向上につながります。<br><br>改善したいコードがあっても、リリースされているコードに手を付けるのが怖く、リファクタリングできない開発現場がよくあります。リファクタリング手法についてきちんと学び、恐れずにプログラムの改善に取り組めるようになりましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "簡単なリファクタリングを体験してみよう",
            "child": [
              "わかりやすい名前を付けよう",
              "コードを整形しよう",
              "コードにコメントをしよう",
              "ループとロジックをシンプルにしよう",
              "汎用コードを抽出して関数にしよう",
              "FizzBuzzプログラムをリファクタリングしてみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "リファクタリングの基本を理解しよう",
            "child": [
              "リファクタリングの原則について学ぼう",
              "コードの不吉な臭いに気づけるようになろう",
              "モジュールを分離しよう",
              "複数の関数をクラスに抽出しよう",
              "ポリモーフィズムでコードを汎用化しよう",
              "図書館管理アプリをリファクタリングしよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "server-configuration",
    "title": "サーバー構成",
    "subTitle": "アプリケーションの公開に向けてサーバーの準備をしよう",
    "description": "ユーザーに使ってもらう本格的なプロダクトを公開するには、サーバーにアプリケーションを配置してアクセスできるようにするだけでなく、サーバーのスペックや台数などの構成を決める必要があります。プロダクトの公開に向けて、サーバーを準備できるようになりましょう。",
    "thumbnail": "../images/skills/server-configuration/thumbnail.png",
    "overview": "サーバーとはユーザーからの要求に対して、Webページを返したりさまざまな機能を提供するネットワークでつながったコンピューターのことです。<br><br>サーバーを用意するには役割に応じた<span data-type='term'>サーバーソフトウェア</span>をインストールします。<br>サーバーソフトウェアにはWebサーバーの<span data-type='search'>Apache</span>や<span data-type='search'>Nginx</span>、アプリケーションサーバーの<span data-type='search'>Puma</span>や<span data-type='search'>Tomcat</span>、データベースサーバーの<span data-type='search'>MySQL</span>や<span data-type='search'>PostgreSQL</span>などがあります。<br><br>ひとつのサーバーに複数のサーバーソフトウェアを全て導入することもできますが、障害が発生しても影響範囲を限定できるなどの理由により1台のサーバーに専用のサーバーソフトウェアを導入する場合が基本です。<br><br>Webサーバー、アプリケーションサーバー、データベースサーバーでアプリケーションを提供する構成を<span data-type='term'>Web3層構成</span>と呼びます。<br><br>ユーザーがWebアプリケーションにアクセスしたとき、サーバーではどのような処理が行われているか見てみましょう。<br><br>例えば、トップページなどの静的ページを表示するには、Webサーバー上に用意された固定のHTMLファイルをユーザーへ返します。一方ログイン後のユーザーごとに表示内容が異なるページは、Webサーバーを経由してアプリケーションサーバーがデータベースサーバーからデータを取得して計算を行い、その結果をユーザーへ返します。<br><br>このように3つのサーバーが連携してWebアプリケーションが動きます。",
    "image": "../images/skills/server-configuration/illustration.svg",
    "purpose": "Webアプリケーションの公開のために必要となるサーバーの種類やスペック、調達方法を決められるようになりましょう。<br><br>WebアプリケーションはWeb3層構成の上で運用する形が一般的ですが、システムの規模や目的によっては運用管理サーバーやDNSサーバー、バックアップ専用サーバーなども組み合わせて構成する必要があります。どういった役割を持つサーバーが必要かは、全体の仕様に基づく機能設計後に決定します。<br><br>各サーバーのスペックや台数を決めるためには、想定されるユーザー数や必要となる処理能力をある程度試算する必要があります。基本的なスペックの基準となる<span data-type='term'>メモリ</span>や<span data-type='term'>CPU</span>、<span data-type='term'>ストレージ</span>についても押さえておきましょう。<br><br>それぞれのサーバーの種類とその役割を良く理解し、アプリケーションの公開に向けて必要なサーバー構成を実現できるようになりましょう。",
    "sceneId": "releasing-your-application",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "コンピュータハードウェアの構成と動作原理について学ぼう",
            "child": [
              "CPU/MPU/GPU、オペランド、クロックなどプロセッサについて学ぼう",
              "RAM/ROM、キャッシュなどのメモリの種類と特徴について学ぼう"
            ]
          },
          {
            "title": "入出力インタフェースについて学ぼう",
            "child": [
              "DMA、チャネル、ATAなどについて学ぼう",
              "USBについて学ぼう",
              "HDMIについて学ぼう",
              "Bluetoothについて学ぼう"
            ]
          },
          {
            "title": "システム処理形態について学ぼう",
            "child": [
              "集中処理、分散処理について学ぼう",
              "グリッド、クラスタリングについて学ぼう",
              "クライアントサーバー、Web３層構造について学ぼう"
            ]
          },
          {
            "title": "OSの３つの基本機能について学ぼう",
            "child": [
              "メモリ管理方式について学ぼう",
              "タスク管理方式について学ぼう",
              "データ管理方式について学ぼう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "サーバーソフトウェアをインストールしよう",
            "child": [
              "Webサーバーをインストール・設定しよう",
              "アプリケーションサーバーをインストール・設定しよう",
              "DBサーバーをインストール・設定しよう",
              "Web３層構造の連動を確認しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "networking",
    "title": "ネットワーク",
    "subTitle": "サービス公開に必要な通信の仕組みを知ろう",
    "description": "役割に応じて複数のサーバーを用意したあとは、サーバー同士を連携させ実際にユーザーからアクセスできるように設定する必要があります。HTTPやDNSの知識だけでなくどういう仕組みでサーバーが通信しているのかを学んで、ユーザーの利用に耐えられる環境を用意しましょう！",
    "thumbnail": "../images/skills/networking/thumbnail.png",
    "overview": "ネットワークとは、コンピュータなどの機器が相互に接続しデータ通信が行える状態にあるものをいいます。インターネットもネットワークの一形態で、プロトコルと言われる多重構造の通信技術を基本としています。<br><br>インターネット上の通信は、<span data-type='term'>TCP/IPプロトコル</span>を基にやりとりされます。IPアドレスには、インターネット上で住所の役割を果たす<span data-type='term'>グローバルIPアドレス</span>と内部での通信用の<span data-type='term'>ローカルIPアドレス</span>があります。<br><br>インターネット上のWebアプリケーションは、少なくとも一つのグローバルIPアドレスを持っており、システム内部ではサーバーにそれぞれローカルIPアドレスが割り当てられ相互に通信を行います。<br><br>Webアプリケーションを構成するネットワークは、ユーザーからアクセスできる<a href='/scenes/web-basics/skills/internet' target='_blank' rel='noopener noreferrer'>インターネット</a>に開かれた部分と、内部に閉じた部分<span data-type='term'>LAN（ローカルエリアネットワーク ）</span>に分けて管理することが重要です。そうするすることで、不要な外部からのアクセス経路を遮断できセキュリティリスクを減らすことができるからです。<br><br>Webサーバーはインターネットへ繋げてユーザからのアクセスを可能にし、アプリケーションサーバーやデータベースサーバーはユーザーから直接アクセスできないサーバー同士の通信に限定するなど「ネットワークポート」の設定が必要となります。",
    "image": "../images/skills/networking/illustration.svg",
    "purpose": "Webアプリケーションをユーザーが使えるようにするために、データのやり取りを行うクライアントやサーバー間で通信が行えるようなネットワークの設定が必要です。<br><br>例えばグローバルIPアドレスとローカルIPアドレスの仕組みや<span data-type='term'>NAT変換</span>、プロトコルと<span data-type='term'>ポート番号</span>の関係性、<span data-type='term'>ルーティング</span>の仕組みなどを理解することでサーバーなどの機器に対して適切なネットワークの設定を行うことができます。<br><br>プロトコルなどデータ通信の仕組みをはじめとするネットワークに関する知識があれば自信をもってネットワークの設定ができるでしょう。<br><br>本格的なサービスを公開するために、ネットワークについて学びましょう。",
    "sceneId": "releasing-your-application",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "ネットワークアドレスとその計算方法について学ぼう",
            "child": [
              "10進数↔︎2進数変換について学ぼう",
              "文字コードについて学ぼう",
              "サブネットマスクについて学ぼう",
              "ネットワーク部とホスト部について学ぼう",
              "ブロードキャスト、クラス、グローバルアドレスについて学ぼう",
              "Google検索をした場合の通信経路を、関連する機器のIPアドレスを調べてdraw.ioでネットワーク図を描いてみよう、また自分のローカルネットワークには最大で何台のPCが繋げられるか調べよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "プロトコルスイーツと各層プロトコルについて学ぼう",
            "child": [
              "OSI参照モデルとインターネット・プロトコル・スイートについて学ぼう",
              "各層プロトコルとパケットの送受信の仕組について学ぼう",
              "ルーターとハブについて学ぼう",
              "イーサーネットとPPPoE、IPoEについて学ぼう",
              "ファイアウォールについて学ぼう",
              "非武装地帯 (DMZ)について学ぼう",
              "キャッシュサーバーとプロキシについて学ぼう",
              "コンテンツ配信ネットワーク（CDN）について学ぼう",
              "Google検索をした場合どの様な手順で通信がなされるか各種ネットワークコマンドで調べて、draw.ioでプロトコルの層を意識した通信フロー図を描いてみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "cloud-services",
    "title": "クラウドサービス",
    "subTitle": "クラウド環境にプロダクトを公開しよう",
    "description": "サーバーなどを含めたプロダクトの公開に必要な環境はクラウドサービスを利用することで、安価で簡単に用意することができます。クラウドサービスを利用してプロダクトを公開しましょう！",
    "thumbnail": "../images/skills/cloud-services/thumbnail.png",
    "overview": "クラウドサービスとはネットワークを経由してサーバーやソフトウェアなどを利用できるサービスの総称です。その中でも自分たちの開発したWebアプリケーションを公開する為のサービスとしては、Amazonが提供しているAWSやMicrosoftのAzure、GoogleのGCPなどがあります。<br><br>クラウドサービスを利用すればサーバーの購入や設置、ネットワークの接続などのインフラ構築にかかる作業が不要になるためWebアプリケーションの公開にかかる時間を短縮できます。<br>またサービスリリース後も、CPUやメモリが不足した際のリソース追加もすぐに行え、サーバーなどの機器が故障した際の修理や買い替えも不要となります。<br><br>クラウドサービスでのサーバーやネットワークの設定は、AWSなどのクラウドサービス事業者が提供している管理画面を使って行います。これらのクラウドサービスは公開に必要なサーバーだけでなく、ストレージやデータベースなどのさまざまなサービスを提供しています。<br><br>クラウドサービス上での管理画面での設定には、サーバーやネットワークの基本的な知識があるのが前提となります。",
    "image": "../images/skills/cloud-services/illustration.svg",
    "purpose": "クラウドサービスが普及する以前、本格的なサービスを提供するためにはサーバーやネットワーク機器を購入する必要がありましたが、初期費用以外にもメンテナンスなどの維持費用がかかる点が課題でした。<br><br>サービス提供側としてはこれらの諸費用を抑えつつ、ユーザー数の増加など状況に合わせて素早くサーバーリソースを拡張できるのが理想です。クラウドサービスを使えば自分でサーバーを用意する必要がなく最小構成のサーバーでサービスを始められるため費用を抑えられます。またユーザー数が増えてサーバーリソースの拡張が必要となった時にはすぐに対応できます。<br><br>近年では、クラウドサービスを使ってプロダクトを公開することが主流となっていす。<br><br>クラウドサービスを使って、ユーザーの利用に耐えられる環境で本格的なWebアプリケーションを公開しましょう。",
    "sceneId": "releasing-your-application",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "AWSの基本概念を学ぼう（クラウドの基本的な知識と課題）",
            "child": [
              "リージョン、アベイラビリティーゾーンについて学ぼう",
              "VPC (Virtual Private Cloud)とサブネットについて学ぼう",
              "インターネットゲートウェイ（Internet Gateway）とNATについて学ぼう",
              "SSHと踏み台（Bastion）サーバーについて学ぼう",
              "セキュリティグループと（ユーザー／リソース）ポリシーについて学ぼう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "AWSにWebサーバーを構築しよう（応用的な知識と課題（TODO:クラウドサービス上でWebアプリケーションを動かす為の、サーバーとネットワーク設定課題  ））",
            "child": [
              "AWSのアカウントを作ろう",
              "AMI（Amazon Machine Image）を選択しEC2を作成しよう",
              "インスタンスタイプの選択してストレージを追加しよう",
              "セキュリティグループの設定しよう",
              "ネットワークインタフェースを設定しよう",
              "接続用キーペアを作成し、サーバーインスタンスを起動しよう",
              "SSHでログインしよう",
              "nginxをインストールし起動しよう",
              "ファイアウォールを設定してポート：80番を開けよう",
              "Elastic IPアドレスを設定しよう",
              "ブラウザから指定されたグローバルIPアドレスで、nginxのトップページが公開されているか確認しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "web-security",
    "title": "Webセキュリティ",
    "subTitle": "安全なサービスを届けよう",
    "description": "脆弱性のあるWebアプリケーションをインターネット上で公開すると、攻撃の対象となりユーザー情報の流出などの恐れがあります。安心してユーザーに使ってもらい、自信をもってプロダクトを公開するためにWebアプリケーションのセキュリティについて学んでおきましょう。",
    "thumbnail": "../images/skills/web-security/thumbnail.png",
    "overview": "Webアプリケーションはインターネットを通して世界中の人に届けることができますが、セキュリティ対策を行わずにサービスをリリースすると、データの漏洩などのサービスの継続性に関わる問題を招く恐れがあります。このような問題を招く可能性のあるアプリケーションの構造的な欠陥を<span data-type='term'>脆弱性</span>や<span data-type='term'>セキュリティバグ</span>と呼びます。<br><br>Webアプリケーションに対する攻撃には<span data-type='term'>SQLインジェクション</span>や<span data-type='term'>ディレクトリ・トラバーサル</span>などさまざまな手法があります。Webアプリケーションの開発において、脆弱性の潜む部分を理解し安全性に配慮して開発することでアプリケーションへの攻撃を防ぐことができます。<br><br>また、Webアプリケーションだけでなくサーバーやネットワークなどに関わる脆弱性についての対応も重要です。例えばサーバーにおいてはOS等のアップデートや、ログインアカウントの適切な運用などを行いサーバーへの不正アクセスを防ぎます。また、ネットワークにおける対策は、通信データの暗号化や<span data-type='term'>ファイアーウォール</span>の導入などが挙げられます。<br><br>Webセキュリティ対策をすることで、Webアプリケーションを公開するリスクを最小限に抑えることができます。",
    "image": "../images/skills/web-security/illustration.svg",
    "purpose": "アプリケーションをユーザーが安心して使い続けられるようにする事は、開発者にとって重要な責務です。<br><br>もしセキュリティ対策をせずWebアプリケーションを公開してしまうと、個人情報漏洩によりユーザーに被害が及ぶリスクがあります。<br><br>ユーザーが安心して使えるWebアプリケーションを公開することは、ユーザーからの信頼を得ることに繋がります。<br><br>長く安全に利用されるWebアプリケーションを作るために、セキュリティ対策について学びましょう。",
    "sceneId": "releasing-your-application",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "アプリケーションのセキュリティ対策を体験してみよう",
            "child": [
              "パスワードをハッシュ化しよう",
              "バリデーションを追加しよう",
              "公開したサイトをSSL/TLSに対応しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "Webセキュリティの基本を理解しよう",
            "child": [
              "HTTPとセッション管理について知ろう",
              "受動攻撃と同一オリジンポリシーについて知ろう",
              "CORSについて知ろう",
              "クロスサイトスクリプティングについて知ろう",
              "SQLインジェクションについて知ろう",
              "CSRF（クロスサイト・リクエスト・フォージェリ）について知ろう"
            ]
          },
          {
            "title": "代表的なセキュリティ機能を理解しよう",
            "child": [
              "認証のセキュリティの基本を理解しよう",
              "アカウント管理のセキュリティの基本を理解しよう",
              "認可のセキュリティの基本を理解しよう",
              "ログ出力のセキュリティの基本を理解しよう",
              "セキュリティ診断をしてみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "ci-cd",
    "title": "CI/CD",
    "subTitle": "ユーザーに最新のものを安定して届けよう",
    "description": "追加したい新しい機能や改善したい問題があったときに、素早く開発してプロダクトに取り込むことができれば継続的にプロダクトを届けることができます。CI/CDの仕組みを取り入れて、テストやビルド、デプロイなどの別々で行なっていた作業を自動化し継続的に行うことで開発の質とスピードを向上させましょう！",
    "thumbnail": "../images/skills/ci-cd/thumbnail.png",
    "overview": "CI/CDとは<span data-type='term'>Continuous Integration（継続的インテグレーション）</span>と<span data-type='term'>Continuous Delivery（継続的デリバリー）</span>の略称で、ソフトウェアの変更を常にテストして自動で本番環境にリリースできる環境で行う開発手法のことです。<br><br>サービス運用中に機能追加や修正を加える場合、小さなコード変更でも毎回テストからデプロイまで実行できるため、機能追加やバグ修正などを品質を保ちながら素早く進めることができます。<br><br>CI/CDを実現するには、専用のツールとGitHubなどのバージョン管理システムとを連携させることで環境を準備する事ができます。専用ツールはJenkinsやCircleCIなどが代表的です。CI/CDツールは、コードの変更を自動で検知し、開発者がコードを変更するとテストからデプロイまでの作業をツールが自動で行います。また、ビルドやテストが失敗するとアラートが出る事で、開発者は容易に修復するに取り掛かる事ができます。<br><br>CI/CDに採用される開発手法はアジャイルであり、CI/CDはアジャイルの一種とも言えます。",
    "image": "../images/skills/ci-cd/illustration.svg",
    "purpose": "CI/CDを取り入れる事で、開発者の生産性向上やアプリケーションの品質向上が期待できます。<br><br>CI/CDツールを使わなければ、コードの変更部分を一度にマージしてテストを行っていたためリリース後に不具合が発見されることも珍しくありませんでした。<br><br>CI/CDツールを使えばプログラムの変更のたびに自動でテスト・ビルド・デプロイが実行されるため、バグの特定やリリース後の障害発生確率を減らすことができます。<br><br>ユーザーからの改善要求に対して素早く対応しメンテナンスの時間を短くするため、CI/CDを学びましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "CI/CDを使ってみよう",
            "child": [
              "CircleCIの設定をしよう",
              "パイプラインを確認しよう",
              "config.ymlファイルを編集してみよう",
              "ワークフロー機能を使ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "CI/CDを実践しよう",
            "child": [
              "CI/CDの目的を理解しよう",
              "テストを組み込もう",
              "AWSにデプロイできるようにしよう",
              "通知をSlackに送ろう",
              "Lintをチェックしよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "data-analysis-platform",
    "title": "データ分析基盤",
    "subTitle": "プロダクトの状況を正確に把握しよう",
    "description": "どんな改善が必要か判断するためにはプロダクトの状況を正確に把握する必要があります。ユーザーの利用状況やシステムの稼働状況を収集し分析できるようになりましょう。",
    "thumbnail": "../images/skills/data-analysis-platform/thumbnail.png",
    "overview": "Webアプリケーションをリリースしたら、ユーザーのサービス利用状況やシステムの稼働状況を把握するための情報収集が大切です。<br><br>Webアプリケーションが稼働すると様々なデータが発生します。例えばサーバーリソースの使用率やアプリケーションの実行ログ、Webページを訪れたユーザーの動きに関する情報などです。これらのデータはログファイルやデータベースに蓄積されます。<br><br>データは単体ではそれぞれ独立した情報の集まりですが、目的に応じて必要なデータを抽出・可視化・分析することでシステムにおける問題の早期発見やユーザー体験の向上に役立てることができます。<br><br>例えばデータからリソース使用率が高いサーバーが判明した場合、ユーザー数の増加率と合わせて近い将来必要となる処理能力を試算することでリソース不足が発生する時期を予想することができます。またユーザーの滞在時間や訪問回数が極端に少ないページが存在する場合、そのページに問題がある可能性があります。<br><br>このようにデータを収集し分析することで、開発者はシステムに発生している様々な問題を知ることができます。",
    "image": "../images/skills/data-analysis-platform/illustration.svg",
    "purpose": "アプリケーションの抱える問題やその兆候を把握することで、次に何を改善すべきかが明確になります。<br><br>ユーザーの利用状況を把握できなければ、サービスを利用する中でユーザーが感じる不便さに気付けず、何を改善しどのような新機能を追加するべきかのヒントも得られません。最悪ユーザーがサービスの利用をやめてしまうことも考えられます。もし開発者がユーザー体験を悪化させている問題点を発見し解決できるようになれば、ユーザーにより良いサービスを届けられます。<br><br>また、障害の兆候を開発者が検知できなければシステム障害が発生してしまい、復旧までサービスの提供を止めることになりますが、データから障害の兆候を読み取ることができれば障害を未然に防げます。<br><br>システムの現在の状況を把握するためにデータの収集や分析を行い、障害に強くユーザーが使いやすいアプリケーションをユーザーに届けましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "データ分析の基本を理解しよう",
            "child": [
              "データ分析の構成要素を知ろう",
              "データ分析基盤の対象を知ろう",
              "ログデータの基礎を学ぼう",
              "ECアプリケーションのデータ分析基盤を考えてみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "データを収集してみよう",
            "child": [
              "CloudWatchを準備しよう",
              "メトリクスを確認しよう",
              "ダッシュボードを作成しよう",
              "アラームの設定をしよう",
              "概算請求額をモニタリングしてみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "performance",
    "title": "パフォーマンス",
    "subTitle": "ユーザー体験を向上させよう",
    "description": "プロダクトを改善するポイントはエラーやバグだけではありません。パフォーマンスに問題があると、Webページの読み込みや動作に時間がかかりユーザー体験の悪化につながってしまいます。パフォーマンスを改善してプロダクトを快適に使ってもらえるようにしましょう。",
    "thumbnail": "../images/skills/performance/thumbnail.png",
    "overview": "パフォーマンスとは、提供するWebアプリケーションが限られたシステムリソースを使って効率よく機能しているか、その結果ユーザがいつも快適に利用できているかを示すものです。<br><br>Webアプリケーションにおけるパフォーマンスの良し悪しは、ユーザーの様々な操作に対する応答速度で判断します。パフォーマンスに問題があると目的のページがなかなか表示されなかったり、ボタンを押しても反応が遅かったりユーザの体験は余り良いものとは言えません。それに対して、応答性能も良く表示速度も早いとユーザー体験は好ましいものとなるでしょう。<br><br>パフォーマンス低下の原因は、処理するデータ量の増加やそれに伴う空きメモリの不足、または効率の悪い計算処理など様々です。パフォーマンスを向上させるには、まず現在の状態を正しく知るための<span data-type='term'>計測</span>が必要です。計測方法には、開発者ツールのネットワーク監視やその他パフォーマンス診断ツールなどを使う方法や、プログラム中に計測用コードを埋め込む方法もあります。<br><br>いくつかの測定の結果、ある特定のページ機能エリアの応答時間が予め定めた目標値より大きかった場合、プログラムのどこかで処理が遅くなっていることが考えられます。この様なパフォーマンス低下に関わる主な箇所や原因を<span data-type='term'>ボトルネック</span>といいます。パフォーマンスの改善を進めていくには、このボトルネックの調査と適切な対応が求められます。",
    "image": "../images/skills/performance/illustration.svg",
    "purpose": "自分たちの提供するWebアプリケーションの今現在のパフォーマンスを正しく把握して、必要に応じて改善していくことはユーザー体験の向上には不可欠です。<br><br>プロダクトの公開直後は問題は見当たらなくても、ユーザー数の増加や機能追加により徐々にパフォーマンスが低下してしまうことがあります。これらをいち早く見つけて改善するには、パフォーマンスの目標値を定めて問題がないか常に測定しておくことが必要です。<br><br>また見つかった問題によっては、その難易度や全体への影響度合いから、すぐには改善が難しい場合もあります。しかし、問題が積み重なるとボトルネックの特定が難しくなる恐れもあります。すぐに改善できないとしても問題発見後の調査は随時行うことが望まれます。<br><br>パフォーマンスを知るための測定方法と指標そして主な改善の方法を学び、ユーザーの快適な操作環境を提供できるようにしましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "パフォーマンス改善を体験してみよう",
            "child": [
              "パフォーマンスの遅いWebページを使ってみよう",
              "Webページが表示されるまでの流れを確認しよう",
              "開発者ツールで計測してみよう",
              "ボトルネックを解消しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "チューニングの基本を理解しよう",
            "child": [
              "トレードオフについて知ろう",
              "RAILを参考にパフォーマンス指標を決めよう",
              "クライアントサイドののパフォーマンスの基本を理解しよう",
              "サーバーサイドのパフォーマンスの基本を理解しよう",
              "データベースのパフォーマンスの基本を理解しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "scalability",
    "title": "スケーラビリティ",
    "subTitle": "ユーザー数が増えても動き続ける仕組みを作ろう",
    "description": "サーバーの故障やユーザー数増加により負荷があがると、性能が下がったりサービスが提供できなくなるなどの問題が発生する事があります。安定してプロダクトを届けるために、アプリケーションやデータベース、ハードウェアなどを拡張できる状態にしましょう。",
    "thumbnail": "../images/skills/scalability/thumbnail.png",
    "overview": "スケーラビリティとは、利用者の増加に伴う処理負荷やデータの増大に適応できる能力のことです。スケーラビリティの高いシステムとは拡張性を考慮して作られたシステムのことです。<br><br>大量なデータの負荷に対応するためには、処理能力を高める必要があります。処理能力を高める代表的な手法として<span data-type='term'>スケールアップ</span>と<span data-type='term'>スケールアウト</span>という手法があります。<br><br>スケールアップとは、アプリケーションの処理のなかで効率化できる部分を見直してサーバーのリソースを増強することです。<br><br>またスケールアウトは、現在のサーバー数では高負荷となっている処理を、サーバーの台数を増やすことで処理を分散させシステム全体の処理能力を向上させる手法です。<br><br>スケールアウトの手法により、例えばに一つのWebサーバーが複数になる場合、Webからのリクエストを分散させるために<span data-type='term'>ロードバランサ</span>の導入などが必要になります。また、データベースサーバーの台数を複数にした場合は、データの同期の仕組みも必要です。<br><br>スケールアウトとスケールアップのどちらを行うかは、必要となる高負荷処理の種類やその他の経済的な理由も考慮して決めます。例えば、利用者が多い時間帯だけサーバー台数を増やしたりサーバー障害が発生した際にサービスを止めることなく提供し続けたいなどの目的がある場合はスケールアウトが優れています。<br><br>一方で、スケールアップはサーバ構成やネットワークを変更しなくて良いなどシステム全体への影響が少ない利点があります。",
    "image": "../images/skills/scalability/illustration.svg",
    "purpose": "スケーラビリティを考慮したシステムを設計できるようになれば、大規模なサービスを作れるようになるでしょう。<br><br>システムを利用するユーザーが急激に増えた場合、システムの処理能力をあげることが急務となります。この時、あらかじめスケーラビリティを考慮していないと、サーバーが落ちてしまいサービスを提供できなくなってしまいます。<br><br>スケーラビリティを考慮してシステムを設計することでサーバー台数やリソースを増やすことで処理能力をあげられ、サービスの成長に伴って発生するパフォーマンス問題への対処を素早く行えます。<br><br>スケーラビリティについて学ぶことでシステムの構成変更に柔軟に対応できるシステムを作ることができるため、大規模なシステムも自信をもって運用できます。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": [
          {
            "title": "スケーラビリティの基本を理解しよう",
            "child": [
              "スケールアップについて知ろう",
              "スケールアウトについて知ろう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "AWSでスケーラブルなWebアプリケーションを構築しよう",
            "child": [
              "Amazon VPCを作成しよう",
              "ブログアプリのWebサーバー（EC2インスタンス）を作成しよう",
              "ブログアプリのRDS DBインスタンス（MySQL）を作成しよう",
              "ELBでロードバランサーを作成しよう",
              "トラフィックを確認しよう",
              "EC2インスタンスを増やして負荷分散してみよう",
              "RDS DBインスタンスをマルチAZ化してみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "fault-tolerance",
    "title": "耐障害性",
    "subTitle": "プロダクトの問題に対応できるようになろう",
    "description": "ユーザーが増加しサーバー台数も増えるとシステムの問題が起きる確率も高まります。問題が起きても落ち着いて対応できるようになりましょう。",
    "thumbnail": "../images/skills/fault-tolerance/thumbnail.png",
    "overview": "サービスを止めることなく提供し続けるためには、機器の故障やアプリケーションなどの不具合によりシステム全体が停止するような重大な障害の発生頻度を下げることが必要です。このようなシステムを耐障害性の高いシステムと呼びます。<br><br>可用性の高いシステムを作ることで、ユーザーはより長い時間サービスを利用できます。<br><br>障害の発生を減らす取り組みとしては、アプリケーションのバグ修正やサーバー再起動など障害の発生を未然に防ぐための予防保守や、古くなった機器の入れ替えやリソースの追加を行うことで障害の前兆を検知して早めに対策を行う予知保守などがあります。これらの対策を行うことはシステム障害の発生確率を下げることにつながりますが、サービスが使えなくなるような障害の発生確率をゼロにすることはできません。<br><br>そこでサーバーを複数台用意してシステムを冗長構成とする方法があります。冗長化されたサーバーは処理能力の向上だけでなく、一部のサーバーが使えなくなっても他のサーバーで処理を代行することができるため、システム障害によるサービス停止を回避することができます。<br><br>これらの対策を行うことでシステムは障害に強くなり、結果としてサービスを安定して提供することができるようになります。",
    "image": "../images/skills/fault-tolerance/illustration.svg",
    "purpose": "障害が発生してもサービスを提供し続けられるシステムを作れるようになれば、障害に起因するサービス停止の確率を下げられます。<br><br>例えばアプリケーションで想定外のエラーや予期せぬ機器故障によるシステムダウンなど、稼働中のシステムでは様々な問題が発生しますが、予防保守や予知保守を定期的に行うことで障害の発生頻度を減らすことは可能です。<br><br>またサービスの停止が致命的となるシステムでは、サービスを止めないための対策を行います。もしあるサーバーが故障してもサービスを提供し続けられるサーバー構成となっていれば、ユーザーは障害の影響を受けることなくサービスを使い続けられます。このように日頃から障害の発生に備えることは安定したサービスを提供する上で欠かせません。<br><br>障害に強いシステムを構築して、いつでも使えるサービスをユーザーに届けられるようになりましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "easy description",
        "tasks": []
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "スケーラビリティを確保したAWSの耐障害性について理解しよう",
            "child": [
              "EC2インスタンスの停止をしてみよう",
              "RDSのフェイルオーバーを行おう"
            ]
          }
        ]
      }
    }
  }
]
