[
  {
    "id": "html-and-css",
    "title": "HTML&CSS",
    "subTitle": "レイアウトを作れるようになろう",
    "description": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。HTMLとCSSを学べば、これまであなたの頭の中にあった考えを、形にして表現する手段を手に入れることができるのです。",
    "thumbnail": "../images/skills/html-and-css/thumbnail.png",
    "overview": "HTMLとCSSはWebページを作るために使われる言語です。<br><br>HTMLやCSSが書かれたファイルをWebサーバー上に置くことで、全世界の人にWebページを公開することができます。<br><br>HTMLはWebページに表示する文字や画像などの内容とそれらの構造を指定する役割があり、さまざまな<span data-type='term'>タグ</span>を使用して記述します。<br><br>CSSは色やレイアウトなど見た目を装飾する役割があり、HTMLで記述した要素に対して<span data-type='term'>プロパティ</span>で見た目を指定します。",
    "image": "../images/skills/html-and-css/illustration.svg",
    "purpose": "ホームページやECサイトなど、全てのWebページでHTMLとCSSは使われています。あなたがWebページを作成したいと考えているなら、HTMLやCSSの知識は必要不可欠です。<br><br>CSSのプロパティを使いこなすことができれば、さまざまな画面サイズの表示に対応した、思い通りの見た目のWebページを作れるようになります。あなたはアイデアを形にして世界中に公開できるようになるということです。<br><br>HTMLとCSSを一通り使えるようになったら、ポートフォリオサイトなどを作ってあなたが共有したい情報や、あなたの作った作品を世界に発信してみましょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "シンプルなWebページを作成するのに必要な知識は多くありません。まずは、HTMLの基本的なタグを使ってシンプルなWebページの構造を作成したあと、CSSを使ってどのように見た目が変わるかを学んでいきましょう。",
        "tasks": [
          {
            "title": "HTML&CSSの基本を理解しよう",
            "child": [
              "HTMLに触れてみよう",
              "CSSに触れてみよう",
              "ボックスモデルを学ぼう",
              "ヘッダーやメニューなどページ要素のレイアウトを作ってみよう"
            ]
          },
          {
            "title": "レスポンシブデザインを理解しよう",
            "child": [
              "メディアクエリを使ってみよう",
              "タブレット向けのレイアウトを作ってみよう",
              "スマートフォン向けのレイアウトを作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ここでは、自分のWebページ作成にチャレンジしましょう。また、実践ではアクセシビリティの基本的な理解も必要になります。オススメの教材を参考に学んでみましょう。",
        "tasks": [
          {
            "title": "自分のWebページを作ってみよう",
            "child": [
              "複数ページの構成を考えてみよう",
              "複数ページをレイアウトしてみよう",
              "faviconを設定してみよう",
              "OGPを設定してみよう",
              "GitHub PagesでWebページを公開してみよう"
            ]
          },
          {
            "title": "アクセシビリティの基本を理解しよう",
            "child": [
              "アクセシビリティの概要を知ろう",
              "HTMLとアクセシビリティについて知ろう",
              "HTML要素や属性のセマンティクスについて知ろう",
              "CSSとアクセシビリティについて知ろう",
              "アクセシビリティを考慮した基本的なデザインを知ろう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "editors",
    "title": "エディタ",
    "subTitle": "快適にコーディングするために開発環境を整えよう",
    "description": "Webページ開発をはじめるためにエディタを用意しましょう。エディタを使うことで、入力補完や文法のチェックを行ってくれるため、快適にプログラミングができます。お気に入りのエディタを見つけて、楽しくプログラミングできる環境を整えましょう。",
    "thumbnail": "../images/skills/editors/thumbnail.png",
    "overview": "エディタ（テキストエディタ）はプログラミングのコードを書くときに使うツールです。<br>エディタにはコードの構文を検知して彩色する機能（<span data-type='term'>シンタックスハイライト）や、入力しようとしている構文を予測して候補を表示する機能（<span data-type='term'>入力補完</span>）などがあります。これらの機能により、開発効率を上げることができます。</span><br><br>エディタには、より効率的にコードを書くためのさまざまな<span data-type='term'>プラグイン</span>が用意されています。例えば不揃いなコードに自動で改行をできたり、関数をクリックするとその関数の定義部分に飛べたりなど、繰り返し行う面倒な作業をサポートしてくれます。<br><br>また、エディタの種類には<span data-type='term'>統合開発環境（IDE）</span>と呼ばれるものもあります。IDEはコードのコンパイルやデバッグ、プログラムのテストも行える多機能なエディタです。",
    "image": "../images/skills/editors/illustration.svg",
    "purpose": "エディタを利用するとコーディングが快適になり、開発効率の向上が期待できます。<br><br>コーディングはメモ帳でも行うことができます。しかし、メモ帳はコーディングを前提としたツールではないため、その効率を上げる機能は備わっていません。<br><br>エディタを使えば、シンタックスハイライトや補完機能などにより、快適にコーディングができるようになることでしょう。その他にもプラグインを導入することで必要な機能を随時追加できます。<br><br>どのエディターを使うか迷ったら、その他の拡張機能やIDE機能についても調べて判断しましょう。<br><br>エディタを利用して、コーディングを快適に行いましょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "ここでは、近年もっともシェアが高いVisual Studio Codeを紹介しています。軽量で扱いやすく機能も豊富なので、使いこなせるようになりましょう。",
        "tasks": [
          {
            "title": "エディタをセットアップしよう",
            "child": [
              "Visual Studio Codeをインストールしよう",
              "コードを自動保存できるよう設定にしよう",
              "コードを自動整形できるようにしよう",
              "ファイルパスを補完できるようにしよう"
            ]
          },
          {
            "title": "基本的な機能を覚えよう",
            "child": [
              "ショートカットキーで操作してみよう",
              "検索機能を使ってみよう",
              "置換機能を使ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "Visual Studio Codeはコードを書くだけでなく、開発をサポートするさまざまな機能があります。まずは、デバッグ機能を使えるようになりましょう。つぎに、Vimの操作について学ぶことをオススメします。Vimはターミナル上でテキストを編集するツールで、開発の中で定期的に利用することとなるでしょう。Vimtutorを参考に基本操作を覚えましょう。",
        "tasks": [
          {
            "title": "エディタのデバッグ機能を使ってみよう",
            "child": [
              "VSCode拡張機能のDebugger for Chromeをインストールしよう",
              "ブレークポイントを設定しよう",
              "ステップ実行してみよう",
              "FizzBuzzゲームプログラムのデバッグをしてみよう"
            ]
          },
          {
            "title": "Vimの基本を理解しよう",
            "child": [
              "カーソルを移動しよう",
              "Vimの起動と終了の方法を知ろう",
              "テキスト編集できるようになろう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "internet",
    "title": "インターネット",
    "subTitle": "Webの仕組みを知ろう",
    "description": "すべてのWebページはインターネットの仕組みの上に成り立っているので、Webページの公開にはインターネットの基本的な知識が必要です。作成したWebページを世界に公開する準備をしましょう。",
    "thumbnail": "../images/skills/internet/thumbnail.png",
    "overview": "私たちが利用しているWebページは、インターネットの仕組みの上で動いています。コンピューターをインターネットにつなげることで、世界中のサーバーやコンピューターとデータをやりとりできるようになります。<span data-type='term'>ブラウザ</span>でWebページをみたり、離れた相手にメールを送ったりできるのもインターネットのおかげです。<br><br>インターネットはデータを要求する<span data-type='term'>クライアント</span>とそれに応答する<span data-type='term'>サーバー</span>とのやりとりで成り立っています。クライアントからの要求を<span data-type='term'>リクエスト</span>、サーバーからの応答を<span data-type='term'>レスポンス</span>と呼びます。<br><br>ブラウザのタイトルバーに<span data-type='term'>URL</span>を入力するとWebページが表示されます。これがどのような仕組みで動いているのか知っておきましょう。まず、クライアントであるブラウザはURLに対応したサーバーに向けて、Webページを取得するためのリクエストを送信します。その後リクエストを受信したサーバーが所定のHTMLファイルなどのデータをクライアントに返すことで、ブラウザ上にWebページが表示される仕組みになっています。<br><br>このようなクライアントとサーバーのやり取りは<span data-type='term'>HTTP（Hypertext Transfer Protocol）</span>という予め定められた通信のルールに則って行われます。このルールは<span data-type='term'>通信プロトコル</span>と呼ばれており、HTTP以外にも用途によってさまざまなプロトコルが用意されています。",
    "image": "../images/skills/internet/illustration.svg",
    "purpose": "Webページを作れるようになるには、インターネットとWebの仕組みを理解する必要があります。<br><br>Webページの公開にはサーバーの準備やドメインの取得、HTMLファイルの配置などが必要です。これらの役割や働きを理解するにはインターネットの基本的な知識が必要となります。まずはHTTP通信やIPアドレス、ドメイン名などについて学びましょう。<br><br>ユーザーがWebページにアクセスするとき、必ずインターネットを経由します。インターネットについて学んでWebの仕組みを理解し、Webページを公開できるようになりましょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "インターネットの知識はHTMLやCSSのように手を動かして学べるものではないので、学習しづらいと感じるかもしれません。まずは登場する頻度が高い用語と役割を学んで全体像を掴みましょう。",
        "tasks": [
          {
            "title": "インターネットの基本を理解しよう",
            "child": [
              "クライアントとサーバーについて学ぼう",
              "URLの役割について学ぼう",
              "リクエストとレスポンスの流れを掴もう",
              "IPアドレスについて学ぼう",
              "URLとIPアドレスの関係とDNSを理解しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ここでは、仕組みを学んでいきましょう。特にHTTPの基本はWeb開発者のスキルの土台となるので、早めに押さえておきましょう。",
        "tasks": [
          {
            "title": "HTTPの基本について理解しよう",
            "child": [
              "プロトコルとは何かを知ろう",
              "HTTPメッセージについて学ぼう",
              "ステートレスについて学ぼう",
              "Cookieについて学ぼう"
            ]
          },
          {
            "title": "GitHub PagesにWebページを公開しよう",
            "child": [
              "GitHub Pagesに公開してみよう",
              "カスタムドメインを取得してみよう",
              "404ページを設定してみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "javascript",
    "title": "JavaScript",
    "subTitle": "Webページに動きをつけてみよう",
    "description": "HTML&CSSだけでは少し退屈なWebページに感じたかもしれません。WebページにJavaScriptを取り入れることで、クリックやスクロールなどのユーザーの操作に応じた動的な表現が可能になります。このような仕掛けを用意して、楽しさや利便性を備えたWebページを作れるようになりましょう。",
    "thumbnail": "../images/skills/javascript/thumbnail.png",
    "overview": "JavaScriptは世界でもっとも使われているプログラミング言語の1つであり、近代的なWebページを作成するためには欠かせません。<br><br>クリックでHTML要素の色や形を変えたりアニメーションを表示したりなど、JavaScriptはWebページにさまざまな動きをつけることができます。JavaScriptはHTMLやCSSと共に、Webページの表示や動作の処理に使われます。<br><br>ユーザーの操作によって動的に変化するWebページが主流となってきたことから、現在JavaScriptは多くのWebページで利用されています。",
    "image": "../images/skills/javascript/illustration.svg",
    "purpose": "JavaScriptを使ってWebページに動的な表現を取り入れることで、ユーザーに操作した感覚を与えることや、ローディング中の待ち時間を退屈にさせないことが可能になります。このような仕掛けにより、Webページを利用するユーザーに「楽しく・心地よい」体験を提供できます。<br><br>また、JavaScriptで作られたフロントエンド用のライブラリやフレームワークも登場しており、代表的なものに<span data-type='term'>React</span>、<span data-type='term'>Vue</span>、<span data-type='term'>Angular</span>などがあります。<br><br>このように、楽しさや利便性を備えたWebページを作るうえではJavaScriptは欠かせない言語となっています。<br><br>Webフロントエンド開発で高機能なWebページを作りたい場合は、JavaScriptを学ぶとよいでしょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "ここでは、JavaScriptでWebページに動きを付けることを目標に学んでいきましょう。まずは、基本文法を押さえてからDOM操作にチャレンジしてみましょう。",
        "tasks": [
          {
            "title": "JavaScriptの基本を理解しよう",
            "child": [
              "基本的な構文を覚えよう",
              "FizzBuzzプログラムを作ってみよう"
            ]
          },
          {
            "title": "DOMの基本について理解しよう",
            "child": [
              "WebページでJavaScriptを実行してみよう",
              "JavaScriptでHTMLを操作してみよう",
              "JavaScriptでCSSを操作してみよう",
              "イベント処理を作ってみよう"
            ]
          },
          {
            "title": "動きのあるWebページを作ってみよう",
            "child": [
              "モーダルを作ってみよう",
              "アコーディオンを作ってみよう",
              "カルーセルを作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "非同期の学習は少し難易度が高いですが、Web APIの利用など実践では必ず登場します。最初は実行順序などから丁寧に学んでいきましょう。",
        "tasks": [
          {
            "title": "非同期処理を理解しよう",
            "child": [
              "非同期処理に触れてみよう",
              "コールバック関数を使おう",
              "Promiseを使ってみよう",
              "Async/Awaitを使ってみよう"
            ]
          },
          {
            "title": "Ajax利用してみよう",
            "child": [
              "FetchでWeb APIを呼び出してみよう",
              "Ajaxで取得したデータをWebページに表示しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "developer-tools",
    "title": "開発者ツール",
    "subTitle": "Webページ開発のデバッグをしよう",
    "description": "開発を行っているとレイアウト崩れやJavaScriptが思うように動かない状況に直面することもあるでしょう。そんなときは開発者ツールを使うことで原因を調査することができます。自分で原因を見つけて解決できれば、あなたはどんなWebページも作ることができます。",
    "thumbnail": "../images/skills/developer-tools/thumbnail.png",
    "overview": "開発者ツールはWebページ開発の<span data-type='term'>デバッグ</span>に使える機能で、各ブラウザが提供しています。<br><br>開発者ツールを使えば、HTMLソースコードがWebページ上のどの部分に表示されていて、HTML要素にどのようなCSSプロパティが適用されているかを一覧で確認することができます。また、JavaScriptの実行状況も確認することが可能です。<br><br>その他にも、サーバーとの通信状況や通信にかかる時間、<span data-type='term'>Cookie（クッキー）</span>をはじめとする<span data-type='term'>ストレージ</span>の状態など、開発に必要な多くの情報を確認することができます。",
    "image": "../images/skills/developer-tools/illustration.svg",
    "purpose": "Webページを作っていると、レイアウトが崩れたり、JavaScriptが思うように動かなかったりなどの不具合が発生することがあります。それらを修正するには、原因となるコードを特定しなければなりません。開発者ツールを使用すれば、Webページと同時にHTMLの構造やJavaScriptのエラー、レスポンシブ表示などを確認できるため、不具合の発見と原因の調査を進めやすくなります。開発者ツールの使い方を学んで、自分で原因を見つけて解決できるようになりましょう。",
    "sceneId": "web-basics",
    "getStarted": {
      "easy": {
        "description": "ここでは、近年もっとも普及しているGoogle Chromeブラウザの開発者ツールを紹介しています。まずは、手軽に使えてWebページ開発に役立つHTMLとCSSの機能を学びましょう。",
        "tasks": [
          {
            "title": "開発者ツールに触れてみよう",
            "child": [
              "ページのHTMLを確認しよう",
              "HTMLを編集しよう",
              "ページのCSSを確認しよう",
              "CSSを編集しよう",
              "CSSを追加しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ここでは、より実践で使う開発者ツールの機能について学びましょう。機能ごとにドキュメントやブログなどを調べてみましょう。",
        "tasks": [
          {
            "title": "開発者ツールの基本的な機能について理解しよう",
            "child": [
              "レスポンシブのレイアウトを確認してみよう",
              "HTMLに読み込まれているファイルを確認してみよう",
              "JavaScriptの実行状況を確認してみよう",
              "ストレージを確認してみよう",
              "キャッシュを無効にしてみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "server-side-programming",
    "title": "サーバーサイドプログラミング",
    "subTitle": "サーバーで動くプログラムを作ろう",
    "description": "世界でよく使われているWebアプリケーションの多くはフロントエンドとサーバーサイドのプログラムが連携して動いています。Webアプリケーション作成のために、サーバーサイドのプログラミング言語について学びましょう。",
    "thumbnail": "../images/skills/server-side-programming/thumbnail.png",
    "overview": "サーバーサイドのプログラミング言語とは、サーバーで動作するプログラムを実装するための言語の総称です。<span data-type='term'>Ruby</span>、<span data-type='term'>Python</span>、<span data-type='term'>Java</span>、<span data-type='term'>PHP</span>などの長年使われているものから、<span data-type='term'>Rust</span>や<span data-type='term'>Go言語</span>などの比較的新しいものまで、さまざまな種類の言語があります。<br><br>サーバーサイドの言語は、JavaやGoなどのコンパイラを用いる<span data-type='term'>コンパイラ言語</span>と、RubyやPythonなどのインタプリタを用いる<span data-type='term'>スクリプト言語</span>に大きく分けられます。<br>コンパイラ言語は処理速度の速さやコンパイラのチェックによるバグの防止などが利点です。一方スクリプト言語は、手軽に実行して結果を確認できるので開発スピードが向上するという利点があります。<br><br>どのサーバーサイドの言語を使用しても、クライアント（ブラウザ）からの要求に応じて処理を行い、処理結果を返すというWebアプリケーションの動きは同じです。基本的に制約はありませんが、得意とする処理やフレームワークには特徴があるので、自分が作成したいアプリケーションの種類と自分のスキルに応じて選択すると良いでしょう。",
    "image": "../images/skills/server-side-programming/illustration.svg",
    "purpose": "動画サービスやECサイトなど、世界中で使われているWebアプリケーションは、いずれかのサーバーサイドのプログラミング言語を用いて作られています。<br><br>HTML、CSS、JavaScriptだけでは、いつ誰がアクセスしても同じ表示となる静的なWebページしか作れませんでした。サーバーサイドのプログラミング言語を学ぶことで、ユーザーのリクエストに応じた動的なWebページを作れるようになります。<br><br>本格的なWebアプリケーションの作成のために、サーバーサイドの言語を学びましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "ここではRubyの学習方法を紹介しています。Rubyはオープンソースのスクリプト言語であり、Webアプリケーション開発でよく使われる人気の言語です。1つの言語をしっかりと学べば、他のプログラミング言語を学ぶときにも役立つスキルが身につきます。まずはRubyでプログラミングの基礎を身に着けましょう。",
        "tasks": [
          {
            "title": "Rubyを動かしてみよう",
            "child": [
              "変数を使ってみよう",
              "条件分岐をしてみよう",
              "繰り返し処理を作ってみよう"
            ]
          },
          {
            "title": "Rubyの基本を理解しよう",
            "child": [
              "配列を使ってみよう",
              "ハッシュを使ってみよう",
              "nilを扱ってみよう",
              "メソッドを使ってみよう",
              "FizzBuzzプログラムを作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "Rubyは繰り返しや条件分岐など以外にもさまざまな機能を作ることができます。ここではより実践的にRubyを使いこなすためのスキルを学んでいきましょう。",
        "tasks": [
          {
            "title": "Rubyを使えるようになろう",
            "child": [
              "正規表現を扱ってみよう",
              "Rubyの標準ライブラリを使ってみよう",
              "例外処理を加えよう",
              "Rubyのデバッグをしよう",
              "正規表現チェッカープログラムを作ってみよう"
            ]
          },
          {
            "title": "Rubyのテクニックを身に着けよう",
            "child": [
              "日付や時刻を扱えるようになろう",
              "ファイルやディレクトリを扱えるようになろう",
              "環境変数を扱えるようになろう",
              "gemとBundlerについて理解しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "object-oriented-programming",
    "title": "オブジェクト指向",
    "subTitle": "コードを整理し、機能の追加や変更をしやすくしよう",
    "description": "オブジェクト指向は、Webアプリケーションを作成する為の基礎となる考え方やプログラミング技術です。オブジェクト指向でアプリケーションを作成することにより、見通しがよく、メンテナンス性に優れたプログラミング技術を身に付けましょう。",
    "thumbnail": "../images/skills/object-oriented-programming/thumbnail.png",
    "overview": "オブジェクト指向とは、オブジェクトという”モノ”単位でシステムを作る考え方です。オブジェクト指向により、見通しが良いシステムを作ることができます。<br><br>オブジェクト指向では、ひな形である<span data-type='term'>クラス</span>を定義して、クラスに<span data-type='term'>属性</span>や<span data-type='term'>振る舞い</span>を記述します。オブジェクトはクラスの定義に従って必要なときに生成されます。オブジェクト同士が相互に協調しながら効率的に動作するのがオブジェクト指向の特徴です。<br><br>「乗り物」クラスを例に、「具体的な乗り物」オブジェクトを作る流れを図で確認してみましょう。乗り物クラスには共通する属性や振る舞いを定義します。これにより似た振る舞いをもつさまざまな乗り物を1つのクラスから派生して作ることができます。",
    "image": "../images/skills/object-oriented-programming/illustration.svg",
    "purpose": "オブジェクト指向を学ぶことで、作りたい機能をどのようにプログラミングすると良いかをイメージできるようになります。<br><br>オブジェクト指向の考え方に沿ってプログラムを構成することで、オブジェクト間の<span data-type='term'>独立性</span>や<span data-type='term'>拡張性</span>、<span data-type='term'>再利用性</span>が高まり、機能追加や修正が容易になります。<br><br>例えば、オブジェクトの振る舞いに変更が必要な場合、それがある単一のクラスの内部に閉じた独立性の高いものであれば、他のクラスで作られたオブジェクトに影響を与えずに修正することができます。<br><br>オブジェクト指向を学んで、メンテナンスしやすいプログラムを書けるようになりましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "オブジェクト指向とプログラミング言語は切り離せない関係です。まずはRubyを使ってオブジェクト指向のクラスやインスタンスについてイメージできるようになりましょう。",
        "tasks": [
          {
            "title": "オブジェクト指向に触れてみよう",
            "child": [
              "クラスを作ってみよう",
              "インスタンスと初期化について学ぼう",
              "インスタンス変数を作ってみよう",
              "インスタンスメソッドを作ってみよう",
              "継承を使ってみよう",
              "料理注文システムを作ろう"
            ]
          }
        ]
      },
      "middle": {
        "description": "オブジェクト指向の考え方やテクニックを習得するには実践を繰り返す必要があります。ブラックジャックゲームを作ることを目標に、書籍と実践から学んでいきましょう。",
        "tasks": [
          {
            "title": "オブジェクト指向の基本を理解しよう",
            "child": [
              "カプセル化について学ぼう",
              "ポリモーフィズムについて学ぼう",
              "集約と移譲について学ぼう",
              "クラス設計とUMLについて学ぼう",
              "ブラックジャックゲームを作ってみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "terminal-operations",
    "title": "ターミナル操作",
    "subTitle": "コンピュータの操作を効率的にできるようになろう",
    "description": "アプリケーション開発では、パッケージのインストールやファイル操作など、ターミナルを使ってコマンドを実行する場面がたくさんあります。開発や環境構築に必要なターミナル操作を学びましょう。",
    "thumbnail": "../images/skills/terminal-operations/thumbnail.png",
    "overview": "ウィンドウ上のアイコンをクリックするなど、ユーザーがコンピュータの操作を視覚的に行う方法のことを<span data-type='term'>GUI（グラフィカル・ユーザー・インターフェース）</span>といいます。それに対して、ユーザーがテキストをベースとしたコマンド操作によりコンピューターを操作することを<span data-type='term'>CUI（キャラクター・ユーザー・インターフェース）</span>といいます。<br><br>ターミナルとは、入力されたコマンドを通してコンピューターとやりとりをするCUIツールです。<br><br>ターミナルで使用するコマンドは、<span data-type='term'>シェル</span>という種類のプログラムで解釈・実行されます。<br><br>ターミナルでの操作は、OSによってシェルが違うため使えるコマンドに違いがあります。開発でよく使われるのは<span data-type='term'>Linux系</span>のコマンドです。Macでは標準で、またWindowsでも設定を変更する事で使えるようになります。",
    "image": "../images/skills/terminal-operations/illustration.svg",
    "purpose": "ターミナルを利用することで効率的にコンピューターを操作することができます。<br><br>Webアプリケーション開発では、ライブラリのインストールやデータベースの操作などを行うことがありますが、これらの作業は多くがターミナル上でのCUI操作が基本です。<br><br>マウスなどを用いたGUI操作だけでもほとんどの操作を行うことができますが、CUIではショートカットキーや入力補完を使えるため操作をより効率的に行うことができます。<br><br>また、アプリケーションを公開するためのサーバーにはLinux系のOSが幅広く利用されており、OSやアプリケーションで行う環境設定や、確認作業などのほぼ全ての操作をターミナルで行うことになるため、Linuxコマンドについても学習が必要です。<br><br>ターミナル操作について学んで、効率よく作業できるようになりましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "ターミナル操作はLinux OSを中心に紹介しています。まずは、ターミナル操作を通してファイルやフォルダの構造についてイメージできるようになりましょう。",
        "tasks": [
          {
            "title": "ターミナル操作の基礎について学んでみよう",
            "child": [
              "ターミナルに触れてみよう",
              "ファイル構造を理解しよう",
              "ファイル・ディレクトリを操作しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ターミナル操作を学習するには実際にLinux OSを使うことが簡単です。自分のPCでLinuxを使えるようにして、より実践的なターミナル操作にチャレンジしてみましょう。",
        "tasks": [
          {
            "title": "Linux OSについて学んでみよう",
            "child": [
              "Linux OSとディストリビューションについて理解しよう",
              "CentOSをインストールしてみよう",
              "ファイルパーミッションとスーパーユーザーについて学ぼう",
              "標準入出力とパイプラインについて学ぼう",
              "RPMのパッケージ管理について学ぼう",
              "ファイルシステム（マウント）について学ぼう"
            ]
          },
          {
            "title": "ターミナルを実践で使えるようになろう",
            "child": [
              "プロセスとジョブについて学ぼう",
              "メモリ状態のチェックについて学ぼう",
              "SSHでリモートサーバーに接続しよう",
              "シェルスクリプトを作成してスケジュール起動しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "databases",
    "title": "データベース",
    "subTitle": "データベースを扱ったWebアプリケーションの機能を作ろう",
    "description": "データベースを使えばユーザーや商品情報など、様々な蓄積データを扱ったWebアプリケーションを作ることができます。本格的なサービスを作るために、データベースについて学んでみてください。",
    "thumbnail": "../images/skills/databases/thumbnail.png",
    "overview": "データベースとは、アプリケーションで扱うべきデータをプログラムコードから分離して集中管理する仕組みです。アプリケーションは、データベースを使うことで正しく安全にデータの追加・更新などができます。<br><br>データベースにはその構成の違いにより、<span data-type='term'>リレーショナルデータベース（RDB）</span>やNoSQLと呼ばれる非リレーショナルデータベースなどの種類があります。その中で現在でも広く使われるものはリレーショナルデータベースです。リレーショナルデータベースは、データを<span data-type='term'>テーブル</span>の集合体で管理します。テーブルはデータの種類ごとに複数の<span data-type='term'>カラム</span>を持っており、主キーや外部キーなどの各種の制約を設定してから使用します。データベースをどの様なテーブル構成としてどの様な制約を掛けるかは、システム全体の性能に影響を及ぼすため非常に重要なものです。<br><br>データベースを使うことで、複数のユーザーがシステムを同時利用する場合でもデータ登録時に起こる衝突によるデータ消失や重複の防止によりデータの整合性を保つことができます。またデータの暗号化によるセキュリティ向上やバックアップ機能によりデータ保全などがも可能です。<br><br>アプリケーションを作成する上でデータベースを扱うには、プログラム内に操作するコードを記述する必要があります。例えばリレーショナルデータベースでは、<span data-type='term'>SQL</span>と呼ばれる専用の言語をプログラムコードに含めることでデータの作成や取得、更新、削除などの操作を行うことができます。<br><br>データベースの仕組みやプログラムからの操作方法を知って、データを安全に効率よく扱えるようになりましょう。",
    "image": "../images/skills/databases/illustration.svg",
    "purpose": "データベースについて学ぶことで、Webアプリケーションで扱うデータを正しく管理できる様になります。<br><br>Webアプリケーションで扱うデータには、会員登録時のユーザーデータやECサイトの商品データなど様々です。<br><br>これらのデータを扱うWebアプリケーションをユーザーに快適に利用してもらうためには、データが正しく保存されることは勿論のこと、大量のデータから目的のデータを素早く取り出す必要があります。データベースを使うことで、関連しあうデータを一括で保存しデータの完全性を担保したり、効率的に検索して表示することが出来ます。<br><br>近年のWebアプリケーションフレームワーク上の開発では、直接SQLを使わずに<span data-type='term'>O/Rマッパー</span>により実装することも可能です。ただし、このマッパー内部ではSQLが動作しているので効率的なデータアクセスを実現するためにSQLの学習も必要となるでしょう。<br><br>本格的なサービスを作るために、データベースについて学びましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "データベースの最初の学習は、現在でも広く使われているリレーショナルデータベースがよいでしょう。まずは、リレーショナルデータベースを操作するSQLについて学びましょう。",
        "tasks": [
          {
            "title": "SQLでデータ取得をしてみよう",
            "child": [
              "データベースの種類と役割について理解しよう",
              "SELECTを使ってデータを取得しよう",
              "WHEREを使って特定のデータを取得しよう",
              "データの並べ替えをしてみよう",
              "集計関数を使ってみよう",
              "データをグループ化してみよう",
              "サブクエリを使ってみよう",
              "JOINで複数テーブルを結合しよう",
              "ファッションサイトのデータベースの分析をしてみよう"
            ]
          },
          {
            "title": "SQLでデータ変更をしてみよう",
            "child": [
              "INSERTでデータを追加してみよう",
              "UPDATEでデータを更新してみよう",
              "DELETEでデータを削除してみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "middle description",
        "tasks": [
          {
            "title": "MySQLの基本を理解しよう",
            "child": [
              "MySQLをインストールしよう",
              "データベースとテーブルを管理してみよう",
              "MySQLのデータ型について学ぼう",
              "制約を使ってデータの整合性を保とう",
              "MySQLのインポートとエクスポートをしてみよう",
              "COMMITとROLLBACKを使用してトランザクションを管理しよう",
              "バックアップとリストアを試してみよう",
              "インデックスを使用してデータ取得をすばやく行おう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "web-application-frameworks",
    "title": "Webアプリケーションフレームワーク",
    "subTitle": "フレームワークを使用して効率よく開発しよう",
    "description": "実際のWebアプリケーション開発ではフレームワークを使うのが一般的です。フレームワークの仕組みを理解して、Webアプリケーションを形にしてみましょう！",
    "thumbnail": "../images/skills/web-application-frameworks/thumbnail.png",
    "overview": "フレームワークとは、効率的にアプリケーション開発を行うための枠組みです。Webアプリケーションフレームワークはサーバーサイド言語ごとにいくつかの種類があり、例えばRubyのフレームワークなら<span data-type='search'>Ruby on Rails</span><span data-type='search'>Sinatra</span>などがあります。<br><br>現在のWebアプリケーションフレームワークの多くは<span data-type='term'>MVCモデル</span>に従って作られています。<br><br>MVCモデルとは、アプリケーションを<span data-type='term'>Model</span><span data-type='term'>View</span><span data-type='term'>Controller</span>といわれる各機能ごとに分類して作成するプログラミングモデルです。Modelにはアプリケーションで扱うデータや<span data-type='term'>ビジネスロジック</span>と呼ばれる処理を、Viewにはフロントエンドの表示の為の処理を、Controllerにはユーザーからの命令などを分析してModelやViewの処理を橋渡しをする処理をそれぞれ記載します。MVCモデルのWebアプリケーションフレームワークは、MVCモデルの概念に従ってアプリケーションの全体の処理の流れを制御し、開発者にテンプレートや機能を提供します。<br><br>開発者はフレームワークのルールや用意されたテンプレートを使用することで、アプリケーション開発をスムーズに進めることができます。",
    "image": "../images/skills/web-application-frameworks/illustration.svg",
    "purpose": "フレームワークを取り入れることで手軽にWebアプリケーションを形にすることができるようになります。<br><br>世の中のWebアプリケーションの多くはフレームワークを使って作られています。本格的なWeb開発をする場合、フレームワークの知識は必須でしょう。<br><br>フレームワークを使えばテンプレートに沿ってコーディングを行うことができます。またフォルダ構成などについてもフレームワークが用意したものが使えるため、迷うことなく正しく分割してプログラムが書けるようになります。<br><br>フレームワークを利用して開発を進めて、Webアプリケーションの基本的な動作や仕組みについて学びましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "RailsはRubyでWebアプリケーションを開発するときに最も使われるWebアプリケーションフレームワークです。豊富な機能を備えており、アプリケーションを作成する際のコード量が少なくなることで、開発効率を高めることができます。まずは、Railsを触りながら簡単なSNSアプリを作ってみましょう。",
        "tasks": [
          {
            "title": "Ruby on Railsを使ってみよう",
            "child": [
              "Webページを表示してみよう",
              "ビューについて理解しよう",
              "コントローラーについて理解しよう",
              "ルーティングについて理解しよう",
              "データベースを利用しよう",
              "モデルについて理解しよう"
            ]
          },
          {
            "title": "SNSアプリを作ってみよう",
            "child": [
              "画像アップロード機能を作ってみよう",
              "ログイン機能を作ってみよう",
              "いいね機能を作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ここでは、一般的にWebアプリケーションに備わっている機能を取り入れて、オリジナルのWebアプリケーションを作ることを目標に学んでいきます。すでに世の中に存在するアプリケーションを参考に機能を考えてみるものおすすめです。",
        "tasks": [
          {
            "title": "オリジナルWebアプリケーションを作ってみよう",
            "child": [
              "Railsをインストールしよう",
              "MySQLと接続してみよう",
              "deviceを使ってログイン機能を作ってみよう",
              "omniauthを使ってGitHubログイン機能を作ってみよう",
              "Active Storageを使って画像アップロード機能を作ってみよう",
              "ユーザーフォロー機能を作ってみよう",
              "コメント機能を作ってみよう",
              "Herokuにアプリケーションをデプロイしよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "web-api",
    "title": "Web API",
    "subTitle": "公開されたAPIの機能を取り入れ、作れる幅を広げよう",
    "description": "Web APIの仕組みを使えば、公開されている機能やデータをアプリケーションで利用することができます。Web APIを積極的に活用してさまざまな機能を取り入れてみましょう。",
    "thumbnail": "../images/skills/web-api/thumbnail.png",
    "overview": "APIとはApplication Programming Interfaceの略で、アプリケーションの個々の機能を分離して使用するための取り決めのことです。<br><br>Web APIは、HTTPプロトコルを利用してインターネット経由で呼び出せるAPIです。公開されたWeb APIを通して、機能やデータを他のシステムから利用することができます。<br><br>利用する際は、その機能とリクエストやレスポンスの形式が分かれば、API内部の詳しい処理形式を知る必要がありません。<br><br>HTTPプロトコルを利用するため、Web APIへのアクセスには<span data-type='term'>エンドポイント</span>と呼ばれるURLによって指定されることになります。<br><br>機能やリクエスト・レスポンスの形式はWeb API提供者が用意しているドキュメントを参考にします。データのレスポンス形式はHTMLではなくプログラムが操作しやすい<span data-type='term'>JSON形式</span>などで返ってくるのが一般的です。<br><br>近年多くのWeb APIが公開されており、それらを使ったWebアプリケーションがたくさん作られています。",
    "image": "../images/skills/web-api/illustration.svg",
    "purpose": "既に公開されたWeb APIサービスがあれば、それを利用することでアプリケーションのオリジナル機能開発に注力できます。<br><br>これまでは、ログイン機能やメール送信機能などアプリケーションのさまざまな機能を独自に用意する必要がありましたが、Web APIを利用することでこれらの機能を簡単に自分のWebアプリケーションに取り入れることができるようになりました。<br><br>他にも現在では、Web APIを利用してモダンなユーザーインタフェースなどを実現しているWebサイトが多くあります。たとえば、地図表示部分では非同期にWeb APIを呼び出す<span data-type='term'>Ajax</span>と言われる方式を使うことで、スムーズな操作を可能にしています。<br><br>公開されているAPIを積極的に活用してさまざまなWebアプリケーションを効率的に開発しましょう。",
    "sceneId": "web-application-development",
    "getStarted": {
      "easy": {
        "description": "Web APIを活用して自分のアプリケーションに機能を追加できることを目指しましょう。まずは、無料のデータを使ってWeb APIのイメージを掴みましょう。",
        "tasks": [
          {
            "title": "Web APIを使ってみよう",
            "child": [
              "Web APIの仕組みを理解しよう",
              "Ajaxを使ってWeb APIにアクセスしてみよう",
              "JSONを扱えるようになろう",
              "Ajaxで取得したデータをWebページに表示しよう",
              "net/httpを使ってRubyからWeb APIにアクセスしてみよう",
              "サードパーティAPIを使ってデータを自分のWebアプリに表示してみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "実践では、Web APIを利用するだけでなく設計して使ってもらう場面が多くあります。ここでは、Web APIを自分で作ることを目標に学習していきましょう。",
        "tasks": [
          {
            "title": "オリジナルWebアプリケーションをWeb API化してみよう",
            "child": [
              "RESTの考え方を知ろう",
              "ユーザーリストのJSONを返すAPIを作ってみよう",
              "ユーザー追加のAPIを作ってみよう",
              "ログイン機能のAPIを作ってみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "development-flow",
    "title": "開発フロー",
    "subTitle": "実際の開発現場をイメージできるようになろう",
    "description": "チーム開発では、開発手順を共有して協力して作業を進める必要があります。複数名による本格的なアプリケーションを開発できるように、チーム開発の基礎となる開発フローについて学びましょう。",
    "thumbnail": "../images/skills/development-flow/thumbnail.png",
    "overview": "開発フローとはWebアプリケーション開発の作業をどのような流れで進めるかというものです。開発フローの主なものには設計、実装、テストの大きな作業フェーズがあります。<br><br>設計フェーズではこれから作るWebアプリケーションを実現するための方法をまとめ、開発フェーズで実際にアプリケーションを作成し、完成したアプリケーションの動きをテストフェーズで確認します。<br><br>開発フローにはさまざまな手法や考え方があり、代表的な手法としては、<span data-type='term'>ウォータフォール型開発</span>と<span data-type='term'>アジャイル型開発</span>があります。どちらも設計・実装・テストを行う点では同じですが、ウォーターフォール型はアプリケーション単位で設計からテストを順番に進め、アジャイル型は機能単位で設計からテストを繰り返しながら進めるのが特徴です。<br><br>チーム開発では作業者が複数人いるため、開発フローの中で発生するタスクやスケジュールを管理して役割を分担する必要があります。また、作業者ごとに品質に違いがでないように、レビューフローやコーディング規約などを決め、プロジェクトの効率化と品質の向上に取り組みます。",
    "image": "../images/skills/development-flow/illustration.svg",
    "purpose": "開発フローについて学ぶことで、チーム開発を効率的に進められるようになります。<br><br>もし開発フローを知らずにチームで開発を進めれば、作業の段取りなどが合わずに協力して作業することが難しくなるでしょう。また、各メンバーのタスクやその中で発生した問題などが共有できなければフォローすることも難しくなります。<br><br>開発に着手する前に開発フローとスケジュールについてメンバー間で共有することで、メンバー全員で認識を合わせながら作業を進められるようになります。<br><br>開発フローやチーム開発における管理の方法とルール決めについて学んで、チーム開発にチャレンジするための準備をしましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "ここでは、アジャイル開発の基本について学びます。近年では、市場の変化のスピードやニーズに柔軟に対応するために、アジャイル開発を取り入れることが多くなっています。まずは、個人開発でタスク管理などを体験し、開発フローのイメージを掴みましょう。",
        "tasks": [
          {
            "title": "アジャイル開発の基本について理解しよう",
            "child": [
              "アジャイル開発の目的について知ろう",
              "アジャイルな計画作りについて知ろう",
              "イテレーションの進め方について知ろう"
            ]
          },
          {
            "title": "個人開発で開発フローを体験してみよう",
            "child": [
              "GitHubのイシューにタスクを追加しよう",
              "GitHubにカンバン方式のプロジェクトボードを追加しよう",
              "プロジェクトボードでイシューを管理しよう",
              "Gitでブランチを作成してイシューに取り組もう",
              "メインブランチにプルリクエストを上げよう",
              "コードをセルフレビューしてみよう",
              "コードのレビュー指摘に対応しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "チーム開発は複数人いないと体験できないため、個人で学ぶことが難しいスキルの1つです。可能であれば、仲間を見つけて一緒に開発をしてみましょう。",
        "tasks": [
          {
            "title": "チーム開発に積極的に進めよう",
            "child": [
              "リリースや運用までの全タスクの洗い出しをチームで行おう",
              "ガントチャートに作業のスケジュールをまとめよう",
              "作成や管理すべきドキュメント類を一覧にまとめよう",
              "チーム内でタスクアサインを調整しよう",
              "担当タスクの作業計画を立てよう",
              "担当タスクを詳細化して段取りを決めよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "design-specification",
    "title": "仕様と設計",
    "subTitle": "どんなものをどうやって作るのかを考えよう",
    "description": "どんなアプリケーションをどのように作るかが明確になっていないと、チームで開発を進めるときに迷ってしまいます。アプリケーション開発を始めるまえに、仕様と設計を決めて開発の目標と具体的な実現方法を定めて開発を進めましょう。",
    "thumbnail": "../images/skills/design-specification/thumbnail.png",
    "overview": "アプリケーション開発の現場では、開発を始める前に仕様と設計を決めます。<br><br>仕様とはアプリケーションで解決したい課題や実現したいことを洗い出してまとめたものです。設計とは仕様を実現するための具体的な方法として、「画面レイアウト」「機能一覧」「データベースの構成」などをまとめたものです。<br><br>例えば、あるサークル内での写真を共有するWebアプリケーションの開発について、仕様と設計を考えてみましょう。<br><br>その場合の第一に考えられる仕様は、「サークル会員が写真を投稿・閲覧できること」です。また、設計は「投稿画面や一覧画面のレイアウト」「写真投稿や一覧取得機能」「写真テーブルの構成」などです。<br><br>アプリケーションの作成作業に入る前に、仕様と設計を決めることで手戻りを少なく進めることができます。開発の途中で一度決めた仕様や設計を変更すると、作業を巻き戻らなければならず時間も作業も余計にかかるため、仕様と設計の作業は重要です。",
    "image": "../images/skills/design-specification/illustration.svg",
    "purpose": "仕様を決めて設計をした上でアプリケーション開発に着手することで、開発作業の初期段階からどんなアプリケーションをユーザーに届けたいか明確にイメージできるでしょう。<br><br>チームで開発している場合はメンバー間で作るものの完成形を共有することで、迷わずに作業を進めることができます。<br><br>仕様が定まっていない状態で開発を進めると、思い描いたユーザー意向や目的に合わないアプリケーションであったり、仕様を決めたが設計せずに開発を進めると手戻りが大変多くなる恐れがあります。<br><br>特にチームで開発する場合、メンバー全員がしっかり認識を合わせないと担当者の異なる機能や画面の繋がりが悪かったり、そもそも目的のアプリケーションが完成しないことにもなり兼ねません。<br><br>チームで作るものを明確にしスムーズに開発するために、仕様として決めるべきことや、何を設計すれば良いのかについて学んでみましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "ここでは、Figmaというデザインツールを使ってWebページのワイヤーフレームを作ることを目標に学んでいきましょう。最初はページ構成や大枠のレイアウトを整理することを意識するのがおすすめです。",
        "tasks": [
          {
            "title": "Webページの仕様と設計を作ってみよう",
            "child": [
              "Webページに必要な要素や機能を決めよう",
              "Webページの構成を決めよう",
              "各ページのレイアウトを決めよう",
              "Figmaを使ってワイヤーフレームを作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ここでは、ソフトウェアの設計とデータベースの設計を中心に学んでいきます。設計のスキルは実際に開発の経験を積むことも重要ですが、設計の目的や考え方については書籍から学ぶことができます。オリジナルのWebアプリケーションをいくつか開発したあとにチャレンジしてみましょう。",
        "tasks": [
          {
            "title": "ソフトウェア設計の基本を理解しよう",
            "child": [
              "設計の目的について学ぼう",
              "SOLID原則について学ぼう",
              "コンポーネントの原則について学ぼう",
              "アーキテクチャについて学ぼう",
              "オリジナルWebアプリのユースケース図を作ってみよう",
              "オリジナルWebアプリのクラス図・シーケンス図を作ってみよう"
            ]
          },
          {
            "title": "データベース設計の基本を理解しよう",
            "child": [
              "論理設計と物理設計について学ぼう",
              "論理設計と正規化について学ぼう",
              "オリジナルWebアプリのER図を作ってみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "git",
    "title": "Git",
    "subTitle": "バージョン管理システムを使ってチームでコードを共有しよう",
    "description": "仕様と設計で作りたいものを明確にしたら実際にチームで開発を始めます。チーム開発で必要なコードを共有する為のツールGitについて学んでみましょう。",
    "thumbnail": "../images/skills/git/thumbnail.png",
    "overview": "Gitはプログラムコードなどの変更履歴を管理する<span data-type='term'>バージョン管理システム</span>です。バージョン管理システムには他にもSubversionなどがありますが、ここでは現在もっとも一般的なGitについて説明します。<br><br>Gitでコード管理をすることで、問題が発生した時にコードを誰が最後に修正したかや、問題点が発生したのはどのタイミングかを確認することができるようになります。その結果、過去の変更履歴を元にファイルやプロジェクトを問題が発生する前の状態に戻したり正しく修正できます。<br><br>Gitにおけるコード管理は<span data-type='term'>リモートリポジトリ</span>と呼ばれるクラウド上のコードと、自分のPC上の<span data-type='term'>ローカルリポジトリ</span>の間で行われます。開発者はリモートリポジトリをメンバーで共有して、個々の開発者はローカルリポジトリで変更作業を行います。<br><br>Gitは、複数名の開発者が同時にコードの作成や修正を行える<span data-type='term'>ブランチ</span>という機能を有しています。開発者は自分のローカルリポジトリにブランチ機能を使い、作業単位にコード編集を行うための環境を作成することができます。また個々の開発者の編集したコードは、それぞれ<span data-type='term'>マージ</span>機能によりリモートリポジトリ上のマスターとなるコードに集約することができます。<br><br>尚、その時<span data-type='term'>コンフリクト</span>と呼ばれる編集したコードの行が重なる問題が発生する場合がありますが、Gitの機能を使ってコンフリクトに正しく対応することが可能になっています。",
    "image": "../images/skills/git/illustration.svg",
    "purpose": "開発現場ではコードのバージョン管理をするためにGitは必須のスキルです。<br><br>複数の人間がプログラムファイルを同時に編集すると、最新のファイルがどれか分からなくなるかもしれません。しかしGitを使うことで同時編集を可能にします。<br><br>またGitを使えば、新しいメンバーが開発チームに加わったとき、変更履歴から過去のコードの経緯を確認できるためスムーズに作業をはじめられます。また、メンバー同士で互いの作業状況を把握できるため他のメンバーのフォローが容易になります。<br><br>GitHubなどのバージョン管理サービスを利用すればコードのレビューなども簡単に行うことができるようになります。<br><br>チーム開発をスムーズに進めるために必須のスキルであるGitについて学んでみましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "ここではGitの最小限の使い方について学んでいきます。まずは、Gitを動かしながらローカルリポジトリとリモートリポジトリのイメージを掴みましょう。",
        "tasks": [
          {
            "title": "Gitを使ってみよう",
            "child": ["ファイルを共有してみよう", "変更履歴を把握しよう"]
          },
          {
            "title": "GitHubを使ってみよう",
            "child": [
              "Gitのセットアップをしよう",
              "GitHubアカウントを作成しよう",
              "リモートリポジトリを作成しよう",
              "リモートリポジトリにプッシュしてみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "チーム開発を進めるには、Gitのブランチ機能やGitHubの機能を使いこなす必要があります。ここでは、より実践的にGitのスキルを身につけましょう。",
        "tasks": [
          {
            "title": "Gitのテクニックを身に着けよう",
            "child": [
              "ブランチ機能を使って開発してみよう",
              "コンフリクトに対応してみよう",
              "誤った変更や操作を取り消そう"
            ]
          },
          {
            "title": "GitHubを使って共同開発できるようになろう",
            "child": [
              "イシュー機能を使ってみよう",
              "ブランチを作成してみよう",
              "ファイルをコミットしよう",
              "プルリクエストを送ってみよう",
              "レビューに対応しよう",
              "プルリクエストをマージしよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "testing",
    "title": "テスト",
    "subTitle": "不具合の少ない高品質なコードにしよう",
    "description": "アプリケーションの安定稼働には、不具合の少ない高品質なプログラムコードが不可欠です。コードを作成したら、つどその部分のテストを実施して行きましょう。また、コードを修正した場合にも必ずテストを実施する習慣を身に付けて、チームで品質の高いアプリケーションを開発できるようになりましょう。",
    "thumbnail": "../images/skills/testing/thumbnail.png",
    "overview": "テストとは「期待する動き」と「実際の動き」を比較してアプリケーションが想定どおり動くことを確認するプロセスです。個々のテストは、<span data-type='term'>テストケース</span>を作成して動作結果を判定します。<br><br>テストは開発フェーズに依ってテストの範囲や目的が異なります。通常は大きく分けて3つの段階（<span data-type='term'>単体テスト</span>、<span data-type='term'>結合テスト</span>、<span data-type='term'>システムテスト</span>）で行います。単体テストはメソッド単位、結合テストは機能単位、システムテストはユーザの利用を想定したアプリケーション全体で動作を確認します。<br><br>特に単体テストはアプリケーションを最小単位でテストするため、全体のテストの土台になります。単体テストのタイミングでバグを発見して修正することがアプリケーションの品質に大きな影響を与えます。また、テストは一度行うだけでなく、コードの変更に合わせて継続して繰り返し行うことが重要です。<br><br>テストの実施は、具体的なテスト内容を示すテストケースを定めてそれに沿って行います。テストの実施方法には、手動で行う<span data-type='term'>手動テスト</span>と自動化ツールなどにテストケースを設定し行う<span data-type='term'>自動テスト</span>の２つの方法があります。<br><br>近年アプリケーションの規模が大きく変更も頻繁に発生するので、各フェーズのテストには自動化ツールやフレームワークが活用されています。",
    "image": "../images/skills/testing/illustration.svg",
    "purpose": "それぞれの開発者が、単体テストのレベルからテストを実施していくことで安心して自分たちのアプリケーション開発を進めることができます。<br><br>チーム開発では作業者によってコードの品質が異なったり、それぞれのコードが影響してバグが生まれることがあります。また、開発を続ける中でコードの変更によって以前まで動いていたコードに不具合が発生する場合もあります。<br><br>テストを実施せずに開発を進めれば不具合を見落としてしまう可能性があり、不具合の原因を見つけることも困難です。このような状況では既存のコードに変更を加えることも難しく、開発のスピードが落ちてしまいます。<br><br>テストを継続的に実施して、アプリケーションが正しく動作していることを常に確認できるようになりましょう。<br><br>また適切なテストケースの作成方法について学ぶことで、開発作業の段階でどのような点に注意すれば不具合を少なくできるか明確にすることができます。<br><br>アプリケーションの開発現場では機能追加や変更のたびにテストを行います。自動テストについて是非学んでおきましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "ここではRubyのテスティングフレームワークのRSpecを使った単体テストについて学んでいきましょう。RSpecの解説やチュートリアルはブログや記事などで豊富に説明されています。まずは、Railsを含まないRubyだけでのユニットテストを学び自動テストのイメージを掴みましょう。",
        "tasks": [
          {
            "title": "Rubyで単体テストを作ってみよう",
            "child": [
              "RSpecをインストールしよう",
              "describe / it / expect を使ってみよう",
              "複数のテストを作ってみよう",
              "describeでテストをグループ化してみよう",
              "contextで条件別にグループ化してみよう",
              "beforeで共通の前準備を作ってみよう",
              "失敗したテストを修正してみよう",
              "FizzBuzzプログラムのテストを書いてみよう"
            ]
          },
          {
            "title": "テスト駆動開発の基本を理解しよう",
            "child": [
              "仕様のTODOリストを作ってみよう",
              "テストコードを書いて失敗を確認しよう",
              "仮実装を追加してテストを成功にしよう",
              "リファクタリングを行って重複を除去しよう",
              "フィボナッチ数列をテスト駆動開発で作ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "実践でのテストはWebアプリケーションの機能に対して行います。ここでは、RailsのアプリケーションにRSpecでテストを書くスキルについて学びましょう。基本的なテストスキルを身に着けたあとは、システムテストの概要について調べてみましょう。",
        "tasks": [
          {
            "title": "RailsでRSpecを使えるようになろう",
            "child": [
              "RSpecをセットアップしよう",
              "モデルスペックでモデルをテストしよう",
              "テストデータを作成しよう",
              "フィーチャースペックでUIをテストしよう",
              "オリジナルWebアプリのテストを書いてみよう"
            ]
          },
          {
            "title": "システムテストの基本について理解しよう",
            "child": [
              "シナリオテストについて知ろう",
              "負荷テストについて知ろう",
              "セキュリティテストについて知ろう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "refactoring",
    "title": "リファクタリング",
    "subTitle": "開発を進めやすいコードに改良しよう",
    "description": "継続的に機能追加を行うためには、開発を進めていく中で複雑になった設計やコードを随時改善していく必要があります。リファクタリングをして、コードを読みやすく、修正しやすく、バグも発見しやすい状態を維持しましょう。",
    "thumbnail": "../images/skills/refactoring/thumbnail.png",
    "overview": "リファクタリングとは、プログラムの機能を保ちながら、理解や修正がし易いプログラムコードに改良することです。<br><br>リファクタリングは、重複したコードを整理したり変数や関数の命名を分かりやすくする事でプログラミングの作りを改善します。<br><br>リファクタリングを実施する場合は、本来の機能を壊してしまわない様に、自動テストなどを準備して都度確認しながら特定の範囲から徐々に広げて実施して行くと良いでしょう。<br><br>リファクタリングを行うタイミングは、専用に作業期間を設ける場合もありますが、通常の開発フロー中の機能追加やバグ修正の最中で行う場合など様々です。いつ行うにしても、現状を把握するための調査や分析を行い、どこまでリファクタリングを行うか目標を定める必要があるでしょう。<br><br>リファクタリングの目的や方法と実施範囲を確認し、チーム内で相談しながら進めましょう。",
    "image": "../images/skills/refactoring/illustration.svg",
    "purpose": "見通しの良いプログラムを書く技術は、特にチーム開発においては重要なスキルです。<br><br>初期のプロダクトの開発や仕様変更の激しい開発現場では、とりあえず動くものを作る事が優先されプログラムの読み易さなどは後回しにされることがあります。<br><br>リファクタリングを行わずにこれを繰り返すと、コードの品質が徐々に下がってきます。この様なコードには機能の重複などが放置されているため理解が難しく、既存のコードに影響を与えずに機能を追加する事が難しくなります。<br><br>リファクタリングを定期的に行う事で、プログラムを読みやすく、修正しやすく、バグを発見しやすくなるため、開発コストの削減や長期的な開発速度の向上につながります。<br><br>改善したいコードがあっても、リリースされているコードに手を付けるのが怖く、リファクタリングできない開発現場がよくあります。リファクタリング手法についてきちんと学び、恐れずにプログラムの改善に取り組めるようになりましょう。",
    "sceneId": "team-development",
    "getStarted": {
      "easy": {
        "description": "変数にわかりやすい名前を付けたりコードを整形するだけでもコードの読みやすさが向上します。まずは、簡単なリファクタリングを学んでイメージを掴みましょう。",
        "tasks": [
          {
            "title": "簡単なリファクタリングを体験してみよう",
            "child": [
              "わかりやすい名前を付けよう",
              "コードを整形しよう",
              "コードにコメントをしよう",
              "ループとロジックをシンプルにしよう",
              "汎用コードを抽出して関数にしよう",
              "FizzBuzzプログラムをリファクタリングしてみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "「コードの量を減らせば良い」「共通化すれば良い」などの表面的なリファクタリングだけでは長期的にメンテナンスのしやすいコードとはならない可能性もあります。ここでは、オブジェクト指向や自動テストを組み合わせた実践的なリファクタリングについて学んでいきましょう。",
        "tasks": [
          {
            "title": "リファクタリングの基本を理解しよう",
            "child": [
              "リファクタリングの原則について学ぼう",
              "コードの不吉な臭いに気づけるようになろう",
              "モジュールを分離しよう",
              "コンポーネント化できそうな複数関数をクラスにまとめよう",
              "ポリモーフィズムでコードを汎用化しよう",
              "オリジナルWebアプリをリファクタリングしよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "server-configuration",
    "title": "サーバー構成",
    "subTitle": "アプリケーションの公開に向けてサーバーの準備をしよう",
    "description": "ユーザーに使ってもらう本格的なプロダクトを公開するには、サーバーにアプリケーションを配置してアクセスできるようにするだけでなく、サーバーのスペックや台数などの構成を決める必要があります。プロダクトの公開に向けて、サーバーを準備できるようになりましょう。",
    "thumbnail": "../images/skills/server-configuration/thumbnail.png",
    "overview": "サーバーとはユーザーからの要求に対して、Webページを返したりさまざまな機能を提供するネットワークでつながったコンピューターのことです。<br><br>サーバーとなるコンピューターには、役割に応じたサーバーソフトウェアをインストールします。<br><br>通常Webアプリケーションを構成するサーバーソフトウェアは、Webサーバー、アプリケーションサーバー、データベースサーバーで、これらが連携してアプリケーションを提供する構成を「Web3層構成」と呼びます。開発環境や小規模なセービスでは、1台のコンピューターに３つのサーバーソフトウェアを入れる場合もありますが、本番ではそれぞれ別のコンピューターを用意します。<br><br>ユーザーがWebアプリケーションにアクセスしたとき、サーバーではどのような処理が行われているか見てみましょう。<br><br>例えば、トップページなどの静的ページを表示するには、Webサーバー上に用意された固定のHTMLファイルをユーザーへ返します。一方ログイン後のユーザーごとに表示内容が異なるページは、Webサーバーを経由してアプリケーションサーバーがデータベースサーバーからデータを取得して計算を行い、その結果をユーザーへ返します。<br>サーバーソフトウェアにはWebサーバーのApacheやNginx、アプリケーションサーバーのPumaやTomcat、データベースサーバーのMySQLやPostgreSQLなどがあります。",
    "image": "../images/skills/server-configuration/illustration.svg",
    "purpose": "Webアプリケーションの公開のために必要となるサーバーの種類やスペック、調達方法を決められるようになりましょう。<br><br>WebアプリケーションはWeb3層構成の上で運用する形が一般的ですが、システムの規模や目的によってはメールサーバーやプロキシサーバーなども組み合わせて構成する必要があります。どういった役割を持つサーバーが必要かは、全体の仕様に基づく機能設計後に決定します。<br><br>各サーバーのスペックや台数を決めるためには、想定されるユーザー数や必要となる処理能力をある程度試算する必要があります。基本的なスペックの基準となるメモリやCPU、ストレージについても押さえておきましょう。<br><br>それぞれのサーバーの種類とその役割を良く理解し、アプリケーションの公開に向けて必要なサーバー構成を実現できるようになりましょう。",
    "sceneId": "releasing-your-application",
    "getStarted": {
      "easy": {
        "description": "サーバーの構築や設定するためには、サーバーの仕組みについての理解が必要です。ここでは、実際にサーバーを構築する前に仕組みについて学んで、全体像のイメージを掴みましょう。",
        "tasks": [
          {
            "title": "コンピュータハードウェアの構成と動作原理について学ぼう",
            "child": [
              "CPU/MPU/GPU、オペランド、クロックなどプロセッサについて学ぼう",
              "RAM/ROM、キャッシュなどのメモリの種類と特徴について学ぼう"
            ]
          },
          {
            "title": "システム処理形態について学ぼう",
            "child": [
              "集中処理、分散処理について学ぼう",
              "グリッド、クラスタリングについて学ぼう",
              "クライアントサーバー、Web3層構成について学ぼう"
            ]
          },
          {
            "title": "OSの3つの基本機能について学ぼう",
            "child": [
              "メモリ管理方式について学ぼう",
              "タスク管理方式について学ぼう",
              "データ管理方式について学ぼう"
            ]
          }
        ]
      },
      "middle": {
        "description": "これまでは、アプリケーションサーバーやデータベースサーバーを中心に学んできました。ここでは、Nginxを使ってWebサーバーについて学び、Web3層構成を構築できるようになりましょう。Nginxは豊富な機能と使いやすさから、近年人気のWebサーバーです。",
        "tasks": [
          {
            "title": "NginxでWebサーバーを構築してみよう",
            "child": [
              "Nginxをインストールしよう",
              "Webサーバーにアクセスしてみよう",
              "Nginxのステータスを確認しよう",
              "HTMLファイルを/var/wwwフォルダにコピーしよう",
              "/etc/hostsにIPアドレスとドメインを設定しよう",
              "バーチャルホストを設定してWebページを立ち上げよう",
              "WebページをSSLに対応しよう"
            ]
          },
          {
            "title": "ローカル環境でNginxとRailsを連携しよう",
            "child": [
              "nginx.confを設定しよう",
              "バーチャルホストを設定しよう",
              "Railsのpuma.rbに設定を追記しよう",
              "nginxとRailsアプリを起動してアクセスを確認しよう",
              "nginxの自動起動設定をしよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "networking",
    "title": "ネットワーク",
    "subTitle": "サービス公開に必要な通信の仕組みを知ろう",
    "description": "役割に応じて複数のサーバーを用意したあとは、サーバー同士を連携させ実際にユーザーからアクセスできるように設定する必要があります。HTTPやDNSの知識だけでなくどういう仕組みでサーバーが通信しているのかを学んで、ユーザーの利用に耐えられる環境を用意しましょう！",
    "thumbnail": "../images/skills/networking/thumbnail.png",
    "overview": "ネットワークとは、コンピュータなどの機器が相互に接続しデータ通信が行える状態にあるものをいいます。インターネットもネットワークの一形態で、プロトコルと言われる多重構造の通信技術を基本としています。<br><br>インターネット上の通信は、TCP/IPプロトコルを基にやりとりされます。IPアドレスには、インターネット上で住所の役割を果たす「グローバルIPアドレス」と内部での通信用の「ローカルIPアドレス」があります。<br><br>インターネット上のWebアプリケーションは、少なくとも一つのグローバルIPアドレスを持っており、システム内部ではサーバーにそれぞれ「ローカルIPアドレス」が割り当てられ相互に通信を行います。<br><br>Webアプリケーションを構成するネットワークは、ユーザーからアクセスできるインターネットに開かれた部分と、内部に閉じた部分「LAN（ローカルエリアネットワーク ）」に分けて管理することが重要です。そうするすることで、不要な外部からのアクセス経路を遮断できセキュリティリスクを減らすことができるからです。<br><br>Webサーバーはインターネットへ繋げてユーザからのアクセスを可能にし、アプリケーションサーバーやデータベースサーバーはユーザーから直接アクセスできないサーバー同士の通信に限定するなどの設定が必要となります。",
    "image": "../images/skills/networking/illustration.svg",
    "purpose": "Webアプリケーションをユーザーが使えるようにするために、データのやり取りを行うクライアントやサーバー間で通信が行えるようなネットワークの設定が必要です。<br><br>例えばグローバルIPアドレスとローカルIPアドレスの仕組みやNAT変換、プロトコルとポート番号の関係性、ルーティングの仕組みなどを理解することでサーバーなどの機器に対して適切なネットワークの設定を行うことができます。<br><br>プロトコルなどデータ通信の仕組みをはじめとするネットワークに関する知識があれば自信をもってネットワークの設定ができるでしょう。<br><br>本格的なサービスを公開するために、ネットワークについて学びましょう。",
    "sceneId": "releasing-your-application",
    "getStarted": {
      "easy": {
        "description": "ネットワークの機能は複数の階層に分かれており、それぞれの役割や仕組みを学ぶにはたくさんの時間が必要です。まずは、階層ごとに1つずつ学ぶのではなく、すべての階層の役割を一連の流れで押さえて、ネットワークの全体像を掴めるようになりましょう。",
        "tasks": [
          {
            "title": "Webブラウザの動作について知ろう",
            "child": [
              "HTTPについて知ろう",
              "IPアドレスとDNSについて知ろう",
              "ソケットについて知ろう"
            ]
          },
          {
            "title": "データを運ぶ仕組みについて知ろう",
            "child": [
              "プロトコル・スタックについて知ろう",
              "TCPとUDPについて知ろう",
              "パケットについて知ろう",
              "LANアダプタについて知ろう",
              "イーサネットについて知ろう"
            ]
          },
          {
            "title": "インターネットに接続する仕組みについて知ろう",
            "child": [
              "スイッチングハブについて知ろう",
              "ルーターについて知ろう",
              "コマンドでルーティングテーブルを確認しよう"
            ]
          },
          {
            "title": "インターネットの内部について知ろう",
            "child": [
              "アクセス回線とプロバイダについて知ろう",
              "PPPoE、IPoEについて学ぼう"
            ]
          },
          {
            "title": "サーバー側の動作について知ろう",
            "child": [
              "ファイアウォールについて知ろう",
              "キャッシュサーバーについて知ろう",
              "コンテンツ配信ネットワーク（CDN）について知ろう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ここでは、実践でよく使うターミナル操作を通してネットワークを体験してみましょう。まずは、ipコマンドでやpingコマンドの実行結果を読めるように調べてみましょう。チャレンジとして、クラウド上にサーバーを構築をしてコマンドから通信してみましょう。",
        "tasks": [
          {
            "title": "ターミナル操作でネットワークを体験してみよう",
            "child": [
              "ipコマンドでPCのIPアドレスを確認しよう",
              "pingコマンドでネットワーク接続を確認しよう",
              "curlコマンドでHTTPリクエストを試してみよう",
              "sshコマンドでリモートサーバーに接続しよう",
              "ftpコマンドでリモートサーバーにファイルを転送しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "cloud-services",
    "title": "クラウドサービス",
    "subTitle": "クラウド環境にプロダクトを公開しよう",
    "description": "サーバーなどを含めたプロダクトの公開に必要な環境はクラウドサービスを利用することで、安価で簡単に用意することができます。クラウドサービスを利用してプロダクトを公開しましょう！",
    "thumbnail": "../images/skills/cloud-services/thumbnail.png",
    "overview": "クラウドサービスとはネットワークを経由してサーバーやソフトウェアなどを利用できるサービスの総称です。その中でも自分たちの開発したWebアプリケーションを公開する為のサービスとしては、Amazonが提供している「<a href='https://aws.amazon.com/' target='_blank' rel='noopener noreferrer'>アマゾン ウェブ サービス（AWS）</a>」やMicrosoftのAzure、Googleの「Google Cloud Platform（GCP）」などがあります。<br><br>クラウドサービスを利用すればサーバーの購入や設置、ネットワークの接続などのインフラ構築にかかる作業が不要になるためWebアプリケーションの公開にかかる時間を短縮できます。<br>またサービスリリース後も、CPUやメモリが不足した際のリソース追加もすぐに行え、サーバーなどの機器が故障した際の修理や買い替えも不要となります。<br><br>クラウドサービスでのサーバーやネットワークの設定は、AWSなどのクラウドサービス事業者が提供している管理画面を使って行います。これらのクラウドサービスは公開に必要なサーバーだけでなく、ストレージやデータベースなどのさまざまなサービスを提供しています。<br><br>クラウドサービス上での管理画面での設定には、サーバーやネットワークの基本的な知識があるのが前提となります。",
    "image": "../images/skills/cloud-services/illustration.svg",
    "purpose": "クラウドサービスが普及する以前、本格的なサービスを提供するためにはサーバーやネットワーク機器を購入する必要がありましたが、初期費用以外にもメンテナンスなどの維持費用がかかる点が課題でした。<br><br>サービス提供側としてはこれらの諸費用を抑えつつ、ユーザー数の増加など状況に合わせて素早くサーバーリソースを拡張できるのが理想です。クラウドサービスを使えば自分でサーバーを用意する必要がなく最小構成のサーバーでサービスを始められるため費用を抑えられます。またユーザー数が増えてサーバーリソースの拡張が必要となった時にはすぐに対応できます。<br><br>クラウドサービスで運用しやすい環境を構築し、本格的なWebアプリケーションを公開しましょう。",
    "sceneId": "releasing-your-application",
    "getStarted": {
      "easy": {
        "description": "ここでは、AWSを使ったWebページのデプロイからAPIやデータベースの追加までを学んでいきます。さまざまなAWSのサービスを組み合わせて、クラウドサービスをイメージできるようになりましょう。AWSはIaaS型クラウドサービスの中でもっとも使われているサービスです。",
        "tasks": [
          {
            "title": "AWSで基本的なWebアプリケーションを構築してみよう",
            "child": [
              "Webページをデプロイしよう",
              "サーバーレス関数を構築しよう",
              "サーバーレス関数をWebアプリケーションにリンクしよう",
              "データテーブルを作成しよう",
              "WebページからAPIを呼び出そう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ここでは、ローカル環境で開発していたWebアプリケーションをAWSでデプロイし、クラウド上でWeb3層構成を構築することを目標に学んでいきます。ブログや記事なども調べながらチャレンジしてみましょう。",
        "tasks": [
          {
            "title": "RailsアプリをAWSでデプロイしてみよう",
            "child": [
              "EC2を作成しよう",
              "EC2のセキュリティグループを設定しよう",
              "SSHでEC2に接続してRailsの環境を構築しよう",
              "アプリケーションをEC2にクローンしよう",
              "アセットをコンパイルしよう",
              "Unicornをインストールしてサーバーを起動しよう",
              "Capistranoでデプロイを自動化しよう"
            ]
          },
          {
            "title": "AWSでNginxを構築してRailsと連携できるようにしよう",
            "child": [
              "EC2を作成しよう",
              "Elastic IPをEC2に紐付けよう",
              "EC2のセキュリティグループを設定しよう",
              "SSHでEC2に接続してnginxの環境を構築しよう",
              "Nginxを起動してブラウザからアクセス確認しよう",
              "Nginxのコンフィグファイルを設定してRailsと接続しよう"
            ]
          },
          {
            "title": "Amazon RDSでMySQLサーバーを構築しよう",
            "child": [
              "RDSインスタンスを作成しよう",
              "RDSのセキュリティグループを設定しよう",
              "MySQLサーバーにリモートでログインしてデータベースを作成しよう",
              "Railsのdatabase.ymlの設定を変更しよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "web-security",
    "title": "Webセキュリティ",
    "subTitle": "安全なサービスを届けよう",
    "description": "脆弱性のあるWebアプリケーションをインターネット上で公開すると、攻撃の対象となりユーザー情報の流出などの恐れがあります。安心してユーザーに使ってもらい、自信をもってプロダクトを公開するためにWebアプリケーションのセキュリティについて学んでおきましょう。",
    "thumbnail": "../images/skills/web-security/thumbnail.png",
    "overview": "Webアプリケーションはインターネットを通して世界中の人に届けることができますが、セキュリティ対策が不十分なままサービスをリリースすると、データの漏洩及びシステム侵入による情報の破壊やマルウェア設置、他サイト攻撃の踏み台などサービスの継続性に関わる問題を招く恐れがあります。<br><br>このような問題を招く可能性のあるシステムの構造的な欠陥を「脆弱性」や「セキュリティバグ」と呼びます。<br><br>Webアプリケーションに対する攻撃には「SQLインジェクション」や「ディレクトリ・トラバーサル」などさまざまな手法があります。Webアプリケーションの開発において、脆弱性の潜む部分を理解し安全性に配慮して開発することでアプリケーションへの攻撃を防ぐことができます。<br><br>また、Webアプリケーションだけでなくサーバーやネットワークなどに関わる脆弱性についての対応も重要です。例えばサーバーにおいてはOS等のアップデートや、ログインアカウントの適切な運用などを行いサーバーへの不正アクセスを防ぎます。また、ネットワークにおける対策は、通信データの暗号化やファイアーウォールの導入などが挙げられます。<br><br>Webセキュリティ対策をすることで、Webアプリケーションを公開するリスクを最小限に抑えることができます。",
    "image": "../images/skills/web-security/illustration.svg",
    "purpose": "アプリケーションをユーザーが安心して使い続けられるようにする事は、開発者にとって重要な責務です。<br><br>もしセキュリティ対策をせずWebアプリケーションを公開してしまうと、個人情報漏洩によりユーザーに被害が及ぶリスクがあります。<br><br>ユーザーが安心して使えるWebアプリケーションを公開することは、ユーザーからの信頼を得ることに繋がります。<br><br>長く安全に利用されるWebアプリケーションを作るために、セキュリティ対策について学びましょう。",
    "sceneId": "releasing-your-application",
    "getStarted": {
      "easy": {
        "description": "ここでは、ユーザー登録機能の実装を通してアカウント管理について学んでいきましょう。アカウント管理は多くのWebアプリケーションで必要な機能です。実際に手を動かしながらセキュリティのイメージを掴みましょう。",
        "tasks": [
          {
            "title": "ユーザー登録機能を作ってみよう",
            "child": [
              "ユーザーを検証しよう",
              "セキュアなパスワードを追加しよう",
              "フォームのエラーメッセージを追加しよう",
              "メールアドレスの受信確認をしてアカウントを有効化しよう",
              "パスワードを再設定できるようにしよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "安全なWebアプリケーションを作るためには、セキュリティの体系的な知識が必要です。ここでは、体系的なセキュリティの基本について学んでいきましょう。まずは、代表的な脆弱性から",
        "tasks": [
          {
            "title": "Webセキュリティの基本について理解しよう",
            "child": [
              "脆弱性について知ろう",
              "HTTPとセッション管理について知ろう",
              "受動攻撃と同一オリジンポリシーについて知ろう",
              "CORSについて知ろう"
            ]
          },
          {
            "title": "Webアプリケーションのセキュリティ実装について理解しよう",
            "child": [
              "クロスサイト・スクリプティング（XSS）について知ろう",
              "SQLインジェクションについて知ろう",
              "クロスサイト・リクエストフォージェリ（CSRF）について知ろう",
              "クリックジャッキングについて知ろう",
              "セッション管理の不備について知ろう",
              "HTTPヘッダー・インジェクションについて知ろう",
              "メールヘッダー・インジェクションについて知ろう",
              "ディレクトリ・トラバーサルについて知ろう",
              "OSコマンド・インジェクションについて知ろう"
            ]
          },
          {
            "title": "代表的なセキュリティ機能を理解しよう",
            "child": [
              "認証機能について知ろう",
              "アカウント管理について知ろう",
              "認可制御について知ろう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "ci-cd",
    "title": "CI/CD",
    "subTitle": "ユーザーに最新のものを安定して届けよう",
    "description": "追加したい新しい機能や改善したい問題があったときに、素早く開発してプロダクトに取り込むことができれば継続的にプロダクトを届けることができます。CI/CDの仕組みを取り入れて、テストやビルド、デプロイなどの別々で行なっていた作業を自動化し継続的に行うことで開発の質とスピードを向上させましょう！",
    "thumbnail": "../images/skills/ci-cd/thumbnail.png",
    "overview": "CI/CDとはContinuous Integration（継続的インテグレーション）とContinuous Delivery（継続的デリバリー）の略称で、ソフトウェアの変更を常にテストし統合を行い（CI）自動で本番環境にリリースする（CD）開発手法のことです。<br><br>サービス運用中には、ユーザーの要望による機能追加や発見された不具合の修正が頻繁に行われます。CI/CDを適用することで、小さなコード変更でも毎回テストからデプロイまで実行できるため品質を保ちながら素早く進めることができます。<br><br>CI/CDを実現するには、専用のツールとGitなどのバージョン管理システムを連携させることで環境を準備することが必要です。専用ツールはJenkinsやCircleCIなどが代表的です。CI/CDツールはバージョン管理システムへのコミットを検知し、テストからデプロイまでの作業をツールが自動で行います。また、テスト・ビルド・デプロイというフローがあり、各フェーズで失敗した時に通知する仕組みを作ることで、開発者は容易に修復に取り組むことができます。<br><br>このようにCI/CDは、小さな単位で開発とリリースを繰り返すことで要求の変化に柔軟に対応するアジャイル開発とも相性の良い手法です。",
    "image": "../images/skills/ci-cd/illustration.svg",
    "purpose": "CI/CDを取り入れることで、開発者の生産性向上やアプリケーションの品質向上が期待できます。<br><br>CI/CDツールが導入されていない環境では、修正箇所のテストに抜けが生じたり、プログラム統合後の全体テストの実施が遅くれるなどの問題がありました。<br><br>CI/CDツールを使えばプログラムの変更のたびに自動でテスト・ビルド・デプロイが実行されるため、必要なテストと、そこで見つかった不具合に対する的確な修正作業をスムーズに行うことができます。<br><br>開発工程において、またサービス運用中のユーザーからの改善要求や不具合修正について、品質を担保しつつすみやかにリリースするため、CI/CDを学びましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "CircleCIは導入や運用が簡単で使いやすく人気のCI/CDツールです。まずは、サンプルプロジェクトでCI/CD環境を構築してイメージを掴みましょう。",
        "tasks": [
          {
            "title": "CI/CDツールを使ってみよう",
            "child": [
              "GitHubにリポジトリを作成しよう",
              ".ymlファイルを追加しよう",
              "CircleCIでビルドを準備しよう",
              "CircleCIビルドを実行しよう",
              "ワークスペース機能を使ってみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "ここでは、実際にRailsアプリケーションにCI/CDを導入してみましょう。学習のために新しくRailsアプリケーションを構築してCI/CDツールを導入するのもおすすめです。",
        "tasks": [
          {
            "title": "RailsアプリケーションでCI/CD環境を構築しよう",
            "child": [
              "RailsアプリケーションにCircleCIの設定を追加しよう",
              "リポジトリにコミットしてパイプラインを確認しよう",
              "RubyとMySQLのDockerイメージを指定しよう",
              "依存パッケージをインストールをしよう",
              "Rspecのテストを追加しよう",
              "Rubocopのコードスタイルチェックを追加しよう",
              "メインブランチへのマージを検知してAWSでデプロイしよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "data-analytics-fundamentals",
    "title": "データ分析基盤",
    "subTitle": "プロダクトの状況を正確に把握しよう",
    "description": "どんな改善が必要か判断するためにはプロダクトの状況を正確に把握する必要があります。ユーザーの利用状況やシステムの稼働状況を収集し分析できるようになりましょう。",
    "thumbnail": "../images/skills/data-analysis-platform/thumbnail.png",
    "overview": "Webアプリケーションをリリースしたら、ユーザーのサービス利用状況やシステムの稼働状況を把握するために、データ分析を取り入れましょう。<br><br>ユーザーのサービス利用状況やシステムの稼働状況を把握することで、アプリケーションの改善点やシステムの問題点の把握に役立ちます。<br><br>なぜ分析基盤が必要になるのか、ひとつの例をみてみましょう。あるECサイトにおいて特定の商品ジャンルの売り上げが極端に少ない場合、通常考えられるものとして、その分類の商品に魅力がないか、ニーズを持っているユーザーをページに誘導できていない、または何らかのシステム的な不具合があるのかもしれません。該当する「ページビュー」が高くなければメニュー構成を変えて分かりやすくしたり、「レコメンド機能」のパラメータを見直す必要があるかもしれません。またページビューはそこそこでも「離脱率」が高い場合は、そのページに根本的な問題があるかもしれません。その場合、離脱率の高い時間帯でのレスポンス時間などを調べ、システム性能が落ちていないかなども確認する必要があるでしょう。<br><br>このように独立したデータだけでは見えてこなかった問題が、複数のデータを使って分析する事で見えてくることがあります。特にユーザーのサービスに対する不満は開発者が察知することが難しいため、様々なデータを使って分析することで問題を把握し改善を行うことがユーザー体験の向上につながります。そのために、データ分析する基盤を作るために必要な技術について学びましょう。",
    "image": "../images/skills/data-analysis-platform/illustration.svg",
    "purpose": "アプリケーションの問題点を知るためにデータの収集と分析を行い、システムの状況を常に把握できるようになりましょう。<br><br>システム上の問題の早期発見や、アプリケーションをユーザーの使いやすいように改善するためには様々なデータを収集して分析する必要があります。分析結果から現状の問題点が明らかになれば改善のヒントとなり、システム障害の前兆を検知したりユーザー体験の向上につながる対策を考えることができます。その結果、障害を未然に防いだり多くのユーザーに満足してもらえるようなサービスの改善に取り組めます。<br><br>データ分析について学んで現在の状況を把握するために必要なデータを揃えて、仮説・検証を行えるようになりましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "Google Analyticsは、もっとも使われるデータ分析ツールです。 ここでは、分析基盤を構築する前にGoogle Analyticsを通じて、データ分析の目的や指標について学んでいきましょう。",
        "tasks": [
          {
            "title": "Google Analyticsを使ってデータ分析の基本を理解しよう",
            "child": [
              "データ分析の活用法について知ろう",
              "Google Analyticsを設定しよう",
              "計測用のJavaScriptコードを追加しよう",
              "セグメントごとのレポートを表示しよう",
              "オリジナルWebアプリの目標を設定しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "実践的なデータ分析をするには、プロダクトのさまざまなデータを集める必要があります。ここでは、データベースやログなどのデータを総合的に活用するためのデータ分析基盤の構築にチャレンジしてみましょう。",
        "tasks": [
          {
            "title": "AWSでデータ分析基盤を構築してみよう",
            "child": [
              "AWSのBIサービスのAmazon QuickSightを使ってみよう",
              "データを可視化してみよう",
              "SQLを使って分析してみよう",
              "データを変換してみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "performance",
    "title": "パフォーマンス",
    "subTitle": "ユーザー体験を向上させよう",
    "description": "プロダクトを改善するポイントはエラーやバグだけではありません。パフォーマンスに問題があると、Webページの読み込みや動作に時間がかかりユーザー体験の悪化につながってしまいます。パフォーマンスを改善してプロダクトを快適に使ってもらえるようにしましょう。",
    "thumbnail": "../images/skills/performance/thumbnail.png",
    "overview": "パフォーマンスとは、提供するWebアプリケーションが限られたシステムリソースを使って効率よく機能しているか、その結果ユーザがいつも快適に利用できているかを示すものです。<br><br>Webアプリケーションにおけるパフォーマンスの良し悪しは、ユーザーの様々な操作に対する応答速度で判断します。パフォーマンスに問題があると目的のページがなかなか表示されなかったり、ボタンを押しても反応が遅かったりユーザの体験は余り良いものとは言えません。それに対して、応答性能も良く表示速度も早いとユーザー体験は好ましいものとなるでしょう。<br><br>パフォーマンス低下の原因は、処理するデータ量の増加やそれに伴う空きメモリの不足、または効率の悪い計算処理など様々です。パフォーマンスを向上させるには、まず現在の状態を正しく知る為の計測が必要です。計測方法には、開発者ツールのネットワーク監視やその他パフォーマンス診断ツールなどを使う方法や、プログラム中に計測用コードを埋め込む方法があります。<br><br>いくつかの計測の結果、ある特定のページ機能エリアの応答時間が遅かった場合場合、プログラムのどこかに主な原因が隠れていることが考えられます。この様なパフォーマンス低下に関わる箇所や原因を「ボトルネック」といいます。パフォーマンスの改善を進めるには、このボトルネックを調査して適切に対応する必要があります。",
    "image": "../images/skills/performance/illustration.svg",
    "purpose": "Webアプリケーションの現状のパフォーマンスを正しく把握して、必要に応じて改善していくことは大事なことです。<br><br>プロダクトの公開直後は問題はなくても、ユーザー数の増加や機能追加により徐々にパフォーマンスが低下してしまうことがあります。これらをいち早く見つけて改善するには、パフォーマンスの目標値を定めて問題がないか常に計測しておくことが必要です。<br><br>また見つかった問題によっては、その難易度や全体への影響度合いから、すぐには改善が難しい場合もあります。しかし、問題が積み重なるとボトルネックの特定が難しくなるので改善しないまでも調査については随時行うことが望まれます。<br><br>パフォーマンスを知るための計測方法と主な改善の方法を学び、ユーザーに快適な操作環境を提供できるようにしましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "ここでは、Webページのパフォーマンス改善について学んでいきます。まずは、パフォーマンスの計測方法やチューニングを体験してイメージを掴みましょう。計測方法は、Chromeの開発者ツールを使うのがおすすめです。記事やブログで使い方について調べてみましょう。",
        "tasks": [
          {
            "title": "Webページのパフォーマンスを改善しよう",
            "child": [
              "開発者ツールでWebページのパフォーマンスを計測しよう",
              "リソースを事前読み込みしておこう",
              "JavaScriptを非同期で読み込みしよう",
              "CSSスプライトを使用してみよう",
              "HTML/CSS/JavaScript/画像のファイルサイズを最小化してみよう",
              "Gzip圧縮を有効にしてみよう",
              "ブラウザキャッシュを活用しよう",
              "画面レイアウトの変更頻度と再描画に掛かる時間の関係を理解しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "実践でのパフォーマンスチューニングでは、アプリケーションサーバーやデータベースサーバーを含めたシステム全体からボトルネックを解消するスキルが必要です。ここでは、システム全体を含めたパフォーマンスの仕組みについて学んでいきましょう。",
        "tasks": [
          {
            "title": "パフォーマンスの基本について理解しよう",
            "child": [
              "レスポンスとスループットについて知ろう",
              "アルゴリズムの基本について知ろう",
              "複数のソートアルゴリズムを実装して実行時間を比較してみよう"
            ]
          },
          {
            "title": "Railsアプリケーションのパフォーマンスを改善してみよう",
            "child": [
              "データベースに10万件のユーザーのダミーデータを作成しよう",
              "ユーザー一覧画面の表示が遅くなっていることを確認しよう",
              "開発者ツールでパフォーマンスを計測してみよう",
              "gemのrack-mini-profilerを使ってパフォーマンスを計測してみよう",
              "ユーザー一覧画面表示のパフォーマンスをチューニングしてみよう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "scalability",
    "title": "スケーラビリティ",
    "subTitle": "ユーザー数が増えても動き続ける仕組みを作ろう",
    "description": "サーバーの故障やユーザー数増加により負荷があがると、性能が下がったりサービスが提供できなくなるなどの問題が発生する事があります。安定してプロダクトを届けるために、アプリケーションやデータベース、ハードウェアなどを拡張できる状態にしましょう。",
    "thumbnail": "../images/skills/scalability/thumbnail.png",
    "overview": "スケーラビリティとは、ユーザー数の増加に伴う負荷の増加に対しシステムが適切に対応できる能力のことです。スケーラビリティの高いシステムを作るには、負荷に応して処理能力を上げられる構成である必要があります。<br><br>処理能力を高める代表的な手法として「スケールアップ」と「スケールアウト」があります。<br><br>スケールアップとは、サーバーのCPUやメモリなどのリソースを増強することでサーバー単体での処理能力を向上させる手法です。またスケールアウトは、サーバーの台数を増やすことで処理を分散させシステム全体の処理能力を向上させる手法です。<br><br>スケールアウトの場合、複数のサーバーにリクエストを分散させるためにロードバランサーの導入などが推奨されます。また、データベースサーバーなどを複数構成にした場合、データ同期の仕組みも必要です。<br><br>スケールアウトとスケールアップのどちらを行うかは、目的やそれぞれの特徴を考慮して決めます。例えば、処理負荷の高い時間帯だけサーバー台数を増やした場合はスケールアウトを行います。<br><br>一方でスケールアップは、対象となるサーバーにおいて処理能力の不足が明らかになった場合に実施します。<br><br>クラウドサービスを使えば、複数台のWebサーバーを配置しユーザーアクセス数の増減に応じて自動でサーバー数やリソース量を調整することなども可能です。",
    "image": "../images/skills/scalability/illustration.svg",
    "purpose": "スケーラビリティの高いシステムを設計できるようになれば、サービスの規模拡大に伴う処理能力不足にも迅速に対応できるため、ユーザー数が増加してもサービスを提供できます。<br><br>システムを利用するユーザーが急激に増えた場合、処理の負荷に耐えられず、サーバーが落ちてしまうことがあります。この時あらかじめスケーラビリティを考慮していないと、サーバー追加に伴う設定変更などを行う必要があるため、対応に時間がかかってしまいます。<br><br>スケーラビリティについて学ぶことで、負荷分散などのスケーリングの仕組みを取り入れたシステムを作れるようになり、ユーザー数が増えても耐えられる大規模なサービスを提供できます。<br><br>将来的なサービスの成長を見越してシステムを作れるようになりましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "ここでは、AWSでスケーラブルなWebアプリケーションを構築を体験して、スケーラビリティのイメージを掴めるようになりましょう。",
        "tasks": [
          {
            "title": "AWSでスケーラブルなWebアプリケーションを構築してみよう",
            "child": [
              "Amazon VPCを作成しよう",
              "ブログアプリのWebサーバーを作成しよう",
              "ブログアプリのRDS DBインスタンスを作成しよう",
              "ELBでロードバランサーを作成しよう",
              "EC2インスタンスを増やして負荷分散してみよう",
              "RDS DBインスタンスをマルチAZ化してみよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "スケーラビリティに関するスキルは実際に運用や保守を経験しながら学ぶのが理想です。ここでは、スケーラビリティに関するスキルにはどんなものがあるのかイメージできることを目指しましょう。",
        "tasks": [
          {
            "title": "拡張性の基本について理解しよう",
            "child": [
              "サイジングの重要性について知ろう",
              "クラウドサービスでのスケールアップとスケールダウンについて知ろう",
              "オートスケールについて知ろう",
              "ジョブ対応のスケールアウトとスケールインについて知ろう",
              "スケジュール対応のスケールアウトとスケールインについて知ろう"
            ]
          }
        ]
      }
    }
  },
  {
    "id": "fault-tolerance",
    "title": "耐障害性",
    "subTitle": "プロダクトの問題に対応できるようになろう",
    "description": "ユーザーが増加しサーバー台数も増えるとシステムの問題が起きる確率も高まります。問題が起きても落ち着いて対応できるようになりましょう。",
    "thumbnail": "../images/skills/fault-tolerance/thumbnail.png",
    "overview": "サービスを止めることなく提供し続けるためには、システムの一部に障害が発生しても処理を継続できるような仕組みを取り入れることが重要です。また、障害の発生頻度を減らすことや、もし障害が起きても原因の特定や復旧を迅速に行える必要があります。このようなシステムを耐障害性の高いシステムと呼びます。<br><br>障害が発生しても処理を継続できる手段として、同じ役割のサーバーを複数台用意し1台故障しても他のサーバーで処理を継続できる構成とする方法があります。このようなシステムを「冗長化」されたシステムと呼びます。冗長化は処理能力の向上だけでなく、障害によるサービス停止を回避するための手段としても有効です。<br><br>障害の発生頻度を減らすための予防保守も重要です。例えばメモリやプロセス状態を常に監視し、障害の前兆が現れたら原因を調査して対策を行うことで障害発生の抑止につながります。また、データベースのパフォーマンス向上のためのインデックス再編成や、老朽化に備えてサーバーなどの機器を交換する事も効果的です。<br><br>障害が起きたときの対応としてはログファイルなどから障害原因を特定し、できるだけ早く対策を行います。この時調査から復旧まで事前に作業手順を取り決めておくとスムーズに対応することができます。<br><br>このように対策を行うことでシステムは障害に強くなり、結果としてサービスを安定して提供できるようになります。",
    "image": "../images/skills/fault-tolerance/illustration.svg",
    "purpose": "障害に起因するサービス停止を回避できるようなシステムを構築できれば、ユーザーに安定したサービスを届けられます。<br><br>Webアプリケーションをリリースしたら徐々にユーザー数が増え、サーバーへの負荷やデータの増大によるレスポンス悪化などが発生します。これらが積み重なると障害へ発展する可能性がありますが、全ての障害要因を未然に取り除くことは困難です。そのため、開発者は障害の発生を想定して様々な準備を行う必要があります。<br><br>冗長化されたシステムを構築し、障害の発生したサーバーを切り離して稼働中のサーバーに処理を代行させるための仕組みを導入すれば、障害対応中もユーザーにサービスを提供し続けられます。<br><br>冗長化されたシステムでも障害の発生頻度はできるだけ下げ、冗長化と併せて日頃の運用に予防保守を取り入れることも大切です。<br><br>障害に強いシステムを構築するための方法について学んでいきましょう。",
    "sceneId": "continuous-delivery",
    "getStarted": {
      "easy": {
        "description": "ここでは、アプリケーションやリソースを監視して障害を検知する仕組みを作ってみましょう。CloudWatchはAWSで監視をするときに使われるサービスです。",
        "tasks": [
          {
            "title": "CloudWatchでモニタリングしてみよう",
            "child": [
              "請求アラートを有効にしよう",
              "請求アラームを作成する",
              "アラームの状態をチェックしよう",
              "請求アラームを編集しよう",
              "請求アラームを削除しよう"
            ]
          },
          {
            "title": "メトリクスをCloudWatchに発行してみよう",
            "child": [
              "データ構成を定義しよう",
              "CloudWatchにメトリクスを追加しよう",
              "CloudWatchから統計を取得しよう",
              "コンソールでグラフを表示しよう"
            ]
          }
        ]
      },
      "middle": {
        "description": "障害に関するスキルは実際に運用や保守を経験しながら学ぶのが理想です。ここでは、障害に関するスキルにはどんなものがあるのかイメージできることを目指しましょう。",
        "tasks": [
          {
            "title": "可用性の基本について理解しよう",
            "child": [
              "故障の防止について知ろう",
              "迅速な復旧について知ろう",
              "文書化と継続的な改善について知ろう"
            ]
          },
          {
            "title": "運用と保守の基本について知ろう",
            "child": [
              "システム監視について知ろう",
              "ジョブ管理について知ろう",
              "バックアップ管理について知ろう",
              "運用管理について知ろう"
            ]
          }
        ]
      }
    }
  }
]
